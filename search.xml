<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>進階資料結構 for NCKU-ICPC Week 9</title>
      <link href="/code/ncku-icpc-2020-week9-dlc/"/>
      <url>/code/ncku-icpc-2020-week9-dlc/</url>
      
        <content type="html"><![CDATA[<div id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">  <div class="hbe-input-container">  <input type="password" id="hbePass" placeholder="" />    <label for="hbePass">Hey, password is required here.</label>    <div class="bottom-line"></div>  </div>  <script id="hbeData" type="hbeData" data-hmacdigest="4705a51eb9016a89d8acc9d5306b54a66d0e7bb970816dcffd20f0deaa068186">4f11c70cde93ad29e66f0be09f11249774eccb96d93ccb74a51dad7d3faa97882d42f24a107444ca21fdae34966567621d2cc6ff433964818f08cc78696938681bec15b17a8bfbc41cd2f0a839b16b7f5fd531cf249a5e628b2ed44c672dd3bf00695fa1debb897ed1ee4761dfe5398b7962e672cbe914040a40939405afdbe886a8ebc9fd313704629f04c734c378d0cac8e325e47fce27837b745a8c4753070e473c781ca95b3f2286989a77d5872f0aa105e76971c362abaec5ec416b6ee1ee0cc0b7ae38cf566a4770777963b67951b26c16520529b8a304d20944271c59516a4066d5dd89143c89bd3a3666f53dd6716bf97fcdb5069bdfb50df5d685422fd2e64bd920b7807a5c87136f8bbf5629bb3ab41e2f0cd27dcc98ecc44676fd7030fb692da29f64a7a2f2abd0521b3ecab5cffb75b953c19d2020f04ba223fb28236f0e84e5e5c3aca1748c93e18f663ec29f69072b71ed776138315d904ffdb13166ba3289d2af1feb2e97545ca56d76978c72b001142f02228d28354b0572b8a85dde1422ed16ee08f411e2528b11b83de2e59cc89a0234e79c17e3e3901cf9310fa72e83c3db880812ef18db6ae08ca21a4e7c87fa84f881b36ac780b7be192e2e63716eb7b350defb51d1f27339c6e2cbbc81dca0db8506dae48f63f3502f3fd974b505e3296a279c29fdc6f494468a467fb475730e34bc0c9298860955a5fa30422d77fb2164441b19bf50cda7954ce7b8142878400bb3519b192112ebca36f0c68260659dbcca571a903e4d90db783547a4f0ce2edcdea78aa204ee6b629c793419b9fd779304e07e5c7f340b870ef026f7a346f2e16abfb5aceb7b1bcb84aa0d15414a06834ee109bbd3deef529c61793fecd1546f2beea9fbb8289835e84c6c148bd637789e57f2bbcf07a02d7fe7eb53f1e76842a50dc3c29bbef780338e6fa33fbefc45047abfb8b00626bd848378f9d8d53adb889ccc87ccbff679f5ec46fedce5a3f3d97356017af99d8e80b9643e1230a391cc493216629f0dc5fe14367d0250ace8f5b0f0ac63494d3ab8b69d5a9ea4dd48fee97ce04d5b854f1dfbcd35134d42bd781ccc1b7d89046a3b72e3ed830251f653d08bc9ea667388b100569a50c2aa2090661da9fe656cc3f9d2aa6c4f293504d0ae1a9a0408edbdeb88a5489395cc6fa66893ba834b6d5f920d8df30dd480fa526d24f7393c7c7dc028a6d865e70f5fdcad8a03d98fb91b8d5260a76845b1111a1765f4f7e9b009721abaf64898ee71220ecf77d4b2b1fee0444b681ab003965bc00f7c483e31a41f9ecb2569dce3331beaab4ac43eb47ca127b4da1dcc6cf61df1040cbd05f45f8048f214921d838b85e1c739c87b7be88e185414ac447fcc899415727675c52efff232178126c03f7f592af93cb39ec47fd8535c372daa9a44f091bbafa29369f4d5c7ba7a8c2415f3f646c003fb17241956e63d8b5f674c811507dfb1027453ccfbdadfd92604fb08fef96f002e3188e5338a98694242ee5adf0eaccda035e78d88b68d43de68bd8107ae067012c9031ae8b9ca1d1217174f936b0b44b5dd25cd1cd5d621c727fbc6ae1bd8b36ec30320ccf86e044ca7a42e859b93835830916875b2be4a9516b602afdffb1c510fad8f93dec431cd4ee2fbd8c864167fd831a9108d156d092253de8bec5bc81df1b4cb5be4b18b0eeabbd8cc311abd6c46bfcfbf7de763236de03da04e89bbba6b4509c6926e3907854876c5c0a7c0dc79f633af2d6cd58e69ff07bd3a6260947e9dff0872e822bf43139a98a830140374deeec1ae5fd3f4a028e4e3c0e86978c2a00f65bc9a7501447271a9c7cd76d8a5c128fea5c3b677563b839857069583c4533445bc3f51495ae0e73410208094a31950720a83a2b8370284a93835aa6cf9be8dcd27cf6d34742a5f2aa9bd0c84c63732f0f4b5752d7a8010feacd9f7c695b85c5bf29b31be3e23202385d27d8ae5bb2d1147792779cc3d0eebc535f21a44009ad4720a9143be55d0e95de9adc962f618b9279d45ad976614671caaac47a0f7cb15be27d5b24d62be65698a00908599c4e541bd438d557ae6bcc65030d940618354b9c827f776fcf0477701091ff672c8851b3f7cfd6a9674ef0377991f6e6949e507e227d8e361b3e285d36159eb9de75761c6bbb9d382993c48f6fa8551003528be9c679b83b137f65b73a118ba72eeeb2338dbc4015348fd27ce0bfd4cc0dc39e11a6abee4169e4881634cf899517f02b9ca8229e2047e408a46733d042538ca4c8fb1352a0d7836cefee558e9fc2704f9ad28210eba952f30cee1739c3765cbaad06206cae4b75298ae4d4d75a48973b68cc901d35209e657a52019da9aac1099f9c30d64b0754b6a5515ae7ea32e9e113aa1cfea3cbc7bb8452fc7e4a0bd7eb66adeadeb89c174c1f4977f089bdca7c274bbcb2b8f5a909b964e58f6bd7a9fe29df57b2b6d9845ef864735d1792531bf3f8335dc6c5a428315750f4673f8371ef9e567530b199f3654f49c3b064eb71d4d1bfcdc5e65875b69d772427a385421fd2e2855d327aaf7559576bd1302973d98815ec1ebe242597b75906d82ddb41a4d3fb2c6bc01508dd3fcbe4b3ae55637adce474c993ec02ff1bb69f87713be9e5e08070ea2ccfc1c7d87b5f76710b89aefc48eb466e2b66197b5b00ff8e9656ac52de9b06c19701fc1ce110526beb581949a5e6f75d3a4002be26c94624c5372760b0dcd9229475103d1ec639432ac0a947463bb30b99b723c3b93e8726cadbda64a1be633bc59fa74cc55773c531e00f31eb93a18a215765ada9102221932d3e422b277ba9a2457f549984e3ccb17bd746cfa605908dbfad5fd493018c9d685d9a0d1817c2966b4ad323edad5be45c9b164187b325949aa3360b706a8aaa38a2dfecedd682496bf2be68e894199688d56a4b666e7736b10ae54e9890132dfdd038bb82e72cbfa96e4e90054c93b011f51d6e60f4c14bf9bf7b1775a5b3a7c4238283f9477735f743ef13a1f82794384750389527a16056eccbcb26889ff5e7a7e76ec0cce7a92357d6c5bb030c3ad245edfd23a460f28d523feb20e710f006be6f93cc03b5f515c4b2945632f20f9dd76973a518f5e36be01dc53b49e51b485a4d0596b10e9242bca263d41d1cd05ab06829307c067c3a307feec6c18af8b5bf9b4c7735480bf31d2546a520e2cb7fbd27f8dd7ee0399688c0b6868bc9a13d53f07858c5680d97aa95be0616f1e2e32a0a9318e8d96f018aafac4ae62d2d71a950bbb377e4745bca15aabe6050cf79201c8f45379e1d722aff2ecd2826d20c9e3ba4b54e72079c040618141433de07a5365909dc542c11204dfc6eccb673ae13ff2be490e903ec2cc6f4b53faeb1a6569d74d751355a1e747d053ae1a00c2ace38875aa9ac480ba7dcaaad6eba3e926612ee2913cce4f951628e341027de1517d74672a6b135276c08602af5a25bc86672844c14a56139e0613983add504c53297b11b0644f9d2ebd38067f1c19c9919f6f2d5288ad61ad7482131535f442edca2a19d1392c5740ec272a0022dfdb8f15c1f68e3c89f8134a68ac4967d46501b4a8805eb3f4d973a10be58b3cb277e25afe1d473413d2e22c443b65b3a9f66861d04f45aac199ea0026acdc4633c82b5a6b18f19c6ab952a4ed611cd8b0b6756c2706892c862d4f4b1b685d55c2c5030f2c0ef7bbd5a94b1dd9cfb31afc5592ca9038ed22f50f3bc0bba0bb86868046cdb0380a5326a34c8a45c8da08678a383876e2dde0fe0ee736cb39f4100388a2ae8fc5d8a084bf16e844468b865ac13128041dc0b5dcfa68172fbddd195868ed8b4fb73bc4f4cb984567de9d7336500ac34c64a46092e2058f904d830a22dafff3e24453e13ffcfc9eb6c5daedc02d4cad440ce689b7c7f8146219b7944d063f939d5f9f866f347865f07b9617d5791bec5304b5d3f50afa720699eedc5a680144d1759a5bd98faa9ab6dd5b3d11238391cb1b850d432d3c11bbbec9724126e51d753a09ad1684ff2b71143a0001c5de4f58e977fa5288bf1f40466298068dab6a5c7b74a87e7fcd86b362b831b6d010be7e699400298b3e1d481eba441ae84f7b90adfdddeb03d9cbc9a501ca3725f603ac0f776ad5578bfdfbdb7c1d8a384083bab0da119e5ec2e2af46b12ff1ce1fc111f5754a70f9d057fbe4b6a6a24dc791fae6cc627341714a62407a6ce2d8e32525f28c2ef16f6ce1809c87f0df96969eb3c5b24bfb401748ce3efe0e540edab26d1fee3d9f9c37a4c40d9df2b7ec444c5cf2de0a4ad3537e22b93f49dc91a90216e71ef6f52b7d49b63e8527d87aa362bb7fd67797c3c655db15aecf71d8be70c18e075ad09a1e865fb391e1552b49846629e3d2ab8eb83e1c5024b9775f136bad365ea6f42cb11633817b9c3a641dba81de0b3b6c4dc02af896f40dfa1dba84084828c61539a3301c0b75729c37205cf477d9de94e0d554be4c0979e82faa55eb70d3d5f0a286070d126e11e587aee09999d46980a6413a2e455b64149f83fb942098a681ec4c94281ec8f2c9df10dadf4f7adced53a5087244c93dbeb7ffea29edc32c8f47091c473eb1c3be5f8fee62592b4968ba7d5e76cb835ace8868d093f2cdd7bb6ac2cb9df3323c55e607d00b2cf7b864a78d2d038950362b6081a2ffba8dca923e743c9529a1173b075d6365f247fc40320c3103c3c05584c90a7709aab60c3be5d496cb9b1217fe4a5516dc34508ce68d40ec1af52f0467364328bab4aa9c6101ad9cb0fbe45bf6f3f5bae592514bdfb56f7f269689fb2e02b414bd4bf48f1c23b3ca16284f04977c016b5db342298fcee03c395c68b8f2c12a28063c11984ad6685cf9c754644fced3d69e07fc5088822a876a33f42113723cf9b96c1f346bebf09295b8c6b4777db73cc6af41fa6165bdd4e01b61119be7348bc01cf879341a3eb817c4ebee51bf8d3a343c266c9d75ded083511968d924bf702afa800ce95df2457d0c1d3d3562f1f724b39cdb9eb2bf21bd0d83e9b7f31d7d6073232f1ec6f8c1a06028bb1b626e7c5d4a37730efbd0437c8f6f9960a3ef2d333417ba64f79cf1a33717680e4ef796327ec580cfa8684b8140841e39c8932aefde1afe48a62c56521c21766fbeecff1bd0ad7b511266a0c3bf2592504506302bbdeeb34ce925c82f1d3f3fdb34414a754270505b3c2e233c4ab1dabcac3988b2b8461bcc8049b2782eafd2986c080342fb4cc69d9433dc7e7475dfb410b0d168671cc97c09fa2d517409409c20f74c323b75c59b3e93fdfb0def83f60f58f8670178b75658fe7f83c22375d37fdc375d13fe8149ac54a39cda949091b9a2e61e1bded95d52d89714dc4b58512ee21c7acc178109c92cc4ad59aab581d7c48af6903b48f6959b11e823172b0cd649b1ac3416d82a202c51c0d03b7b2ca9c3913713d73f04ef3b0e434d5508cdfe716214de1148b1bdf5c65fd6c15f84c31070ed904c6eb76e04daadc05b23fa8e91f4bcc0c93f8cb05330f18208a057f7252895b9b52ab0849ada9f31b2f08678e23250abf93b6746c756da51d450b3a7742ec80977bbd36e4d39c200d9d031d07b9325d3a6387dc4c2c6722c0903ab6824bf64dee6ebfae675cc60668dd917cf5eb29880242e30542e4ec2565ffcd198307ae013b599e465b59917511e20b8aa420f8b0d52a5385097c8cd1e3a0c1cded4b0e51995d2152416c4c5d17ce1a9e437e60ce6bfc73f925f88553d7ffab53a3767fbe32828517f1ffdf6d38eb5842cb9d83c99f19b6f142dc9b5b10d8bf61ce4d51bc89aeba7e37a073d5a223e95db3b8837559792c172e0644f5440b598e6aaaf29b0dfdff917abf0b9bdb9fe1301a533858c77b72a56e96bf315290eaed402a340a43c7bfbd4584df30db31ba98e159fb8b32737edfd57134a65fc943d8d249cd8163abba94febed0d0e3a2cf299d8a9e77d4aa7efdf8867653e3e66a5809b2932a2a055dc1fedd8f79b972b9e09ba5b98d6635214c9197f09eaae6dd0a6c1097d5350a7e961b8b6408ca2d169126dba6b1a2357fc3a672fe7bdee7c147e9d492a7bc5a8bbd47696d41ae4cdc72216dd8a3f81e7f74cabbcf0a34969a2fea6969ad46d4d4349b17af4a2fba7c2c6b470d55e0e6d09cb0f435a26e72ed95dd84b9fa3e7859b8781c2c5c0f39630ec00cd11a4263f0e09f50c44207029d70d159a1949a1edf289618b1b6e5dfdc87af63164139128b0c25ce74d00496a00d348d2e294649c72912b99ad4d639e0360291010cb54f0ed2bcd5ce1fb054a946700ba22684c027adb5a75815f29bd35e882c9f460dba7200d1f0070741cc66bd84e3cb85fb6f5bb1701b1c11261120a0208ca166760986dbd587d5f5300a02155cede979397355d0513a8b45d3930ab025edeef27e849384b59288679b390b43fec68b102d7d9b10305733c24222986bf6579723fe9901e9e4b1bef9c7478f8874245fd1f93f468c13fb43fb4a5b98d2666941f5814bb3b2f9db94ff27606c9d555e51db38f8df26e1a1d5fa50db7135ec97d96f02b0e022b45feba0e11da840c66e20de0e14e88a2eadf6fbe58fdc3f3d6362f0dac372facc47701e8d922283bcdbc9ff2e8a11559c0c0c96a7ea1dfad9d3722464a842ec97ea2bdb74b368cc12bb9d9aac28c4b00704584d7c220219146550dea1af5688cdd734a9896204a283cf65094692a0776a4dfa16c9f5e9b415173f07b833bbd4313af21154007e7a7788503fb2e664902b7490d0651e32357ea857c85c98be6714e236d9b1096752d9cde534e58baa06a02567c6b8d6a28b61d1784522e9f4c505b34ac2c40012e601bf41a0e4584da8bd09d496b6e7708cb67ca05628910fbe7fc78e29d84692339a403fa2c66896bb647cfe87f8a25a090b25b390c22416ef9438422ce3f3c0c89746cc77960937c8cc9433734e520882e3642fa56e37b87c7085b0cc2d2749c2c000ee8cd40279b637961f56ae38902e0a690619c5f4e8602b228e28f44417a85fd7332698d7728c03110a20b1d4c4b1d29ee976c2168cecd1b0053de742fefdababeaa7caab09365dec9a2c9e9cd71ac8f384adbed1d5742ec1b1c1c8af963b2adf43ddee2b37345818280e78efb2c3e49fcc893d76b76b074ff5146fb5bb7598c874e5a8ebfbc06f9231fa350e1a02041f92ce22663e31e90e5650a14bc41f396815ddae4387defa3fb34c496b1fa6fc395444911363facf2bb2989cd79d6514ad45332711ac6100c5a8bc97eeed8b30c5c2c9892121852c8178c297c311b33dda9f776e00429bb9dc58f10146452e30005d1906f9c074f198f72ba60f89922765794354bb4849dec4532ab88aa0b2599dd04adda9e02d3d29a05fb8b9a5cd349e89876198a4edd96b6dbfce3eb33ea8eaaa48da03bf6f70a122a2e8890f3558b955e1ca850c07761ba0d97b250238193c8def51d6887b42e241f8973fc0e6f78cc2c5c2f5431f548d6c2725edf2827e8770406143119ff4cbc0ce0510d7482ad57febfbcea2b3426d47139ee7645ab7a271152fbb699c60ac49e491ba109f39d9e378c1b18bf0d36abf020385c34cbe1dc428b8f8beed396e4e0ea75307d4a6cba3f6da0dcd051d7da4cbd748a2f37a3d86cc7b88e1c33384410693535984931fe19a84673d05ce02270150ca3494be877cc0ebff309721b46c7e3035894a417abc70d39706be05f6d2a0eba4846c472922770f0f6bd5ca5b72ef44726ec460a3ac1552c537c557e2a831a1102b6574b5b21df6c4150d9c562f25f7c97873659817ea66c59c4c7464aefee0ac692d9349489ea6600fc25b1ba7ccafd9454bb00993dcbc391190aa3dff0f01df1c03c4e52c3102adf28105de8d575d7f6522de90306e445bbbdba9277b97a447ff4d1c55daee3cf5c4c0aa3872029fa370cba47ea3b93e2b34d473f1e623613dfcb1c38a04fcb334551b74378b7305c3408168de83ee3b51162553954bce6c0f80d08c481930af2e5803e2e6e93680c94b821b30a1af6faf7d682f8aa05a0d9b07798da240657653f0fe6ec311b530ed830e67497b5ec00201f3ae6dcdc1071a7260a52cc39cf68f79ed95575e078cb58686719fab4bd2e66b24f2b71d47d8bb2418dc44accefd88344c99b096548a32fae2c1d197bfe8a999351afa0ccf2771f7ee168eeeb90230d3cc15cf1e94ac7ae131141168c00f313d78214fbbafb71dbe3bc8d21c8fd6dad46542d0ea546314dcc17f2da60a125cf1563cab1931d5aca029e20178244457ed2b288af9a84958e7b931be03800823b3eff11f4621f5a128fdd196e90ca171fe3ee1878e6127d65f6fe63de4696ce3e6654495b94d6324d55af485000b1772e0401750fe0e5016d194d0ad5e917f1d4e89c461c7cb841f3314a12c4785f8dd7bc9a0876ba149de3c7b446b8cd20463791043a0edf99d821fda91aee10581c8faad7c68ef9337307a7eaf1e87bfe7722ab790901c3c67292c0882416b5433595d5c253974ec01bf1a1254bd8b681da6a5d58ea92895ca75a16bec984a439c1511b2d73443243e210c095977d12441753bb6363f8ea88e82d5380b0bfaa2a15bd7105954025732b81c5a987925dc25ab7ecd8d0b9c32bd13c11cb5ed07959b8d5f426b90eb03c7afc8439c5756063f331a5e1062330217bcde6ddbaee629a720668d28997d07443900474b08bc6ad46277fdfc2c6e408040f9472ff2903649b8704d2d621f5a2a116cce55827280905b3f87aa6bc89cfa768fa2c1481c525c9bb7ac9c7d854e8b694579477b209c63138652acef713520b76cf854438937f62fe089158f96ca80aea8958e1f66b3e2d41198e715629413b823d9a6d610cca8c65521e98e14da1df322d590274c940c865af54792a13e620dcfccac035237af2055e668b48b5ce1dc17622621095892e331d86ae3714685d04e88a70bcc163b9b2b47f32be834f99459eec5839dcb406745bc254b9889df0dcbb8ac35ce027f27133a98c1ca9ebf5576f31f6f95c97cd30b2c7bed80fc425890599fb4f907d4dd684a38309a2af41e05efd8c838313acdc05360f7f6e8da02b0be173ec79d4de819e83702cd2d0200cd1539af47394b8e0b5d036be17614df9b265f172c7c657b482b436ace7c3380ae0e4211da03ae944941c373dc3ed304d0053a0f75e0593e4b373ac18fb985e8639dfface5a234edb9b64474d9511536e8383f446f82e0c2b9be078df366c5c8837b3583a86cffeec57c48d59808a8022fddb9aca5f95cf4bca3afb35df3d07a5b062b6f9384e1b215143c7c64097699fe2b86029a3c5b2c1531b44369e13f6172bd736c0cd86dfa8cdb74fb54444f769de0daf83d6a41bc1ae295903ed694826103a90a6abfa1d27369bfbbe9cda969349989ac8abbfed1ab8dd337447dbea6bb08727c949615d5948ad57536a58ea2aa6fe2d62d91752f86c83c70e146218cb28918b6610a192c029106f1457e694ad55c63580e52a6b6ec152c382b9adeb175d7bfb47d39ccf795eedd97b69df712d88be0b436a1fc2cceb7d0077074da764fac423cef90da133fb040e9fb21d0bbccd0cec718d944c75a1a08d11b2a84dd0648574b90a271ae03c8a19d154386c14f883fd4bb093f07e5e2b8873da3892229609f25479197609978393108afb049832c25cb28e6a3ef77755a3fb0feb4d1ff40f2d41fd93f20e7b652862d89c95d18f416f3cbc72933eef59d9af018f0b098693bfce2fe532a8a162b62c3e0a50930687e3593a1b4d8706598b39851ef42b1123dc5d601a25b275e5b3fd016b65d7a095f64554d6b4b8fd8dba82298cbd16e1f7c35ba0284657a8488c4c9baed73c2c2b8da10403a9dab9d806e658777c0ccce40a8c50bbb139bf697225c47505fccb7fa9b1fef0278b1f1d1f894555b14fa9effc44a30d43ca5d575b004f8cffe94ec39f1649643bea962561fe5bf2213d70d6dff136ced2210a0aa08373ac7e4656291a2d5f3e5f497f349a7b174a3df2c00ef2b13443526ddb05f481d094b3fa1152361b355a8e018ec3b3abca646368e60386dda3fb63a06858d6ef07a7c7d78fc7e1d441e85cbf3d5b1fe090480c4cb5e85c79b2bf84b98132ca2888fb5995320eb264dc770dc64272fe3c690cd0385958679e9f1414aeba9aead82051cf46cb40c0ef455f5045c091a883f50a2485ee5ed1698e4fd377266204b029e539cf34af68792c1cabe3305d249a9ff4ed83138ef5ae8a401d6af1d9b6c6977fb68e8e517207d54806378c02c8e591587fa2bce503338402d354b49b7d73bc036673d0a23065915cd2dda9302326d31710e3de77ad444b14a6d64352ae6ddc8619a2b4aa3fe8e311d536ffc96f2d388df2c0a6d23fee95fab61651e787a8bd89805c5f0a80d4e427295bcb402328b08f34fe166a600981f2d0ebd0ed10bab114e4421e77e0ab47ce610c0028c24e0126ec2f988f31d0e8904e53426bd8ebc73d0dcb7a9411b287dda83d882774c6a42d916991ec8d677a1334a4e7984f0e2e4bbac85562ef471492f4d8948f661ad7b6cc3806916ecd15ef92ab965a28df0e985095c2d3787ba7f567aad4cc51228019a4d944fb87cc61b3c848cda0652b0ad60ba97b63660ba88f94572dcb5ebc9208a71c86a5cf46f48e87cb58cfd25608fcbdfb1bf090b04147c066387bb5071987d6268dab7a4317a9f196fde2e2e4789ccca10ffbff14278e2cdbbd8386fef2a3a1db282731734b3112b188615257879db77e6d09950b1a6eb97b85db206001cac83e4f84822e12baa0cea86c9143f38ad79a5c22cc9c4a5caca618fddff5442d0f1e8c6c501fd8344a1c70ce809962898c4424d463eb959141621a3b7a09e7c693c769b939fca85d25ba5ed04285f6e4f1707f60fae2f93960a1e8874fdaf1937a990cbffc3b6c2e23feb5025e6768990c2a90e1e197cdbedc7a5724b145269fa599a7d3448486ae006ab06e6a1d2219c2866df246bc498736ee30c1733817581afd1eff98c34c5d86dd65b293582f0847d60684b5cde8f8a6a2648d5f026729e79efa0f243355d2f4e42f41db7d881f01284f3a48014f1cbc75317e9b45d79b1575fc5c38adcb42f00e4cd6a506a7e02db060ee7333d56c934f347b84b9f84d72b23e77e3ace579d5883a718072dd7ba73090866fb8b293369a274388a2d95803ee252ff27ebe277a5ab5e453de57ab3a079ae9448b93fae8e6ed85ee95218653d01f5afa492e877ed97c12fa92773967b9ce769047133884aaf796fc7152d991802850d857905f7a8a5c78419aece15025d16cf7d59a7adffb6d56e631bf58ab9ceafa14e4d55cabc856185120dfaf77f208c0c6a992f3bcac2c7a24ea91174e6de136b7a1364ecaa0affde9744ee71ca56067725a74ab54a2c2cadadc2f01e2faa766c91fc70e8a175df1ae2c31bc77f08985a1db170172455cfb18f97ba021bdd0ce4df8b46b93be4cf43be188b350a530e37f4058e1b6db3fa5e79f1bf5ed43d4094055f69af413d889e24f3e13057ad273ba468703aaee73fbebeaa8e5ec2b1eb9e6b2ffa9b0e8a3503e1ac316442878e49189853fd6d11adfce0bf86060b48955cc21a1c510be7da757b11ae2f5eac4744cf756795297940ab7d61757042a091f25d157fb2822eceb90df75810b0bfddee3115623b9bcc0aa728c81d75d7ae8b8168e2cd61f7beee06fd970f5bb20052c9bde520307289cafcbf46c219cf46d894145ea078b2e65585029ee489e2a249d3c7c2051712b51fad214df32fe8dc956ffee2b2166c22817c0682e97ac5c48f78a088f84b84b9dd431f261d42d1ec1426b3906b099762784ac45f4d58f2b47824ca95042d64db5f68a40fad18638cfd4cc2803cf09c003873f988de85144a94dfb9d706467bee8c2389e25a019d226acaa3eaf1f0770a09ecb3356c4af153513580fa3b194185b22ca64745f470965e0425f89799ebca7ea9b6b840c5207edd810f31ccfb72154f6eb37e9c55d88157e87ed71d4d4898522d02eb3b55440a21f09b6800319c46c4aab573912b00e17153f0577c28b6616dcfd2bb9ee6747e22ccf8e9c8ce320ee201a9a6627963ab58421384d063f9bea2c986d9cf6d3eda32587eb968ea4a89dd8a1ec7f336b3b6c770013aa2e22c6ba74f5150ffc203af76082a8aa167c84017b61fee9dd196f5e0a717dde1b822477f73a2494cdaea969ef0350c9a98b6e4ff5f404de31d07bc02ff02b148698d3242d028e3cec3a14763f6a3a4e43ae663c76e04fccdc62a660efc8364e72ccc7a266e51333884bf4457cc1b26a64d550be50ab517e2e71673ad0899ae1cab8b1738a3fd082be5000e7f0a9581536b3bd6f581122207dad72df4c7dd736d8f5f7bdedc1a4fcec152d2205d8df7668edab061f61eb7615e45174853fcc5fd5dffb7f7e9bc126eaff6266558be35bf6c5e6d8c2f5c3f3a6bb30ab8a4f65ada0cfa9b371437f148c672d2ed3ca03d543fbd44a4c387ae09f13a4938af1dd1ff1d4cb19ce5377c3bfc8e957dbfa389116575d5b8a8a08be18472c6e166bd29569024cbdd16a5a0e59c5484c16414057b928288525319b0c67f09ee03089f2b3816d937658fdc02a24bcabebcef52b2d925c2b459713c51510b8e508a6fd0c4a2f75ca3f713b53514a5143a174bb3498d90135a819688a747f2c9798d900b7f308c05cc7dcf171c8d68ed63fa044fb516efebfb9b8c08edaeeda92e5e97867347afcd313eacb539621b41dc5cd54d2f647ad2d866817092f4f4c88c452f3414c519efa4c5250770f1cee3dae5d834b2f1b1928f7b17a6334b74c70ac38e9ad8d96e0caf8d8d7573196a777d46ee03cbcd31be065779a08309debafb1c1266ad96375e616c783c20216221ef25cc0722d6833fdb0691a02c5fc71f2b6d4a8026621b7f5fd41ea148ec5ec724cbea3d307177a6d6146a8cfc6c142e7f05bce666eebb9758fa884c222c9e049e6d556c86ef8de5de0632547803e1e082d230aec4b19948bc5eca08fd4e38913319013d49ccd66e36718f0cfffb03c34c78a0641c48d05c7dd07c6cdf65df7da70b552496eb993f81914c706a79e161219e5c7ef7009882a2f10f38c32f8135f976697095b072d1771c135c9c5a24a3e47c86fa1dee6d03b591aa8815f25aa55969feffb9c7d5a2fdc6d7720f55ca02d61c8320fdc66286a366059805c7832afb7d71e85888be8206ff6771e821ab555e1b212b7af3d4e121e895e30d339d88ea6ab255558600a86d0a7f58cb2ae6040eb1fde10d8530b15f70b7fcf8655ecc2b4980e33f99462fdbdfc148eca7bb2688537dbd766f7e9408c27a6c99870fd6a98286cdf3ece0367bfdcf68d3953cc777f46e7744b3bcc6ad2bc7ad6d8dc00b54a7e1f67ac49dc3eb76802485d693864aa37a8d72007a18497346056a827ab4e768ffa906259ddbb67f87cd4b67993f7b600c1032e0e8b42cd8915a4804c71b2665aaa77b9ea3066905996720ac04d83357347292ddb4efdd0d516798154382275df0ffa2464ebdb49bed03a4685ed7e94935fd57815008f3ef851f074a37a10658f6d7191eccbbabe497d11c6dd279f48937834c3a733d2e71518924a2e27b1c782a21310980a35ff6eb571b41165ba23fc488de0f1b3f5d77a1825f8521536ea4626cc84093c444a7563ffb0eddc21d86e4bdd00a31334725c1164f32358c919db3184fca84936e96dd24f70a4e0404ac4f0fc4f823892386780657050459059c5b2b617ceaedb015856b23ac2b408cbf4e48f0638760d843e335a905e01861b1799d5a18b34226bfe2a068b8c6a6e1147f7b195abaa23f6236925ca6b7aede3ddadf9bc499ddb4d26f56084c010e3a33b8e52e877843cc1920eff1822c2cfb4bf2c9e5f2c8f9bd6e2cbc47ef690711439cc6575c4c99cc48b32649fff7151d2f10474f8626f9e24ba03d117e44c21c62f67cb52e051c593f82d6cd3f9d49d6c530e9996398d49bbbe59ce73dc4a2795c6e28b57833070b1001a6b60ec312155d94008be6cbdbd42193928e5932c7e72ecf49e517ac3aa524cd3c499bb7f7391fbf4a74f625724c7018dbf6f2af7f3ae915a8188eb90c57311b3d7d950ace17b82610d5fba8e59cf9d1b6f65a69f4a5eaef5fa60873e450f2e10025605eedfe51339aab4a4544b5694f6c62ef072be6f7927317c3f9a4018b526f866ae76da59446a514cd8cd0d5284f4068b583988e316de02a5128d6f41b5d38480c4b9092881dc9394ec087f41aea60e2927a0a58b73c205969afab2bcd3cd65d65b1a496222e6d70df4718f5131a77837000bf11265f733d8a8434ca6e22281cfebd4e5a16d70beaf6dc6daad1feed02430fde868bee7a53195b7d65aa00c4c2e2822f8d306e91be912db74fe1b75ad96c5ae57909f199668a7cd17c8bc9cd5e68beddf7ca3644f3ff15f64862bac2164c6a0e19c2ad9815773c848f0d73f078fb10ec4f7473f18c2e2f049b966df4e51d10cb722015cd926a86044d6e0d5cdef0c47e43b7229f9283ed5332e444416429a8e66740f491d409741b7d89275d9e8374f1be2e70dd5badf49187eb2f7ecb0a0291eac32f3ae084ad07a6e2c38be8e0e6b8146917a20a781dd265526f472210a244c834c228dc366d1fbd7158e5efe292581d9ee396bd5aefd84277e0cff2cc42456898e2faef43663b4ba70f9fc7fea0dcd8e65e7d18538dd56c3b18ba90bf21114da2570f6dd90da81fb9eec43483f6d364c86e46e3e5babe2de4727967fe72952a32b294b0cc36e0d3319a985f79881f069be3d09ab2261d67ff8ff3aa8c0a49c4416ffe30e9f084023d29d3ea600b0bfe703e7bcc0e0b8ae51e9ec4ce5dbf43dfaeb1b959d4bb8ff23b51e45d0c53cda935b9cf7859c62f96a25b1cad96ffb632f43d27f0e36a47a0e3269c119811437bc839c262012babc4c5a3f88f89b3f604fdb0d2cccd07d96472252a40385222076ad510732b7da2177b7639ff0f7bf52ec008dd3039977ae4a55aee1844a064d2acbc549a15aa069514c53d758c12f354f874c829383a699c00a34ea6a531520e05af708b38a2a74c40cc1865bdd3831b57c8dca69fbfba499548425d0503d92ab5fa0b92cfa3df040ea4c55a3b380a4c35fd2932b318ee516589424c064a38731216628767238937d66eb773028ea669422ad274ef617d42e1476abd02edf679a439fb08c15ba9286eb6b235125772af9254c7a60f7cab8ac204adc2146b77e955bb48399c363176abd27bd3f9cf0319e8c85d2663a849309dcd45fc5f32737baebd31798a1cff6bdc5bef412c53c6980cb172f22011aefd4d88b8f64ff0f688509db2fda4a4f207e92b859928ceb72e9595e7c3477228b4b3c68c769d1e9516642b0b8a71fffcda27f89e7ece3a84e2407d4bd20052fc25b35f2f22af16e771d562bc5a9bbe0e55b33189639f679f68d8b8c35049f07c7f163c27409cd8357b648ddb25a978937b5ea9a6bcc0bdd94b657d005e761ab4f47f069a531deaad3769b76047da5d034664d2158ce6dbb01f4c7e8828a1625784693a761e1dd263b06c9f4cf3db1d41241178c5882d8c1803c92f4581483d8e30920bdd437cc935db3701e846bcc441b26206d3b237cafd12bff77abaa41e7925bdbd43e4d140584903978a8cc7ee02169a78ad6d8029728a4e19ed188fc76e7a569310b0524cecc45d1ae301a241cf4d68887d0ac27aafeb87d0101216b58d270c3031fbbce9f7c1c733da82d9bbccfc8cfca8df61ad3eb6694b19469afe25ab9bc1ec4e432436e0a5385271edede855cfdca9327c191bf006ee98891ca0a0a4963c030b03a82e7a3a6ebb123222b4f1bad71480efbef736e46beaad94744aaeeb3d0db077ffdc99ee9d0833ac28995370dbda4b2093c5aecf2697c7f081da56845659f875626aa3015fd32ea9be65d62cba0dbcebd807121e07dfef345eafcf2d0a6a1d38514604d24c8dc65f53b3558773d2fd38f602faa1842f2e91952a695855741b4f3eaa65c924067e29097c484aa180320ec36049c82ab8ef693a590b647677b9efd63922ee94bb3b2742aa5c857d14cdd4a029887456c67f9a1ae5e6a672b2c78bcf0cda152c4885ca3da94e0e21567107f8665dfbd28f5c026b294169b24612c002989c036035291ada41417a53465acd30a4c20686f5dbbb6f58e58bd1e0f0effb8922ff27dd2d5f2bee79c3286cb2a6e18a3d65b970e03da19b2c4a169f4005a642866b3661af8edf5f1c901bdb77dab6d2ed8c6269b353dc08aedffe2b54d8dad6901fba8c2e501dc609ceee1841510af3e50b51940a7a4f1f44194bd7973fa8c97b12667d597621db8e32658e44472948aaa17f370398195c71925ca3c2ce6800d79cb29dce10bb45ded52f2b3d659cc946deb7d87ea7c007e87a1e6b6b052e69755f44e9de0338f53ef25daf5641143f38e8071d99f75f1c454a500d0ca7cf1359af57b0f831bfcb0d1b5442a1e290f3474e3c9fae3f04ed8cc63e4ed1459547cd2cf8dd19e28d65c908a822d7a3bf345106a349540a0cf1133a76e86f8c45724cbb078de0c6095b08e34daf23c9672900d955aaa89b1ee706393525e45c90ef8a532208972a56ac157e5dd16821ecbb44956bd599a65a201e028ab631ed60187d24f00f4ab2afe4af875ab07aa881e753bf1b573c15c33aee63339e73587a260609613ac0522f406c63d0c69b18516b2dc12434e28ea00e03838eb78786a075d31d03fb8e7e78474bb1f31f23d75124593538d404e024faaa5d203b1b05240c11d1957d048285e2794d1bf5f24f4432e4a14461d6a0c2797731c16380dcdabcf777933ad7b747e06f11b37872d9faa0572ac68a7da5d79d9b1a6d1b31b7d2adbe56a81d8aa367191bb89de5e544efb00a00b2fad000f0f2f88bf92bc18280ed63b7c78f04cf9e54daf0d35177521ff1d2b574a1d44a457f1f053ce493f2ad8bc2fb80deecf3499a886d54dfb76dd2e3774cf9498089601ec8c6df05fd6c8060e209030a90dc86afaf03d9d30257cdd672929e825bea0b7271e74915ee857678a7392a8d98e37901c2bda631adb80bc2977651f185dd752bb8074512a656acb09ed881366ccd45919bfe74e7a7c58500e26cb6843b54224906110d2aeb3831dd77e0573454765e56b09ba3a3551f89b4a1ed67c269aa76f63c63c5ff1fb9b093f6a1bfdd9c1bc2e2dc8ce35be05e56cedf83bf87ce60516e72bdd19d6bcc3aa513e52a9bd5c754b3f76596635e377b0ec9f38a42778bbcc2571c37b1b24a9d229d2b6aa20673aab8e33832596a61f209b0709dcdcca99fccc9c3b36444f67e2c7a6a37e92a076f72988d30694169571c26f41de56cc2fa00e94e553aad1beb67afd1677abef33c56ff9898f42cd630136c1750ac377182e6b46b6c1ea9faef0b7c2618a23aef8b88b06648863b533e26d7f224a3a807256e30b640bc371dc48519243a65b2cd4ea0d2bdfa9748043783fbdb102350bc9035efde930b89359e1766d994392f73eb8e285887a24e218580d330964ef6b63f57a63a98dcc8d3e85424b514608960fc017ba41de172248ec3d91f508f3d00b73e6937f385cdd5db934b0b4adea48d432a64e68a5851c5a00a84dd097a0277f99c889fb5b3d051269d45ecb62e11a9dd5a12f9104eaec7802720edb5f336bb5f87a05680a637845999141cb09d97a168c39b003ee010a38a2a44c561931b2bdfa5f92c61601010ea04d227bd1b45ce6129878b4bcf1b79db27287958e6e606da97bf3e65bbe148879838266035556770b2ec97ddf84f242d09b4a1399a3aa173da638d4669d107d9eebd83348ecffa69f4f7b1b61f50cccf58a9de3a658c0070989cd40256f985867fb81d0ca0337f490b26b0aca420f34c84a87d4b52bec8838ab2e9157a59d8055c907c19ffcb1b8780715b432fa70d539ee6cd82104ab3832b1ac8f68bcc683c886020421cb43e1337d4e1b7096243a11510f13b3475859b49d2e776dd786e1cdf808b20bacdee9da55721c2282a6a30c931fc4122c0b5538a43505e34cec451ddfc9b418a080bed28a3c4d3f0ab9004c59c4291737355a737a58d76bf9cdc023841406d5597fe0ab00cb9ac374457ec694c364629698abf2e933d7e82c738ea4e3db1f799b473f8750d69f98ace96acb1f308d4e132142b6703443b0173b6da6c755b0dc5516d568cca406427010f9f698a67b38f254cb3ea179f3eba94518314ef853c0bf1d3c63100bcdf7d32e508857a4cbb677153ed1cb87eae1fb9048cb23ad01dafa79a5f51e6debb15e9d1edb543c4830e2e4f4321dd1f4a449e6d9fefa49d1968e58da319abf9408b78254219db9e696ad451e6edbba430f4738de3cc0dc2e217e8403d36227751c2a483c6dfb1f381fbda48c13207af5ec0ed6778b57df57087de69f4e329d723bd6aef054d7cfb4e822cf57794b620fab19525d67d3e98dafbbd5c49dda959a70765cb0c4859765766b517146f457f3ca2ef96dd16c1732c2d14dd817268515710224578666eb2847ecab19444fe1a10ac7c1a96fa322326e841e355675f99c732c17334075745ceab2de80656d37f5d9faddd9b6a8cc0d639b1d75aa6979edc57bd3b3f9f28d9b1de4de536e3d7b4507ed83cb00cf8578b82fd9eeab945a1bf1829acdd3c48e7d6649a61c1142671385216132f72e93dc8db67fc1de62082c43233e61135eaa4ab00949174d41c95085a66f08efc7983079e2ca6eac3277f8dbeb2c31f51c4690272f552077aa779662e9b55724e05aec7226d7c0b557757a4fae5d84d820ad498c0ef99145f4f92ced3cea6786d94ef3fd8a6ce3e16d6017ead183e1c6d977ac50b6a8c547ff05a5ea3e6e6aed088dd34414d59c41692fd9c38bb4aaccb66dfaeb44fb8cb15ee4458ebddfd4fe30038ea9b3ca4a37c97f1ea4646e07b99260da951469fc96da4a87d93d9086fdf916e6b14940c48747aa1f105fc1230d64117b148c4908c9629f618f6dc982df8b6d7e62dc3058ebb0207abff2b20238f71816ec4241dbad3a71e98e3fa0cd8fdf426f700b6baccf69091158ef1413c9383e5e41dd3c8667330340ae9bdfb25524ceeddc527e4cab449213a7ffac805b4afdab2ed76e4719534cf1e0a806c02a2455f10d7e1638d10706ab622a3d84a88a79486567f70e5dca023ccf3082789f0742e6c4d670dc495c0137807972946fb4f21933539f9d92fe135374b8859941bb69f6ff9182914b7e2e040c67cfce5695d899299411c9749ffe13e5716cb5034abed8fb895bbf0f6bc696234001d600ff62480edea21bb8c1e47afb6a9f0eed70fa14ab24ba4f734bd5f7014d100a1303e5ffbd479e4ad45f250a5b9098c9728d68804e5612c56d33a624ecf5c0e53d3ead86e13daff8ca0e52eae60ffcf17ceaf7df24f58b2c87a54aa11fd2cddd561a3b2c559f0cb6eacfb8a1b2269a5ed13bac7708710539c655173b3accbb7efc546851c708f48bd57f8312908a0c3b62d22116b0fbf3697c17e073d770a3ea79266db3e178ecafbd630a188daae8728c7f6318deb55037e4e7292370a5e324f5e75aa7198a0c247867c7852790f06de03b8a795f30519f245bf8ec9d0fe1f1d7b0a0a9d40b81bb87055dee2b352683df17014c05da3c59a056325e432a859ed748d893ae7ace7b1999fd24110553a198a3c08f2f236e69d048e6e5d01bf7773ae9c95a0dd2dd4d89dd1dae16c50fc6fdf23555c13aba89a64b4115a6d8624514d8b269c1a38b73f1bf96ebabbe2f5b9c87ef4e547beb0034a4527aa75208cb828aafa16b761caa0278e02e5e42762c18e6a095028260e796698cddf4a64abeaa17f0db2436f63d043fe5980823f0343550b50b91a854481b215bc34eb2269a5e54f68ab2a2aeb631c0df1c10d0b48eb017d52bd845c68486d6f72459b64c8cccf2b2f9657780fa505ffb2efbb28f40d566943b779ec481d932e70b5e5d3bb792e9a7bb4a2fa20f2aa5d0a6e4da337e94e90d58c68e09b676d71d423ec74af99083d3755acce803a3de331c3bfcdeca5853ee9f94da959353ac98209ce26973a7b2cc6ceabf15fcda18cd325eab03674dcba1b1ed6f8a62e04cbbf93330a1befa5ab7ef1e74fbe1d327cf69dac57549429a7c235104c96d9dbe212ed1a76a67c577c9318bc1001fb380ba2cd405dbf159337b27b272f3aad13ea6b30a7088d053ef0aec676773b1a1500ab6df0188bbdbe6e0da41af19b28e58ada9b380ccea259ff43bfe79a324a80d3fefaf47a35f5fa455b884f33dbff871f2efa232ce069e0c129aec1e1c81f643f5abfde3c1b25a97a0966de24cb97a1b21973df3e75cfa605e375100c40aa4244a857f608fc50163986020eb600fb8c499bd66467c0f1b97cb684df28a947bdd534e01a6ded29ebcb18a05f150ae1a121c7a1f7a63cc22d93ae97a8c214644e18449cd020695b726b36a32d3fb99a78f46ee7506ee8c39abf60f96d4c79139248169ca61130de53d14cebe58ff4f4ef22a8deeb226527259715d3bdd7cdce39822285dc81bfc58dbbd36410d7adadf89272b72b557163d578c6dcc560a8629c8211038d29f61c089bd3847f98724eb079e27d31500300ce43a53007dab8d461992ef796c20519b7721e4cce5252ac3b506b7ad60c2c995422014b8925bec215f7f17f780be2572a62d7bcb8c0be323f3ea87f538f770d05946e9261b21f3a09f896135ec5e36743ef2915bd812dd1f3eaa55593566c211c34aa1f74bf78a1b99592245f86783bdb26d55df9b1f1fda51e736b5c900091255dd2d4d187ebf9eb8c287aea3a7df4178af772f71f5f658b1bccd189a7b829ff8b698213fe5526ef42b1b764df348bfad08c03d5742b775f88214484ea8431c9242e42c7210df934d06a95536ac345783849531f138b19edc5d85af2ce97a21c0815a86ada479f0f6ba98302213d26de33e3e97ed0ee0366f39f68e2738f10f1717fa0aecca38876ff387a7abdc6aa4e647f60780dc1ac529fb3178df121078f571c1154795c8d64d4adfc4adc09fc64458a2b39be29d7dea3a391647ab45577450f3886f26abb7764bf26e6d3fd1418cfea7a5f90b1ef2e78623f82a5d5f579c20c7b6e56d292945ff3d072236395d934d3e9ffcffd4ccd4d00ab8070c62c7555085e8db1c87690a339e1b272634a06da7f55f837896968c36edd39fd9b8b5bf6eac368f4cd9d4c64529dd79304df886d23c33fa56de2328834de14220f7f09479d287f77b8b18cca841a96b544e798f9805960b5f4fb7cec6ccec6d9283881a0f46a03344e7589a96c64e6a2be186c66d0b830da7ac1cb42d2630ca7cb3cac5dd975f141209f476b1143cf17fb5253d50302d9c4d3fe2267005966efdba9878b953f5e164f17d9d33070f64224babf239c389af0d4e368a1bac02673627e5cfbe59d9b05e387a976dac0c5b16ca467622f645194f1409d1e8e790328c14b6380aabfe51ff603efd95064f2e25540dd4809835b252d391c03a037a5d4e15bd4d2778474b70693891a5aa564aa4c87612403e8f1946f4eb1c083429c02113aa0c1d99cd062984490f2b161af0042fa1b411e1a7abeb785f36745f4246b12ae978828004fbd67a4b0415f426058cf3144622d208faad82fb03ebab12e240b694b5560b1ccee78d10a9e92e8a58bbe31d38920233364f1bddf186785cf2a6aefbbad3105698da9c28da7f36491e5c7dbfe592cfd2b220d11301ed7fc1343adc29a537330b2e9d4393ceb0f30505415ad39153953c0620f8b06258f2d5864bf73fefd309d984df11ce1a83c5296c752c74722db603c8b0e047443dc5eb4fce0c5debdfdd5332ec0532839a924ef946e4db65039bcad5eae4331f99b479d4c9cfa504a5194824c826cb94ca5bfb1ee243fff0a63bf873a6460813d539c9891da87ec41255cd3f1e6cdd30b34e7debfb430db7b83e54d6fdac4bd4c7c4e1729e7ebc69f773dd5d9d97b2377146371661f62f08df243b2bad70662b7bc6fa28f72616d3a45455703acc2808afd8209682eeaa182186594a85b9f53814aab986d700495658ae96c1c4d0f4347d4296dfd0fce15de7cad239296440b19ca6195b7b84e371f14e341b3c55942e196f19ddfdb1acfacfcce477b1d9263f4a21deaaeea30ce3c79a57838bc95117f86e392044b03adf30a080a20fca6529bb8a160f56a8df26988907b2ea1afc1abdb3426775014ab360bd0867baa550da889a3c36aa3ee8bdc09a87644b0fd0a4208f67a4c2ff4a4ef5c8a469d96f820c975236a23dd847f2bd362dc581134b20815fcf38de552c8ab88acfc69a72d76bef522c448bd7b98f16770d934c936dd485cef7b606df6cdbd3f15a29e144d629566b97054bb8763b9717f4f3c71d96b67c5406ddb50ccfe2913436d39272b5238ef16af8054b2d1cfea85a6794b936f7448ba3a31d7089ed3d5a685457fb6e9dabad750242899ec4cee36e9610a09750dc6596f4028ba9f0974ca129761496e0ca24365962b23c41f3d4e3d38819e5b566a15e07ef3500870bb2cd5e98c1d4d63a335ef499cfb17ba02cd1f293f7ad0093eb166204d933b1367bc6a1bb633ba33dcab066657b616083ed3e5891985a2aa3e3a8fc1fa2df9bec438e1cb5ba4623cb520bd19f992b62370b57d075a66affcdf7dc00f23fe3d2665850d3e75ee51818682f40208647062bfd6dd619b22234e230beb3cfb1c320fbc62c63412cd26a83da3ea36ed3ed6f40c26b7f778bd972f7c5857d33b5936a67231489596933c6f036e9c5ed4a663342ccab894963d7f6c87a9da45abf30d46d5d812f68c041d64ffd367dcd588c4fe7000bce48a1b2a7aba190e933ec1767647e765e99e09aa5ce05a5aa686df0789f45c253591707f79b63ea887796d8bf201f91aa749fb324d89dcc61337dce56be260a791de380328f6cb27c51da44837d5c051f70b5385329398ab53c9fa569dc2395bdedd43701c1f53c35fad9586ec19e8cffe79540c4bad9bfcb9a9c2c7b5aebf53c2e76c648b2d5e1139e82dc9d37e68099368e1148c7e5f5f1aaf44ed8d45014656dc294e967a6482116b12b47d522a31c1e79ffeedd2df08d9bfc9b0367e40ca75f781d693a01809cc56dc79468055c65f4f8eb6911ba2c6a28ac6d9c783f8d6c86de007a87da605e2bd4d16d305406cf9a3fd3a3509fcf854964370439b4a762ae4b94560428eb6273c43235858c602d1e87c4e806f7dc34306a02007fbdbc29d54366d7dada3dc552620677c45013b8e2fdf985689a16e8bf2854dcbc9685301a76cae76a09fc7a3b3ef7eeb6d64e95204885db9c4267c102a2fbdc589d9480b7ba36cd65c17f079e85aa809df4a9a0ae7b39ed5ae826a5f55502e713930a750d80724bdf1c08dd05b98ebb88c6d34ec0144f45bf4416420b1e2a162bb74665191d26c9d10744cec06d0016ea6f44b9411bee319509eaac184bf63897cf5aacc93f687af339f685c7a6f9949c499531a34bca682bb4f908bd83414f6ad8cdb1fc384fcc468af61343995ca0701c0e804f82323c04f94a5566f4a92cf833e68a37583d04d65f0b4832e054965a2e4545106d6d6f61347c4f147a61dac9ec6760b0fae9347d7d759d260048a0167362c7976221c1be044d18e5cde0dc81424f877164ad6ade4d567f31f0622dbec0bf59b003245e7851225ba0a9bcf3fd0606cd6751916b5041f667f014ce09075f5791fc8ad696394b2525490d484605bb0faf63a9d32d255fa2753ee482b065b8b4f0b4ef4b8147ccadd9d3c2ed4cfef09192d2fbb9861c42aabb6d0aa56b7c4b0f284e8cc2a996a9054609d81b41031e6b10e130effb704827dc4b81b73d2ac0a558d85b9f3589815611d19de282d540123e1568882c63aa680addbeba44fb39a8d4e1acdb2b346c8d4ad6cd1c123119db3fb6d79750389341eb7fe2633750481f666d33673f9d555f1f553d47f1e4d4c97da78d1b27431844b5d8e55c8060a49209634c404e8f21525d2ccdef12cbc2b77985f19aa77c391b8920e17df5ab5632263523667d4457a5731ab68a84bfdfae03cc29b077175cb16692ac46c852a0a8943808a5b7ba99f8df9ba11d318c55e093de0b319e8d82791f106cab65f2b5e639067758f267ac15699ac4f6e6aa4e5563453b7048b31005209f0ac22bc59d348fdbe8f1d3ddf2e5853182629e4c0777527472bccaa8a1c5224418af986b3ff0bdb424e829f238b3d7c1cc3701cb3ed334fc9ed0a4f94341f22ef7624456348285b4df6098bb4c749c4390684ddd6f73ede86f4d426abb23cefc0cbddd7ebeeb3d2dc05626a23f8d9d0af990a8363aa1e485d4d860fac21f53138e2a6e88e636da8bc557c5ce528f421c70248e58e2e94fe33388a059618dc569562198dd888bb42288aa24e98932d21384bf8832782d60548a72c7409dadefa774e5895fc3b0ca2b8c3e04196f1c8973028ba1281b07079fd41e46c1f39ab91ad013e1c0320c45bc6c2dd1d890003b063b256c18dde068865661f5d4baf984b5bb31ec76c6c853abf2937b2739fe7486c430269d8c28a4478e1b64d4198d780e45d0cdca26b578655bf2a98891581f0c5f7d3e355b1fd97df00e6e1fd9b24590d1acd2947e6cb787aa5a8d5f784b14d8c2f21bfc76bc8a4c9fb3d496b8fb6ce7c0f50f2b7262de4ef96f0b6d794458e9f3c91e757a7958660ca8251f56926193978eed5e7e266026ca2a2e506ce04726f4735d9b1e4ba692c53c621ce89da033e1fb481c3ee81058f6a02af6381fbb19f0243d7ba5a4ed332777368e17f0bda810cdfe38f1614e1a169569e48261f474f4c8519c2f97eb8d1e3e9b9767767333f08882f09467281e32f283781e9cf99b627d8e497214c475a88bc32150b2ff6fb336af35189c4777cff87182f8420e9a83653f1ad0d68b7f286f45f5c0ce8b53e02fec2c9e4bcd2f4f5d1467f040288d8ccaa6f701a6ae4cd916424ca81ad04c73e7f1d761aaf28af2b5f40872392502a79cfef44c690bdccebf8fdf3629f283ba89a3efc85f171b134a3e2aba528559f9507e086bff9fdf607883af413808b2e1ccd5ca800ce6164c1fe978c2363a2436387c1bfedf7c4c396718a0a1b3fea017be3cac631ed817afaee891866f424f41c865d50a9c58e434589a96d78b059765d2db945532a695d8ce8380d1fef1b88ab56bda6c1e3f19a1934675e4e1cb7321c48337f7c0272bc6f10f6485b6cf3685babd21e348a892f8429d31ae40aa2b846d66744cb99a323435a392d451ef8a10b86479a540297c517c12c047efa41aeec3bba0d777d33a04dea76f10e91e01d5c217111910d448a9c3f743bb8ab4f2e02981904b7bc8588bba0e3e3f7eea97cf1c9f346aac3dca3ae11cbe0a9153faebbc68bc12a8ff25181a78fbddff4d9e324201a32e47bb34ac748ba5ffd01514c1db73fbcb95a5517337fb1c9b9fed8ef1a74f3517789c2e3f95bd27372b823f78691dee76406b5cb156163cd519dd3b6a0c2484b11bcfcad20c70cd95f2cc3949268e4f1dbe0eb47628e18aaf3ae5e9a91ffd433f69e405d1213b0a817adafbd38ed3c9ffed73a29220efd17065ba53bd7e2ca1c234bbf926851fef58d437cbbd5ad48c46cd9186fbaffa8325183eb857e8125aa6612d45ea3c7e60cc2820081b8a4a54e45c2675432fb7e0d07e31eadb9a9305b89fd3682979ea6700fd2d3e31be143e949a57f1d0c5ac7923ff61609d964d019e0c2c6e0f042e364c155657e095b007ab53c1c3e76d1bf0c03931068bcaf417b3c03e317928886fd06671fa085b5ca8959d6de7ac23fc21af7f04da7ad95c0d66547a2a89eaafcda8fa8f129f52c82212d07328d495b2b37cd4742bce84e045716ac9cc345e846e49e7e44b94005ff4b7c047ef6dbe758203b1aaadaa9ff09ed5e530fe1799a957e9ae6718da4eb3417bdbfe58e30d6aa5e6411dd88bcc36108d6e72eac5ffd52a00f7d5a0692ed693a8caa0d097d3a6e9cabfef65440144ec5a454a88133bdcf5ef2dce45a36cd009b8c1b20f3766ca88017e25c26bfc20027b10df401c33dc43508791e610de3a95e09601a722a97875bbee95954849cec2828fc286482960317a52a9586828ff6808742298027f117d23a39d70d5a07c0974ab23bb65fe7e93e7b0ee5d88918c5fc3722c9249996484c1dc8f8b1a36cc4622bbdd0126975270cc170b58d39867291a3cbc225082f7f14aa1f87810cfc62425833e58f3b03843440a9b7ca1147fc303052f38d97e98670e294d9ef2af65a643f07d6ae42a2b970be8b7992dde2c76d4910f78f2073386bcdc2446e7d79ef5c635139ff6f1dc35fd0794e7739c15dc47f95faa90bfe7c066b1b2c4ba6c8e0ece7ef91e394d12195a019bfa49d133968532617181e6c110518fe4da85bb45c8d8efc60dcb72a18216a9a40a0772084565f7c656c790021c551297433471163357de8be8540a8f308163ee63807ad34b1d1046853bf50968729e29be2f1d1bb931ec03de2ca8800b6ca88d004dbeee3df23db5190de663d91ebc16963d2e5ad0e29b8037ca1ff32628f0c3f1d1099d12493eb07235ce5122e89f9f94770a707a8c6bf33c7a7dc762eeefd7a50696fb1e5bb6d70706b5b7fa07eb58d83db505973389c58d2baa8f600f3d1e5ca01eec51cfea9f5f21f8dae37ee6c32d5725f0585a45d713619e47692a857733a1349f61a9badec2ae20266f598c6f4f41170e9ae121cc121e0ba4af47f4ce856c49db0406fd8732ddccbfc5c44e216cd675aab6a3019eb045cf9cd8a4f050f1cea686081c6094afb863de9a2225ee0cf9c7e2062d2e210ce6c0704768ffb0987d7a2c8820fd76996deff36d46e817bf09ec3f7ddaab880defdc82fb18e8f2a5e802117a31607ed7304d0440b90be55bd915f1bfd51c149023007f2017cf0bfe738017ef162bb18360f834349f22c89b77019c88fa2c42f12ce2f3087980687e755fe1a6188a9b0400d86e06b4f33d30eadca25394d033e04eac2b7adb9fc8f7f05b0d452094d5544990ca8036929649b8f7646bd782f5f7c65848a6379121953c833b4e0ee9a64edda7d56c71379c157b48adf3496d2321739e5d6ca923560df7dd1a4e3624b1dd8cd183de64f3f2a18814360d74c6c2b02b4653defa2b6357ae4efdfb38d92e6120a6e74df15f8f80ced45cb5fc168781522e9cc27fe9e0d2d7a61c4fa65c5837b061eb6e3898e83b6bbb995cdea92f142c3fad57e6a885a9d6d867bab0c41362a0509f7408c053174d7becce013ebfc6db411a09b1170437f964a13d69b7cc990c46050f59989571e45cb184638d3bb0c3fa596ca20cac79f4f827d942f8f3c4b7e771e8d40e797aaba358c157d08ac0e09251e74a30b2873b980a96aec132b9354f5547b9b517a8e88ef96c63de5006f45e7e4374c9985f6edd9d7b7d509cdd157e5dc6950a30c9ec6d0e76280f57ac1d822a0d163ef061f138751c69e1f7fa0ad0c8d9f8efb26d72e0ecfdb769fb952b3a9bfdca21ee60c0b0afd43492166c4d737efd402f1ee808ffa150c20687def360827669de714bdf6ac86e386212a5a20fab3c3a376aa518b94b83f8097b42d94723c945ff5b1790eed45a4790e192c12e2f6495c05490f967095dccc651ee3b8465e736fcb21317aa9ab1b2eedab3448b29f309312fbe3b498e0415b395b94fd543ac721252a207b0e90f044220d5b4ba2ae51a43c4073f94da476e44e76194064e6b4a41e2f6405138454b437534e4946f063e98d103bef85411a10009815625e36eb71dc9cf0c3bace364db879971159ea9b21e5bbd841ab1ac63f4af8aa10b63d2da90e6a827dd08413e9f5b466cbc9ead00d773c5375cda87d8b2538df96b3f6fb8ccbbd183ae0ff91e71faaeb91f1a6e2479c9a6862da00515c75431961c9b8cb5317bda55e90e03f5d95b17d75d7ef1d2b3b6a4fd14e941e6ae3322650dcc49598e204d63310ceb0287498d1dfddf26e8082b9c73fc127fa70d2a17fde1bdf172d41cff6e19fa606bfb09627021a6193a99eec0da970fed7d78eb2aa479782d7814c0b6cfb4715952090e9d4c6493853e155b1a4867abcd2abb1e4f2d98851a23785a95d3151257bcf8ec8d14711a56fe3d5e1f7867a7f13d490c2c9c389c1f5c2a310880513b3c596a10f1b29f22cd21d938f1e08dbfc374de46d9da9a20ad74a9d4e746143cff19c16dbc5d6db6d582830d8d382175b609d7828e495cd661b55da493608e33c4e91a46bb1e1c0a8b39bd70d1a2563dae703cb3ca94c2094fe6a1a600528793e4c6446004f72f8d7cc14553b475bfc1e94a356bfff818cdaa1ab6b72ad26d89274c1c612600429ca87501903bc6b3fc49fd81af506e2f5634c288032015d849bb6f4fa47dda6f962f7b1f2f20cdcdb7191eaf3ecee1376595cb3f31752653bc08905fb3ee8a4a3e8106f191f48228916ad45aeab146f23ee5df1abc3911475fd42e393936099d3aeeae28be11c205516f0bbdc0e52cfe652eb1a5f98924447c15839ce4f1d7f2de8e401e8d1b7cb1ec84be78b148f97104c514ea13a2a278248f57f31edda28816a06e5b3b8d270f88959e749269f981f341c455041ed4c6707d4ba8dfafa2769d7d5290eef8d7d8452746a9e5292196cfd841262dcc8efd7f8293a4127a5bda37f7f26fe4340a29bb62b53f93cb333bd91f12c999fcbe99b69ad178264f72d19073db9e2dead3c7eab9dc9a5c2850e85a00c3d2c7f84f2717a00ae6159f3eeec722c7913705b48bf6d76ca2c49f099fbc7f752bce2868835ec24637b31cef12c3666767a85c7be66e8a14fdf2e3bd9fd2a1197483d189f9c1d1839ffac769781d628739c2df64d9e3062ed2b47285cd3815c20d50e26a2633ab303215de4bd8d5092373cb80bd13879824cbd09ce56420490ed65cba17b080540a980fe28a628ba18bcdafe147563377481ecb83338236f20c11ace0a1ef0dcaf93da6cd3aa07160a36103d4ffd907be752a7778ceb91b223854083d3117cddd1647fe04fa2f10e5ba0930dc3899445ee3c3ff884d4c834c92a630f1a8f327b32eea837191e3d5c2eecffc09e09343183e2ac0317ad5951d471ece222b4441d368ac93125a98376935f12fd11e2f39b51683f4ca8a7aefb8a080aa24fa188037829114d7127bfbd8240ab92d5bf451d0ff7102a25f742aae17b3d9f0d72bfde48e90a45517323dee78ffd95b81b07f4a72d718623b9f0d7d7fc3b2482bf5a79a94f22292c70f4084edeb8c5f69fb4caeaf816e00536e2c09d22e28760c58b588fb4de6e487c33db9a2b84f7874cd4e5e8df6251a1a25a0ded9fa84a8795195872aca9c42218897f77ff262bc853c518ef09236ecae59ac6f99426cee12a9e655448fce89e33cc6c09724dbde051d95fa8de5c5f78de82e674603dba5a961e2174a72ca4031127b849b9ce8c8448f5eeb05ccd10f6297400e81f50add8318a732eb7b38346e96d051154a29ee12d30ce89361e447c3ccde297b6163ca6a6936c579c9fa3752db337f6a843bed029dd88bc50a9a2a6aed032215151193adb1ad77d7e4965909f7e5026aa85b09bda91d13d58f054a54acf0b59b8577c33fb78938da4efc1fb3b1999581a02953184a388b311d8df9aa63c1572877dc97279bbcd2acdded96b14e04e1af9cffbd2c2952942274d3c027cafa57e0330e141ac75e4193f467fbd26b0d887b55de67dbccbbb068a3cce12657959e4f3db29dd85b25cca312db300046af6e3116d4021baee9a44aa8187f3e3e42f02915cce339a9b153bc24b0043418692921c28ff3f6fe3247a33a9604a49c8e900119cff906e9838f30a5a70830014daa11c8ebb3298b97f1e82878231647dc99bb0a5697006c1bfb0d56ac3009c9c18f96e29a51e1c4b55a94e0ce47521e58238bc1ac4b728891b93c425c0df7844c9cad825646983ba8d3e7d432efde29a33ddecd3fb136e7c03af1ea8162cc051a22d7485ae2b556bd9c909d19e0e0a200887330b820db54b7ba131427f2af1f617b2f9b29e3f3ce5111a3b90500d7af5c8c28f817bd0dfc49316629308ac478ce2b883589e6221d505966da6e246d0d07786c25ab5e5902f4cff383f5f0c730416dae030bb26bc9abafc7845556f852280cd516e4ae65dc900f5420ed515afa2eba29e3ee2cdf53f800150cfe7e807d0388bb7e438dae0036c90fc2159188db258f6ea5387ef5e318a771d53a27a3c1852e24fb147fa8d9a2495b390723fdfd8faaf27c9e1d87b96b3fa8de9324aa6a00a4d0c540855755c849cee14984b694da4552abf2d1a630edafb9cad82e9751788f5096e8d5c4e16f3d2761b5d0a2813d1cf06f8e6501e8344f29308ca1a689735b90fe581feb577f2d432ea639f96139663224d0827cad1448708361560d2ee726d221057199b931f3a034c1548d1c1cddfd0dda7e70058b264eeb88d4b5bbcfe08bdb8d0e2fb5c3da014f19b8c3cd4ec9ba1dfbeeb806f39d62abbd1df49e9880ba424b7fae5e8199d08b6e237999008ac34fb76a825111f5fa2fd05dab214867fa1adb0ec82f37db92b6556ab0c6e5973bcfbd186a6d5bd1ef9e025121ff1ee50ae342d8b1530726cf873fc369f118f4cf5bc787afcb6f399b0327d6a0b6fb295c04fa73b339cfa67b81e13a11911a7eb0bce5da6a810bcc1ffedfeef788d883b0db8058081b1f0d840c6a849ec7da77ad18cb3100062eded0d54b113bd1c662375043df7a1d3bbb565b9b65c9110e0d03ec2485705bfc345c41652458f67a5c9bc5138d88a47e689505255132a77b7dc9d72f0f31d52d625d92a6f50e48a5541a98e83aa6d3914fd0aad73a221340147f364eee596930038949436c53903eab1f4e3eb9f8c933a526202dc80864ab090e45f3b5b622f2dbdb083872292a9ca01c4080bf7e2e73b92c78ef73ed9a8fb50dec740c751670f637f280ff626d8c9afcc0941da6e9d26d4a9b754c29b11e1b525da362e8bc1f9de04c2db177b44305ac6fb379ce8dd70ab9db5ef3b92e75133e4b4aecbd1208c9a296fa4f359a7940a0f0e7f952286520df0d2d6bc2fb381e5b47fd1f19a29aee0eeec7bdc7e47d43696577b0a9a581de49cc68565879d29b8b5ff3833cf4e14d7485b0216db8905b8b1c33ae7f4a936bfbf2e46c7759a8dfc7c959f1fa823fa139ee1ca93191cd5cfe17499655d630e9b98b0ca2b16fbb734249c55411501af182d01e02d55788f63793e27b7c01eeedb5f950ffceaa46f757ea2c80b9d0502f71dd13703e5b9522cb400b5281835bf75b0f8e179debba639d53626b3cf69ecc5fb02a3f6220f25790a3307d3f1e77b02ed19e4533d648d8185729fe325cd47ae85f6052cd248208f74bc7cc89fd259a35002d6102356f3eaf9b31866659c8931246f1963f5484be07309726da6d991956bce65aacf46a3efacae92e795dbb7303742e2f076f3df0491ad4499d6ead0e3b9f974598d0e922bc915090fe9a0b19a7faf74345c0153fb0b24ed0b89fde0f793d4a7ae31441973f99d735b6fd14d04f8350f900e28db544e4097dbb6c85f7fda14f77cee5a1fddb28ffc6c5616c4efe8568f765a1b16b7cca8f976e8399826844b23ebfe993c0336177bd921bf343fe0f8d5b0f00f2c28e26ef0948829a3b4cf16e0e9f59abc62d55f153f0195ed5c20e6961dfe0e494bffcaa4c158d098db75f0d9ae554d84e412bd2f9f1141d828322b2c3747d529b46dc566d246388f05b3e6350f90c9f82a5fc0c3f5357654a9f7eff6989749e877c67480c7ecc48de30c6d24ec0ecff3273c31fe878f942fa7620f6d7a08dfde6bd73191b7ab49f60436958821c129434f73e1295752d5d53945ddaa129618e92487c15cc23cf4dfeff61e1fc1d601a31878412bb538fa35f8fedc51f412a966844f40bc64ac6481e499e6590907178722fd2c1c0d7036e29f0bec93645ac87148478c46b246bba97d3a3fa0e2eefce2e9d7b84508bd525b0d62c424a9bf4d862c97ffca9df21d5315063a4e678f43f9ad3eb4df8fee1bdaeb5f707c9fcdb261a1e2e2e061196ea9dac9c9c0ab30740c6c349af00df6fc433c81748396885e28c8fc363bc0c94b8db13d9f19d44e36fc5a2cd0be73a683f7d557d057f7f7c482be6f90ab91f8acaee9982521a685ea5b76ee6b2df25f4956cf338eeafa04789f9b3dc470e5be6a8b6304f3faf675d82d4563363b94fadb2f4552d33bca5d7d3e461787dc5bb339eeba91fdae20e4a787fefd77674b8600f2b9ef26496976377453f3ab15c970b36f938864c8e377403f6cd8aabd21a5d00c76fa0c1faf20b7bf7d271bff8e2448489af0412c59075a1a01f426eed69e92e88e0bfe5703ba75bf8922135b720f00a7cae9e320aa8ae77c21280009fcb018c699662bd279356d6b0f62ea572ed04b3b1e616d68b736bb1ea825bc739c103633c6057ddfe5c3d0da4053440ac37e3e3ad9c794bc721b5e244cad0df1d634ef948a00c19f802f027e54c2e1ab55fdf0f643f7594bd9660d4bd6ed93988c51dbf2f3dfb5ed467518ba963ff24de7e7864583322e85acb284125af403fc118c33a691f35c159ae339a87306322de078425384a3fc9427afccf9c5c3ed8bfdd378b5202d03b1e7459ba41ab190e5036966f29cd337bfaa516be8c736be69db612e1abec4ffd621b5ef60795049b54dd42966fb2c80a870005d5570a29618e95f3965dc4ad1b75a317447d93bdd0b8653d7c3746400c7bca83c1cbba64e7d00214c9988a3fa1df2913070d1ec0809830514c92cd2066691c844504e76babf7b5007d350aa1d4b2d23b439f9b3e43918de4c24a059f90b4d91bb52a73deef48b3451af0ae63ec19d36cbdf9cd2291f25ec45a7304d76d16dd6c9d817ccfae79eabc34f6744f13da97eb85ffa5517cfc7fc59bbfcfdf01afbc2f91da68f23d7b448cdc7377ebce5d586271dbcf0a05d70e046c80b3c589aefcafba85d00f356cf20298b190a5af9571d98ea0946364b7fc9df8d8048c54887111e57312c28b8a4d51111c289533f03b229bec085eb4a7d20a527ac068af52e337c73d32bf489430a4a4639d86b84a8148fde32772ac8904db7d17d238d08d6e3a5ac032c212f42faf2ad4c87a3127f436e3dd1cc3dc744cdef95dc4573aa5f3383aa9c8759936c88b7fec8dad564a77a5824636df21389ebe972b6b76bbbddda15e592f3e801c325a78fe88c15b41b796cba0f47999f5b05e93d7abf25b9c126b946158f6a32988bb9cf3b7993b8b418de2f284400444d5d15ae526adc4f1bdf39461b29048c63b5aac6b970172a5113ef5a017b584436d984c12441c9420693b35d41062d1c8af2b8c5a04b520bb19b90b835537248f5977767d147564f075429b44489826068b35d597471d2af7d19a2f534857a12c44d181c75d001d2aed05b983ada4b91b6fce0aeaa21debc7e101e9f9a36f6fcb81cd97b8ee342e4e73fa9407565f5c310cf9e8070499240021dc7a9f91e00baf9a9a6b5217daa42d5123b7c6dea5b0c751590e2034a374b5c6502736359b3126616bde9e11530e8492c9bc0c4967ae91e6882a3aaada0edd0e458c7ffca2bf805315055c2e752005e0383f3fd4a1f78ed7d4861a7407861ad0264e9fc34a0d41950ed749254290a4500dd3aa5cf9ff6c2b735527063d21f62268b09b89beb17c91335d50d75852a276912fdb2f9e022a15936b4eb8840551b6d029d3f7f620e5c95bd771e6fdc36bc439d0192594d859c88ba3ff86979d4669ca1b2997a0c0b939995ad3c1f82244d2df4a541d5c105eae19e7c85c416c9a207b0a89afcf5778426df116e464dedb2837e5f0b9c19b6d2524cf4e227397cf7b8796c88f96bee9f35e0d9894afcb7bd1398a6e79d09cbfd316e91b38c9f547085e16fa816c213bd9efa26467af593958bd61383fe4b0d185e8e800f8dc21d4ca0f83481ac323be0f2abb1f1c0e873db491bff2eb305ef75bec58cedc9dec54856c6f27b943d4de0916e20f851f64329c2af0d26ad7657e455742645ae56e862f6f2a31e96163945982c4bebf49859393ab4d43e68d36db2f96dc7778e4dca35cf743c8478e950e471d6acedf1ad0d8d9b456ee980413bbf256ec6785465a71b64c94ce02d4c009ad1b300743fd199ac3faad19183af4e08b555d00f21f36b6b2e96b97bbd89a3c5efdb6210322c296ff1fb248ced2469f287aff6deaedf447cde1a1ce98ab6513a161205132edafbce862c23b89dcc17b8af64d3771880166016018fead09c4b644f86b2584ef19a7242a26ec4488ed602c9fdb610b8743f4011a8557537b72484571cede8b2b235a1ee421dd80124324d18c03a75b546c3b25e7770219e1c89ce76244f176750929695331a13c5b9dd86672940c0be659c0ad43d21eaca81f641950c9c3d6325ad73f552751e80d1b80f5d78af1877fcfab9458ea3ab3edbac7ee5cd75f3151b18bb6b89f9eaf40cfa67913b7f35dbc2b2a07e77030a8138178c7ff3ec2225b7107ca0ff1a1ea9886a4cf7358b8a9a14c3a9f890dd57c39cccfce440cfa9e943fec1eaba069d88ef6c1ff4dfa619dfa985d6ce01920c082515eb397749a85e5529d6d89b0d1381f87bbef0c208bbe827fbace2e942176f215915e5a9cea1d39af4775bb7803582d774e3e2ac96902fae8e64f123cfc099d91db7acfe335805dc10c409d0445107b03c31c80c1e2d53989a25a1004e2753eff526953e6ad0888907bef23045efa7da3280742c38adf1fb191f731c1907f6f38cd8f2380c6cf7754c115fe6247224ac7c40b1d29ebcb897676d9d887a716fa5456af3476f0b2b8c769509bfb1031bbbb99a8b07054fd54b67f1a341a1372a51bf6adde9dc3566e62d3fd6a859bd87908be7398abfb3bfdfce30492bfafbfadff0746dc52077921f34acf068d5e2e48322690cae0917cba4d4902677d0a00aa33a07f26b962f386f09011118fa824bb0059c5753d5c29c7c472f5b7c27ca99d8fb348fb43e543876ca3eeff7c41d8d5e53a2ce356e17a1bf4da067b0edfaf5a9f0772abf54fdaa0bdaa4839697e86ffb44cf2996f4a88e1f9fbbc4b12b3b064017caead3380749a51d5300948db894beab7695ed97adb4450645923b55f1acb61421cc97bd410375f0897339d3c19cb63bffe04843c2ad7edd824cde52497012a330f8d731605c561aa7e1dc3c9acda0ca70c8a1f7a0938f7d098c64d05fbc80972b72b292a5c12dc01fb87d549afbfbe180d1d54f863b4e5dd6cfb9302a4512e368c4fb9eca1b0cabc9f21a7949fd3e8a2939f9416fd67d4490dd40330f2aa280868c0273ff86598fdd8bc9ae1433799cf3c866a9425c4c59d74b337048aa0da44ac2a3c9a652701bc88c33712251119b01022311ceebc8ff69ce1f02a61ade62865635a6b7bcf60af5c2e3c12ecc2e23088b610a04456b9862ba89f7ddea7ceb278d23350530422a1b95d96f96e94e1acb1aca0295fb071d8d3ca59184a1632f0cc0fc3522dc5d0dd8b0b4a15e738fcfae68d3cb5c8f2a8f15ea3ffc6d6c4ff697d2747ad5f0d465b250de420a1c698d3c70f8da91f2923f290390d4c5978f03d712873112445b3e4ff86198a22f632eadd9150f1541937b468c56ea680d4382c08c2abcb599d70a78c0d366391d37e8b868b05dd6d597a7b9c4f8d5a8b1863b111951e63974e01eb4a03a9b26edfcb05855cc64d31dea155585c9dfdef6cf2a53b9c8e54da75435a899464d449c7014785bf086bd05622bedf2cfc7156603bcaa6a4411f5457b38a18590c17ed5b52e1dfaa281a3222be5c2bbdacfaf2efbbd2e962d51cefc6b75d6f6cd365213aafaf52ea4642f6569c661b46b74420462db2e3ff6910d16665145a60ad43d4222a2bb3ff8d329976d486109791a4551cfcc059c350b1f9014e8bdb2f01d8248f5de08f46f059fee4390e60ffbea85c23e7d1b2d17065d9e8dcfd171d7383b665db7af92a84101b4b8bbbe7f3cddd4f9f27c24f80128bd8015cf6c59ef6ae06c26a26192221d822a846e82df1ed169700c52950874e22677a71fa93fb7e720f8da76832e767d14b1d01c07ff813e6ca6e3add21c6eb27a3400a126de64fc09f0f0c9b2d12eec3661a771f168afe2cd2cb29271faebbc736e3aece2b219a4518ddee48eae193a906973fe5e9e59b5802af0166eaf0c580ea8ac22189140c3f012b9c31f36d78553f8a1994b9901720c580aae4d6b46fc76fe21e01a8686d08f0b95a41b9a9a5e386564738f2ceec4e5668fe04039bc6022f60d81b355ef263e64e99097badd8b1aa38abf6680bc12a1d8fe059009a6bac8e486cdb2a155b43464d8872d0965245d816dd879a5e674672bc7e18af85eadb63cf639b19ce7aa52c9a41cdb20f53396733026b1f72f3730dd6dbc7aa7ae6e5e2a5324cee9792a08cebcca00ec5a94ac32a7f8242713dbeb2b5b5afb398d272560d781244e52cd053ffe3f0422c2515e4398ec9baa5151728dde874a178edbcdd9bac6ef7769b429525a0640312041902683b8a0c897f5d051cf83923fb6644e199df35e35453842b4bd886bd4eb603d079952b3904a804c69e8fe12b78b8126fb875b6354b847e7e65cd1bd102d0e621ebdfef2ca13b17ea878cf41754a46d83a60dbb3490d532b240e2a384a5b2363a938b4e80485ecdbd45613d04d27ad0ef4e97f1f78a73a258596af938e677857b73a4bda76625fb409b9b89ef687ee2c1c931c5ae8eddc792cc0ff360e8bd3482ab41321014ce86b6c323b9f40db4284e216f2fcd5218080d6f5b2d9e23a181191eed7a671887232d86ce4dc4cda5262aa5264b3e68779dbb1b586fe71ebd834ed70ae8e4ec676db9b910544462d3e1d7c8ea0af7cd4eb3358b0e4c49c7052e752215394fbeb4ae67982c15523de065773083914654d3bcec538b11d4e721c390c2a25b3cc8034c965639cbe9ef0e8eaaf18ba1dcae00b1e65729fa7cc730655061f002e68f7201bac5b1009607499262c2727d58ff9e79c5296e9b2eca3ab538c647d0e191737f2844790934f9adba4f32c7b9fbd4e6b1b4ce047cddce8996695c74ebdb2fbf02e59d1c4bb7e9e60ac48cf5684926b6b2754c8753a4deb365595873e4ea228396988af741252fb082d682f91cf3569ff7e1f624dc4e99c9d9bdd4a77aaec0547cb9aaa6b89c98a7e9dbea4d61bdbbc8c0aa1d5a5b4d26f73b396a8fe75a441842f14b9ec32947c29d37520c56c304dc435e4fc41b31fdab888e1fdcfcb4ad41877b481118ad1c1d28b52aeb9e335cd9282a3d1de64865b11a05fc6f8ef67d57f01e16e0bc2c2fc2479b01e31382e87b059f4eaea404f6a701426cc1f13af0d5e15b343f2eb086c391d85e657b859202eb9192f66db0cd2ca8aa34731974de5eaf953cf1046089e7df3b2500559bfa5798adf392936c85466e772aef26cd3abec7851bfbf1413f5fd1ca91a8e237885351a278f39e74d9d20f224094f569a9a86d96106039b07ac40bd25ff83355ce662a3d0d5751e63bf5e134ebcefd0122b7d72693c4fc1f0ea87992338f36c184ebaa2d363d2f1d941b590b5770381deb01a2ccc3e1b0169a4628ece4b873ef76a40037d3b9afc62d49350673d1db6bcb70bcdd52582862b330c54854e766a4287f08ed8dcc0b44bff6923a8db834c091237f3164c07d1d22dcfb26ff110948268e5594fcb43bca95fa53ccdb4c7b52877bf4dae295e27782dd320f0700906f10328c83e0baa746fb67061d67251585b78c427b7b2b9ceebf6a11d2606be43f25c29ff291f29b544aad6e310e3303e79b9091d57c6bb773a034ab17be4acc1fb5bf81ba64c72b7a4934947cda7a0f033b47cade1296c6d47882af735896e5bbaebc9d8afd9b3a5312bbc9dbe877fcfcee69eaf80d7d82b10b77f105c51f167bcb6f3c636626b00b3dea479edc6d817a0d965034ed4f503d446e6fd2c97600c84d0039e9aba1a0d6acec3c027fb6ff81cdfbdfc984f7f8a071e0e0581cfb71e4678c8ef79231ae4c763f47460fc9448da6b70f8cc8e82c525e2de98e6e82fb0b4ad60656bf8c1bd3f60df9cde365a91e9a2428c8b24c67ede7874d35b1bb93ee36418a2bce1e9e1d48f1f9230a17e1d79488a5fb9760e0b8fa8229770a5858a45d2c96c36b1d39e5e65b74420983722e3d14c9a99f808652004b799ff89e59be6779fbe23b584647f1120cdc93866acc92e307e0e9bb3a61c2913d7237dc2a52e18e488147d88d13f960c7a877e11f2c4e80f5297e8d0dc0fee15912e02c4dd1397a462e3666aa52e9308b9c2ec1f9a78cd1f6e02a379af7159473674d1200e97a7343aeb436c83c01eab7f79a7252735af81090b88f45bab2c7bd5a57b5999c75c16287f61fd1f6818bf21d404276b74269ef36686d2536bc450c9a9176bb933954341ca27ec8b5339d6281131d4edc2e7ed2e33beb4bd08b74c7af24dfc0b537f8fb0dcc4c49077fcb87328f84bff7ad0acb68bffd790cbb0cc2168aac344749646919dc97ced3ea99a2acc7956bf98d596bfd4a1c55b35bb82d754dab08d9b259d8c0321dd69bb6dc29d03bcc735a15fe3a95a81ea5b5d229ef56cf22abdd43f652a85268a9ad65b41e3c02c2a321b62903ca6863f50d1412734aeddbed66ef748e17300ad08122a199c6f0ac469a33bf8707a3ef21b4581d32cf4346919c2a22f633ec9e2a07708eb159ec43e73ad0d0b5590507b5d6d789112d38cdaddb685a75a03ca514e669181c06243a86e7af01c4a3e22a43cab5be0e0dd2085e2c1bf0555ff02eeb542c398a194bc17af1bed65a9a146c048718eb0d94f78ce14a43179f67d8c4b38cbc18cdae130b9d3409d5e5d6406362e4d7d954b3e10b3745ea18701ea2f7eeeca124a062bb6ac73e503d2f2dfe54767c49010fd30b3922461b9df3feedeee0f093268289d02f93642bca39ea6f6df14ac93822c09b54f5c1b8cc664eb9b7f5f86309b888c1032ced474d632183032c87b4ab069aa28f8e6b9aac3edc659459a329ada9e5d65fadcfa8b365ff67e363711c84d3d6069d103e2d1066b241d62deb95fbd03583b7e7f9f32792703686dbaa08a2940845a1ea729ccaf2e4383ae5f85f4f60f750534e4136d862465e0207a95c747e57d43b0f5e42f8b1003a350e8a599729ad6c95ef8d9a7ae67640137a2b3e0d514c707b895ebcd7232af998d17fce1295c786b2b8c43198e728ffdee917ded9bcc4a00699f5055eeb030d037a3a7eb2bc9772ee07b73e8c34819b5e3859af59f8d3ee6d233b76a85d3edd9fa4d202b69b764742cf9513f6510787f6e539aa5f12ec313ff3ff599f21f5164b2476d7cb68525be3e13f6c895932f15020f449590fc52ddde58520defbf86dfe992d12ba5b3690eb326553c048c762798e490066b791f94d7accfc57e508a1e7eafe87a80ade4c639e2f193fd99cc28fc14c541b0bfaff8646d72eab2b898fbbeb10e68d400019aa4a2a670180d984d6306cbee7fe044a8c6339a9756b0ead350173044038840257b2281f5b98e47d543ef3c29928e88d49cfbc8adb0ab2344898ac12069655e744b3c6d61b3bd51c119944b6e16e39c9c7e63e80c6bdfe62bb0e81e45d19e09808d76176ffd58add10bfdec5671813108fe63b465115f42545045e7e7accde3d354249c66df3df432a2e052e3bc3c0808ce0fcf845e668400e1162f7bc2b42e820014a023e72d06407189cb2320f084623ffad6f03ab753c516d7f89a92eda5d13af80bc5852178c9b3d88de59130954f1be3d05a1ac56f78c93535f661ea665c959448a13e803e91b09b0e3e157321b3d1782cb00c548f67adb032a4c84b04da64e372880ac5ca1ab51d07ed9cc119b903e071ba312885164900fd639f867ddf8f9928137c0003f7e78109dd378fc74dd90d354c59f5302384a113d374fc41275590ee8d3180f34cc2e186e3fcc273f5a0ce565314fd56389dedff8663e4c11f1ff9e2487bcb20a7eca0265498d3461e0020f3a36040dc2b736a7d080562909a1e7d425355cffc0ca192d182225097adbd5c29e457af01531a212f947a3f3eae58e359b9bcdbee5966b49f20a3e7514d4a52b766a047c4dc69d6f01deaa0e249c8a137335fa8252081bea8265ef3a3ab6c4694b2229ed26eb8e9a726bbab94832e48c9295bdb67cc6068dc75d18fe26373447572ea9ad16870bffab11ef81968c6a378e602ffec72e98396f6a1d8f6c7ffd9777a91b1c6bb63d9744e781d69195c632157c9d33217b4546d161bfb8833eed3896609f085876af8dd0c3e6b7aef85a0a199c4c8f729d4b54f68ae8758ba8182c2d912c8b8519027ea1dc70e47da4eb2dfe9397c57a57ce2d16a8eafd9cc9de33351e89b034b831191cc0035c2a9cfb0d707da5dea20103abffaea51afa8468662bf34b97b47501c3ac2d5914a74d3b78b96ae21db0d12697f135e62cb7d62c306b4ef52ef2018d9d8e81d16ace5fa70cede9057dd1ecefaddcd9ca6cb6be810fa47b16f039513829e6d61579b9ebbc212b6f9a5a59a2c6576271d7e49ec1229533349b0424867a7ce320caa916feaa5917c81dbaedd94f73b52028c8cbd862d74b899b25f5e764d28316ca59cfd8e3b1d2b8b7abc1a7948674153be9488b56b18f7d988dea503bfd23186dca8b588e22e23cc10eb6cebbc05cf7a7c1aa8cfd55e03d3b0cd851550e887101c8831091e9607ab8750f9ea24929eff7158a8024dbe48cdcb38752a5dab46bf215df801a7e81e0790956c06a173fd5ba3d819d16263d5877f61ac0efb5c6f9aaa139033b96a6d182023febef72cce64fe2c617455bf7802f4612166809b4855a6492eb564474f717611fb5b03d1a58e079b76d67e12fe25e68c02587a2148256a5cf3f058d29e1e7d8e99b947b0d76ee8690fe01fb93128420d967e9479e8bb7c3f17adc767486c61238ce630035e546f7c03b11fe3078f8e0dbe6b4a576d51d03be78ca410e12e40181c2490ce073a44fa2817c05cea3b25e0ac70032a582d0abc982c7eac1ae9e22e2c4e3e4e5a05619a86677ea478622e745f2652f77b2c02788cf30a4122504fb96395aa1370a2e814f8b16c1967ba84ee5176011e998423636872ecac801700723c82f3f4a5caa0f02d926735058e8e6685faa6c4730c4858c5b3e0961030c4c94da7007d96adcc22862d65ee68cde0d2e2360281889e37465d558fe1209a655707dcd3e9ed6b5b626648a5f7ddffbe66243b6ae47fe1a98b7074ac9b818f71265ddd0eaf63d953e81faad58e5808b8901736b897aaa5cd416846b3c7ba9769ffb4c70363b3d3f053d5be7a01cc1707d536bc7a496978e776c57060f8b8c8c90fa6de44925a57423e1c1a4c8d9dd926073fdd1f2ff312fefcac64ccca420e3d09add08d828a6350283f96bc83a36c641d2d3c233c7e9e5fb688958babda1ad0b57a0f4557f3aff88ef68433b4095707d4565e4a1532546eaf5ec262fcd6aeb4b3639cb75ee2529e3fd55974bac76ae93a102d08e1801609e9ae80b8324dc2146f5ef652b16d5b5c1fecbdc43d4fd22be496b6bbe9ee5fdcf341a15f97d736ac4488b7e7fa1d338d806f80d6cee75a55b122d5e362ad92812fcef828fae7dd434d08181a99ef56a5c0ee629c1eb106a082e9bf8bc5cdfcb58c8dc9895623d8c87808dbc83ec0b8d4e31ed65779b3bfefb5ba276a6b2ba12f7222b3202593e2c01380c5647c06fb1ece7526d52718b661f3a1d9ecd685dcf46d1963e493dfdfc4f1398b36f0294b74c98b6cf713bbd5ab58993dfe928fc1da310decdabf832a74963e15d7314a2160f79f6ba4a38702907de5c242834f054e5453973c15eb3b341c2cd22f5da967ebfa697a7dad1ce440c84d580e21878efb7333323d9939ea81899dea46de61ba9860e2d9dd1dc24d8814c803dd99394b5561babca2348db7c74522ec6538b54bef2a2e5a01a9103d4665c25d5a7fe05475fc1b18de9a334b458ae94d9bd729a3f46d6855005d0528a666722e98c1cefb4732c07701653e3b1ab34635ca4aeb42ca0ffe73a3a2bc492f080611703c36dc8e925484aa3cbe70de5b89c9905b25b10e6fa56b5f59bbc4d8a4059a003d8d90d057057b3d7e5eb229b2aac76a26f9fdbf796e5a0e4deb199cd49c33d91a346799c970663909b43af16c7035a1eb940d0d7b0dc9046fa14ec72b75c0be2d765c4e7ec3ff8945f632d0865ea4f2c8ad16a71a815fb0f9229f3406d1c002ccb7a512f4b2f0ba757de55a6136f4e4ae9319c27b26f9144cd0939ab0c1805015a9a2cc988a72b47c49e4eca85f54033425363a63487dd7d1ea00abd48c2f2e734c7be80c880ed7896b62a3169107c853f3e292872a2bb47238f03f02af905cbfe0a30ce9a6b125ff0200723705997982035598b288010bdf9189c1e1377d07e7facc6c540c1700649d5f8b535fd1a09c4460b8b8db13c0ade3e4a95777fbcec5c55476de6134621fe9b911482f9a790fdca83fcaf01868b941459b6667d25b0790fed93f83645df19c669a295ba370b92047c0736b711cf2fce802d2dc588918b8d1b13585961e4f156b823bcfc81d0c5e38fc5280997cbbd677af8c62f8a87c59929857c516a09f6fb6ed9b9b443f12b70f8213905fc6366353c6c849d0d53b4b8335b306ebc19c251011d0e2e65864f106a33feed3e605bec7091e23c894e1f58123dfd1a673310fb38982aa40f3a8949afdd1ef00347a82f79e1f2985395d283aba9e01af5cb28908c11f9d8e622196088ab7d940f0a219f8c840c940944012b389f01745f0c546d829f178007760b7ee74c4e005bb909be6e678a005097af16d0a0afc5f67a4077d2795e26157f0f086629dd45c1a80d68cd949206a0c06fd83f2666c807a1b7c3c4341ea617db6ef11571957fcf982dc7e4377a01efcd1f91f0dc609de3b4520425d3085b592e1e7587a5c3b8b204ccbbf067d1e6923c8506d5c09b39fca84467bc8294f19a084205e86a89c9567dbb02e93ec937473407f1b88fb088e2ea5f7c53fb19ac21f4c6dcabc995326aa44c797f2413f3b36b9092c7b414d60e30b8dd45f072dc17a8176e7986deade79efbbcac684b5d5600cbd85d8d249f15111190b12e22cbabaa6b4ce069ea17eac3eeae80f4d8bb905f15b9979ef1c5f29fd3ef60f5ee8a0e6bf2833dea6d39366c26394f471d1d3f64b395761754311c36104fcd1fb890c6ae3fee9f171d9919f801ce7328873caa4197ad0547c8ccde71a620fbd26e99e3219978720d1ef32af155845a02c9a286b43e8ec5f9f0958dd2e8d268e1fa382719afb0f14ec3552608174cd2f03fd63c32d1e5d532989a9ffa350b69f5e6964bdba8741482fb6b7afd4567b5f149542a577d5859c7c0cddfb0778019c228ad6e0ee21cc9630cefb724c25ab5808f57e2744c7cd0951b650659c202951200cb422a1d4ee0d014c75e5bebfc35357bfc34bc8497ab390de86076f7ab46c82e6b61a865b929ccc4bb33085e3549a35118c4691d0ede3799aca2e1929a047cd06a7d253f4ca3ba02936ab606664e1686931dedfcd791073ca8a1f927565070cc6e93e1e80ab5b92eb59c2af24fb358b204b412e367164963a54eae52037f9f8b42f11ad6e8b98e03081fc5cee24354bc13b749ac1b52c035fbbb44fc273f44995c3b50ccedb66139f98f89b559ba0f01836506eb902d6a2bb540f92d1c6313356bc0373da11f8b500357d9b4fe9884ff6d57ad2e157b3caf304b9740c6dc0e60c945adaad8aad44d16fc90070b9d2406215e96ae818c4edc0f0147765d0a222451ea4a739190dce2c9bb864456f601b6eee4b2d9200bff08406d99e4cf8b62d6c35246ed64779e3c07aa07635448ae7879a2b4ba17f00b6ff0ff7e5839ac0e466660181cff322769ec4f2d0045ad76d4ab844788d90a2ed6a0c96e37983b7760e893414ebf776c04169e2c104caa30fc9c0f635584c4583fd3d56ffeed0423522772e6d446e6ff0343f16a21c05c5cea90faaa65243c6ba84454dec1302e6a6294792c931d949229251a2a2a8c1263447d76ddc5e4e94b18249ddf03787b34b4b70a44b2cabd44cc0fefa8b1ea4371e7784f921b2b16b371752a1b7f4c14978132fe8437199029915583b50040a668cf45db37ed480b63ba932417ee31497de8c9c0700c11956f1efdbb7358fb1202da3592cabe7c92d7e98cf6e51ea67bf785f9d0ddc98f73d1301853319d320d2d029f7a13001120cc7ad4f7023411d2e6cdc0b768f4f7af78adad4777047aaa606680dd3f1af45ad173da5c224ea3db0ccf7ddf57d5e7b6e0d9b8e83d603d76a495ab5b0aafc4577da387088c8036090c367f5fb7b43d5e6aa3499157e2a5e5f704a45dabdc5a093387b5e6429e1a8c9e2fd06104337e284d709d7617876b7299e3beb136429bd0c771d9711d1b163dfc5997158ff8ee1acbba5fc8277db458eba0191766dabc47f8401e0d71435a178eed05f7f9ba355a8e0ccee3c199b9313521e7493c51952f78d6e31f24cef01df91b092578836e9a14afdf7445405788bddd588ca94fe71a80227ce7e115cce7e2d37a9c5d836073848fa9c2aae6e810abceb9a65583aa0b7ced9bd5f633adf9c668409a695ea77361e7f1b65df4c8c8973cc898bdd058b75cb6bd9f5510cf51366505c3a8ab065fe42f52a3fb942841481c72bae03da7649b5545e5c2770e48953de6199bd7a0055970809f78550daa75071283f78e9b4a21ec942f4c4536a6305188a0a316a02b64d69a8b2b8ab3e7f9117ec6a2effa9c6325911d000f0d28b67be2dd9f8fd32cdd9cf3b383864eb4afb43d368a7daf1d55ef5f2fc5ac4f06ae7697d15e36ae9f940bf526220ecd8fa0037603bd036553679ba3a2606863aaa734bb7839b7e787d93109717165e976bcf6c0c59b0ce08fc8fad53b575decbe0ad8685e3692c80c1bac4290eb91e0271b4a1f9bcd03dd1807bcdb5b1f3fd7302bd29ca52ebc2e31ca401e353e013874c3884b3512ab18c947c79a599ab471a77e214ea8c41cad10fb38453992f7f6b9ccae8e80a27ca5bd83b6ea2211e630672463d23feee1ad51a71eec88e43bf5c1e9c53e6d99f497ba5ffc36363ea3438567aabb6f7da3805be9b62ff5fb21f23691aa4d75432908c5e24ba8c2d1857135eafe1729fe98700eeb5f2addce1607e9827fdf774c1f55657926acec45991367a9fed950cc3fe7f2eb15c0803fad44af186dc71bf87f6330119c336ef2de22bf8142bcc9317f0f8536594e68fc9bd61a4d8132a5c507439a34adf40e074832975952232accfb3f3e150a4666b18c2a81937a027d444e50e1b03d9ebe5d93d80360666db86a8bab69d305b3c7f139ebdb4abc3f33120d5056cabad902877271a5b1e5a4d7d172334e6804dd4cded07cd41956238aed0b589dbad60f62b173b8d3d5986406de458dfc76567260589a62b0f605912a617fef03e9d3510d4682f6ddafcd83952935e362e1f8a47a88b09d44af7d5776ffbab04b12c1264707547205569cdf5b92866c113754cc0a22ecf6aefd92f73b00a3d11441ce2b05b5ae20fd3d520be35a3dd69a346807bb29b065e93600aebd5ae13c6325749f2b887564087e2249dcd130e2a6cc0e1e9ad64ddae159b16892d7b3398a52c2270a26cd0b834600da2c26dbc9d88a7c82625495c0773e00369c05c9e5152d04db23810f5fd67486e0db03ca113aa442dc779fc99cb8fc5ebb154aa2fe6ddd5bbc102cadfd12936c4feb1814479caa63e63b865f79c38936d26003a7e500a70592061ecc0793d80820621ec9242038c2b39ef238d1f5675b5a90229aa6fedf86bde99773441bf10c304d441234965555d240a54b6e1bf64e7e05720a401f63841e70312726dfd8a5cfcde04997adc0c78e9f0b2cf612aa4f4e99285e69b60e361185a494ea6a787b190755bb673d5bdefe7a409521cbaae0d397a522cd6c2fe322b33fe7d586ff2f0b5c3258b1c3be9a4f83021be5354c9638a2f63c562ff0d02c4ce1926f5be0c621d1961447fd3baa1baeab5336cac05ab16257764a8570df8f14f5903c30c492b40d68261662e910cc71e7541bdd5cfdff9ffb0aa1753437eac7e3037cc67a8be8d4f7725cc7a7824dfbffddec93735c05c203e24a70c5757581beaa0c1b553991914c9dd9f55d0dfc5f67187d02bb24b66f55e6737dba8666236b117fc5ab87564ab7dafc8dd4600580f6e24e02460433b704ccad832675f8d744b29dbbb340b95232cae954c6be5581ef11f9384f01299127c0813fcee849621aab0a61215ba691c5f53cc384a3383bf751476d0d9b6e3c0c462846fd41021fa2fdcb3c1792ff10414ef8940d97c7c621aebb27b1f44d40fc8d9d7a8588f1ef23bc6d5dfc007ccce661266f5cd835f3d6dd4f9247c3561115c625fd68af15b092d9e09850ef560c8b6a9352d67125d462d1c0a310415a241b21f55b95d4957d5a976fa0ae407865cb4f3061f2a2e0e2e29e5477f7357ed9b9d8c1df80ab29dc6d4421b59f9bdd9a5d82e381eff62a84d509866826a77206744035c792f00a54f66094c63c5a8d9da1e8c7791e4f1973853bc45cc62f59dc748aedd97c7100cd3be7de69005a3669bb22d23f51f91da3e7c35b6b9dd42f8f3c0e48615c9c4ea408e2867281387ae9b2c5d079f2507597fb8a2f4ca2c47bee14e4964cb49eecc113f263b4fed56d5d15c60feda80610d4dded28cbe88557b52ce2c9ff0e9e7e0623d39fee1a7d85a9145918894ed7151d8e0719157b819de744e38fa077b637a1bbeebc3f140614ff11827cd384f1b0a92d77d3f34b8f4b926eb023a3d7155abe27844fd3a8c4e2078d28e94cccbcbc77778507c1d41e3d0a5da9fad7d4ff39dc6fafc056402d509f1da442346d8497fd496622416c1a5f983172001adf2f81cd282f8b2537bd32865774818e56c17e8686aef5cdce0725235bc2274506755c3b66b20c2ea6e34da7e140b669566b4f45b5ce03812445a500bb42db6a5635baebcee010d721421fe87e6a93d64378e13a1163c39b5971dcedc2c59bd0c3a7523ed4958579a1dfe6a01e66244c783ee1e752f67ce77fe86130e088107a46dacf8eb4d4e33178c32e0367ce9cb3aa6ac0889058c42c86bb5ce2dcd442e0e741e4d0626b6f9445efcd36e419f2315f2291e7890392bab874fceb4c2b3843ac05bdf8759c691f68cb3df05f30c6d02b280eb94c6f98a570d369e2451f6f4c59d535ca8b7e772150cbcbecbd5d3b5abc37e3497fbe38ebc35e22c423dc6a59c372be3ce4bc6fda661c0d15881efca841cf8e275c9bc2469c09932875f2ead47e62835eb6f6ad2b2e61f7861fa31a68a324c36860218016f5aa5a8e4268781bc84ff2c1b5a99429e11c372209a641ffa7002856162de43512c0fa5c151d5750abf71680c49c2ef7174311225cb85bce23124ce190aefa2ad2b6e65f8ea96fac00e40eade36f91f9da446e0ab0136cc7da9ce9a3ed5ad08d6519795cecef762d2d1051f6db88c252cf8836430770da2656fc147debf87366e8578febc32cc33440711f77a076ef44440d00dca97f2facb71016facc5661f7adb6da515bbe3c247ba6a5a465f0ddf8ee41937f75b22edfffecfcd298499e0e6a0be3abed0a1eff939ff360cdc567b14e169ba9cb2c1d37ae0a5b1406e56b3e2e2c89188cf00bce295a3341a49411002957af5358817b358cb3d56f1d1b2bf049f5a27007d6ef9b476fbde5aa0ff9120ebb49a7519012038fa9002533e7fc33c575e7707e6340e588d85780c4bc35da317ce2c44ebe8db9aa628936436f155e4982415873709f69ec45142d278e471606c7675e16b33cbff541a25501fc452bc3fa78795aeafdee2b53e9e2e9ee4db1a6386a725d5c240ef03bafb5b7861ea94b8152bdb52def208651c88139141c429ac489c3d2d68220e5a5a87ef59b4e7b6d4b600165355cafadab60e8e05c8b5b766bd664f9fb64bad56158c2ab1dda1699e129eb75b5ce857b629302fa1e40402c6532c8e8e7fa4893373e15eff6b7a3ef6a1a5bba20abbec783de30b8a6bd7270557c68d30fce519d3761b9b5b1b58498994f3e7fd32557205296bd8d61ff693db71fcfe81c1f5ab64a6f67b2df450fb521fc2d8c5805ff9bbb4d2ccf65b7a80b8ce6f058be13c52dfd6d5a7ddd33e455d1d87bd5bd3ae17a7c90db9cec294ce4cad8c7cdf1c6de2b9a3bf76ad6abda9cc02b185d2cdfeb160e467ac4dbea7b895a55c67d8d982d258682412588cf4585c43d6a5385e7cd6bd3c44f4284107864eaf9c768ea6f1d293cf82cbf6fffa7b5a0ca9cb288b1e69d70020ff0666969142e07a01ac477b4f0dc2cba9a3b8c98cee82105e32952c53c720541033acc2ec667a7e8b9a4fdfbbfcc4da473b94bcf295c81fbbe1c14405319c05693420545af0e2b4e85dc26f760718bba0b57e82fe9bebcba3cf788164fcd0e34f9bf28f1e5e392441637ae399133488d3f8f7bb0d8b440f643c5a005d137e7540bf64244d01d34c93702d4ca480ee89f29eb0c43588eaefdb59bbc21648ed95583c8f54157479ff0dfea58f0c59f90eb9bbc90e3d58416309252a5b02ea18683c509994273a0d4a8cb5be057c78ee4ce6ccd72916c288b70d8d884993fb3b5c0942d7fa5b45eade88581b6d6643c770a0c02158178c85c4b6bc41ecbe83f062aea3bfb5022aab3ff5a805a23beb9e067b660f7b0b0b3f7d64c3d6a1ffd4c3419275a2a7d5cec2ff5606b398a16f4141a6fb5d344ffe1302eade88eef8b702ab126be266619e3bf8d607f60c6051fd72de1a3e124d794cade15f425f4e0bf33ea596d4e02eaa3ba31cf12738cb207672bf327b00b3a468a5a472316246b1acb064dfe852f8792bea5639366be6b200b263bb54996e3264fe6184928a4ac406ecdad502fed9322ae5316a509bffdc1265af4179fb5a51a7a90995844bfe69272f27fce34ecffad4906d9666d5ad754e3d8122a2c7dc00ed153539f5d197761ef6673a99763b4b5a508b949763fbf94b76058e8fb6eefeba8c2f9887ea76d16c26970f71a2dceeca78fddca17c0a9843eafd866c1a0a2a8a5be6295818790b58f848db79aa6f08a29e27a1f3705759a34bb40683a5fc446048e16ceda36e0d6c5fe1a47a4ffc1ea120feac5407d1651fd9fa3edf999495b57d205f63befea88b9e81fab75c8608998e9feb83c04f200246bb12f1c8f9bde2ed9e5872a757270f5995f65b205e33221f73de9fbc1cf54545212de3a9285e6658d76555d9edb1722c1e9219535c7a3053af968890e224ccb7119cf3c842fc379597372320ac47017f86ba39c1733b6e856fbfba127563a4021baae2c66246bf58968814b3882198b1f7ea7596c2e104922c2c30962d92ae438dd7e69adcf2c495bba8123a3d00ddc6152735b55110f779a6d489edbb4dceede8e871cdb9e856ae8b2adf7a2e30a14987aa6a75dd40d800d9f0bf9a95deb9d5807c34136fcf06223fae0ff85b4c387e41fd06acab02f1d6f16ca2678abbf28dddf02845d3112149148787adf61dc3444c72269b48999e0509598940165023dce04b127da7881a6e536d575760758ef9ff5b926da9fef88e624af71cc7d3d2faf78e71528a46f738cf6b14062a2090328b4bf02f43a8b8a66496a2a84c7d6597b04915740e0cee1269bf9cb92aa95ed419ed5f2f52f9d4015853f52755e1ad1e1372ae01038625acb39bd87ee71cf7ec6d6088a430d0a84ea8e944b2e230f4ad41fe721a421ae526d6b3a51ca566863a08575b2fe98adb7c5273aa408fb48255dd63aa7d199115a926aa49eef52276ef02ddf327037ba144c9438e844d54e4179e2f70fc6af3f1452055fe249f5efb25e3a365e22235e79c5c7871874dae5b53b5454bc7baff2395be2f89d4b4ecee3e63480505130f894a2ee2727cdb6574b00922a8fa920ddb3962d1603d05f65b84a2c5b228e23f732720cbcbe91f5f4da4d4db141e1196c2b4485a0d75c31932a8a66338481c10393d51f1ea798609fa57591cf77b033a9154a529329084ddc6dbaa61a6dff356b02b665fd2e84c98778d3e0e98d224ff705ac69ab7edcf191f6d40f1403dc397dae98113e816701962824db4faa2a8209706fd52dd2377d7a2214bd00b748a356d41fb87afd52ffa6dc176ba2a975591cffb906c2a293f06ec5d66f2c01c81ef7bfd257237b974ef78e60eee19e5ffc81339d0fadc0947c40a3800d2d5c948249d31563a73d953591b1fec8994f418a3ecff3a03596f4e00a0bb24c83b7a70f7df86f53d29e86d0a37e36583f9ecd8a4558905474f1ed1c3e3a7e00d6fc6432cc8d98fe3efdebe7b4418e6dcc5ac02ec2809ffe5830241535abe22058730993439fd987a3872ed4b43c55e93789a3cee3613fdd6d9263866af16751fd50cd8b14a071ccdb7df99254beffc38b600a7c09f6e7006ef15f2cb65426467f078c09f547c72e07a4ea263b726fbc6431501c6f3dbd966a263d491bb293032b6361d847d0147636dc24b65dce99a918fbb392ade641578de8f150e590162845b73d6a375ef04d8c9825db93c0e1ab953f4752ec590cf77c41e7cb003a4e265dbc322754357bde5e6185fb8244fe70bc44386d7ab8d89597887674741330874e8965c29ddb4b30d97c1ea1163b1dfc0c818e7f916f3eb20440669eff864f34d9e12bb9b81781bcf0c5c85b535d180bb145402da709602efcec778762fe97327a1161650e4248d158ad1c29dfff752d9314099348fe4a037958c326f80ed1f35b95cf8ad7b984bb0deb0bdf1a87b0c77e454974079f0a1bf3cb8405a12fe63471eac379b71fd56049a51269c041fadf6827bafc512adad83c7da46b2c27dc8ff4b8796fd10d3f6fdbe280febc1594384efcd92c963acc7908a6a51a3f8acc50da67e8b97124a7f34806c298e028ce508b29465148a9e0af0df74705bc43e782d58688419b6eaa58dbb218f3bb3a53a73158a440926ed6a6088fb0c21078c7df1f2cb921ea0ed0d687f056a35148cd6c1a9caf098100f5944590965b4122e424f9a30c0e1f9eaeec3c36f2323854af9f38f7c344db0606797c1f9cf62ec6dbfeb2eefdd28e51021fe8b86868ad2b2c158b24c6cd331cb31a67ef7c04cf07ec6ade0af756aad70eacc8447ce486eec8b5cc0535e2839fca335557936d9dd3a9f21eda254b9295701b14253fbef315a668db28012a8e582f0ed31ba994b41fa893a32aed8fe471d4275f712cdf04356047676a68851dd5197f7f76c13f032dc7d95b12452e74677fd2cebd7bc58bb11c5de9bfcc3311d50843f159ef4dabdd96d9be08c12d776c3c9c4acc09e9e4b32bfe7b0313c2fc524842bcccbf7c1cd9fc95673846cfe305bc00e15e23858331abd822cdb6537e08434a9a4983408c61b520f7e482f4061b63b3aad4e4b8daebe4905ed6933dad2a4c43b9bcdcd0ce5206d055c421cffd606c162cf890987d4575da77e8e9506c9b2ccdeb4d8edca4ad39fdfb272fa364494af99e4c62bafd4703984352f1f67fa5bed3b69ed3a5d249f6db0153672da57616ce4548d06fc4952102dc95c03f425ed1e59f0d76f1f9e78ca8eb314096a3384fe8fc1c232d82b885e5382360697b7fad57c0ae20010d648249c4217a4adb0d6d89bdd665ae1d3b30294688393ff1875c681bd4c8809ab14882e1e02bca56dd0ec2661e43f0262e469e1633adde3491ea7d859d7fc4e6aafc811d2e20dd7a2a153e519cfdb62795b97eeaa0bbb75e3000497159d2330c73b484672ff5d3a8b6c59410ad9c4b879798d3f7a002979184424d62dc32f4831d8bd208b75f0ff4bee6740428db4f283094182a78927fc85885bfa330049587c1b4182f8afe1440afab7c1e9d64ec4242f74205fdc47d96cdb1d478a366bca7339ab31f27d18c601593ed01cd5e51ae62c05b19baf6786ccc47b17dc5596eea3b0def8cedb4e5c6d317a9b726d3b5f0da2fb2798d92b3738edc854957c0666e8aeef08ff2314506d91264e8e70d288bdb5df4e152f5dcac2d7a8b3088e1d713cd1659be0bf90dde4da514a1bd9f5dbdfbf0fd8dbe495e06a7db66c1495cfde8d68ea0633a58248a1aaac01cab47b4bcd149d703b81f7eaad2353ae2777f9cc59c0ee3366d94d9638bfa028b8938a48bfab2e5662781e6c5d676124757dd777ab392e725f33bd29349d2b8f732286aeeaad11c51be97b2b8c082d54078f4c1eb71e520d6ef979ff5b53b185a0e0da0f377e78693bd269c5ef4628c9a832f4c562032bc576920e79025f7f32ae1588739bb188dbd868870ae90ea8d0fa00264456f9c06baf6b503909609be690a2477cd8eb02530ccc42e6884e6116a218f8c41bd72cd1548cf3e3e0e6b2b15efda043d4e7cf5499682a29e10bd50010c28635b3db4d236b55233efdf333ad3719805d571597a65c169ded34716c855e385edc1bffdf02b7e9b242c92f117c4fdb0c3ba74ce85a4767d58dc66d46e447cab5557a33dbb1001a8d2c01d0cfe9abb134deb79603965eeb78d09d93025881ec8929426ec88a0c1b6add2076ebfd0df72ef98805b16b4096dab3abcfbd6ff728f1de6fd038434c927d43cbacfd62322c95d1e0a141457e1b49f46c4d266168151a1c9a80b251b0dc1e0cbf80c0c3d6c2b16d8e0b88c30ca702337e665b956ceb707f02a66fd0c6eec4f3e424bb573771a3ec3588be18c10a8de630de870f6f987dfdc5d504df94d2027b4530d399dc93bdd0bcf5252b09805bf4b269ac33219b944b46d3eef2d1dcacc3866b28a780471d01e63a54ecd3221f0283b0ea2fa31dcff70c6d9b6a97c5e7081138b9cfbe7bd0cc52771d4ce84cc902fdac48597a6ee6769679ecac8a6eaaeb15f438d545da965c6fb0e88221ab5485332308cb13addebeb189d579eee7d1b858719b6a3b3aef68085306e73810110409ce85d5f2fbc4e1bda325a6432f0e00570492af17a40c462f458942dd0ad7fc448693c93d75de82ac40a6dd886df9c465149d2fd474b2d14ee60f00310f029e0af2b83e9ec1c301bff96530c782af40975472d1d99d60afef11ee70c8b38b57ace0e1091c8adf2ceebdc6fa47b06f03761f222a3170e6dce46b97997e6c349c9060c518038b778d54211f50ba794abcea0311a39a502d0755109e0a67dc12b8e0b57fc5fe94659bbbfffc45009176d4da459942c7a8e2551cb254cbe9d019067361961c88d27418c733ec981f89fe529a8529a7a9b1e9eb93b8054b43ebe6ecf0e0ba09d86e5375dbab3c5285dcf23fd14e239bd8d03ac7c4567363403ec2182520cd502f08f674d699519908ff5e318d6356c5a53cccc3960ec64bb6629a7117862f02a6fea142b299a319dc925c93fce141f95b57f12775a1ad63e3d33a6427988e235966920d781baa4e0049c69e7d394c3240e4439b56de5b767146c4eb49f2f49954790bf236cfd2bcc86f186ccc75d33961b9391be508e9bee532aabd5eb9a0ed7cf87050e9b6e6ddbc3eee5f1b75199ec77f24430164e4589f08dbfb5ada583639bf85aff67984a0cb88a00be76c5673e93554ce2fd58356d506e105cf97cf055cd977df1e192e66a583f7ae6a89cb6f010169a0a0f4f8678be93f83526ee9b493f8887cbd12721768a962e21b32ff19bfcef841d5f7bdac5ea87293e7e07ad0b0c68a77ddb5cb94ef5222452ae1f4fee02e4c2c4e1d2c4b1d20940fd58f44e600ab69e8e7bf88cc6975b891d12ebe7c46eda51b6c3d8a4f39dd08e4d4efe334339100acc2596909ff220a06e78fa5ebb4ab426ba494a93f4aaf6a68a4a14dfaf6bda40d2cd2e2534f329239398ffa9217d72f7f0fdc3fe5f16a49c50d7b48476fabb0c7fba9b78205f877a9f9420a6040a7eaca274f8031e47a5cc2fc74bd6b3bc93b25c21bcf85b5e8fa20906a7a0661efd5389ed0ef08b83e362a59912942a4331bbe5f1387782555757a792a543ae340dfc9f7cdd281362cb2d841f4097be3305f4144b54ad0c953ba5a1fb0e9c505181a238dd73c98c398aa5a5cf2e21088f235ef290ea90d85e92afa9e5da04fa6e6bb31102f265906dca4eca24c79bdabcbc8d5d0fd548b64bd43787d16999bb88ef261f7058fe0ca4d3b252ef82be5d0d9cb0e9973d1e26d932d3284fe73ce96a16b02a51f012bd6d43509ef41ba9a525e368d35be84a954571c7ee28ed38513e3aea970ae0f24a3074fbb19b5a4b84d899306fe026d6427c3f0e0d7fc194a66869e2c796e08d647dd552ba63fcd9e6ecbc4b160bc345874331f55ebed635cdd263fffe086bf41b6785ed638703cc9452a7617f728be058dfc16bceec51ef6bba6d2e6e4a1cc62282e56c5dabd49ee17fcc2de5c391162748824267f4ac2d46ddd4216db53207e7df9c56f2c9ae379727fd48d132e0c4a1ae6cd09b5e018bbea56207e0034fdb847cf7294bed1e954b6900a506086b7cc772712b542e048817adc9fe03bbe139e937ea13a0519bd0e296070df6055f0e5adfa211c647673d5828e147c75845df4fdd3b132213cba2d7d9b419b381fcce39f0270d83455f3af6a2f505418d928e24173c4c8f537a5fdd904a7dbd6b072098927fa731f359e1d1235272fed6b0082bd7ce3cd4969191a97d7720204527379317457abe9700ebc7da0500045571b637012aa8cda37f2a6fd42d986a5ef0f79bf5cea984be98d33b9fce722c772358db9742b9f01796dbf057b3ea22fa5b1b3671a79561bf394bf57e4776df7cd06151704233fe7cf06529ad3573c80d13a3bacd1e8321cff50ee33d84b21c0662a8de0206497d7849a6e94438e6d4524d294d059e3f2ae70f521de570dbcb1332b2e0920a93d6d48f506996fb76830468e8d5a1e5ad01fbe8f6dea05f1687efa3ccd479402b37d86f515d1d57809f6f930b7004384f71d38e39dffe55da0dfa6a808909181d33725bf45d877a539fef0c6984e3bccc402881a711a3008f8d83dd8e938121e4f4a04d5c54b26e7ab1971381a7244c50d84c29fd1dc9c4e733de689fd3ba11ffe73bf11defeb3cecb3a85f6492daa5bb03949ea9c35dacf3764980e9dc659354d16a6e0c7de5b7283b5c89cc26becdbd0c1f8aeca58dad248e84e7a4a97d50051a31f1b499901bf588d92aa34d278509436376634bae75a8abd01cd5a8352057579f1c59d642bd29e186901d122bf22bc27a4bae0601035fe5ce58301679e36e814ab9613205032cd91cfcbedfa33f99f30a7870e7153c2456ea70d024ebb4e7931bd317c256ae22e0c056dbb7e72e6807e3e53b4cc4247bbd2c3b56cf5fe9b0482247e7f5e264437c09f77332861609f989dcb476f5b2f6db4dae01fceb78d085255e33ed089906078054765f0b39b0ba5bcd086650957fef89eaf99951aae66124c6237b75a77510ecd30369c0d15384d0aa4783dfed7d3ad85b8011b2f4535461ad353468cd652207ff0df783ffd4ec2a086e86c7fc4da162708a09e92fc5b5e82a78ca81a72976cfd4eaaf6c9e49124f6444acfbb15f49e5f05b5de3082247751182820ae5f80869b870e12b329e77aa75f29113a8cca832272a19173853f3005cd20126712c06cc235f0e6ae2daee3ebc812f00a8efe789927665fc611c526f1416826ab0c0b90d6104c54d110896854f9bf01e10ce56245a327ae2b52e22de1bdb2edd4976d4ee0a898fd7a368e60fe26a011634e6a05fc2844cb1526b6f80f6bdaf8728034f51f511e556db8623a9cd657a8d61359856cf51cd35cf998d47a792b2bd6779bb4fc9866315bd191d44fc37e76e7b4c0c325e08cf3f36dad899ba9b55990c9dcc3bdb436e55f75d83c44f69cafb2c0393364544baa1215f712018e62a750a9e27f395a02fef04bd62597ff22dbae3ef909038651bbb5befc40f09e778624bd4c030f7268f037b9fb50d272c175cb5763f26a9fb0e75687d25b390d1239497df377966c2e25cb458dab938f46ad0a6f52ed1d129a33230b907cbaa53ed6af6f8756f07685cffbc79c1bf761334b375ed630ee47f0e0f2ba0a4dee7698333dca9ee1223c0e781003ffb82277c391121ec158a2dd3417415e520a95e6e32445e87b1fecb29af8b0f00864bbb80796f5fcf1b1721dff27b57891d93b8428321433080eb34c4ff279130bcadd404bc4f8b835c0e1537fe29a2c1815ff5d4481613f7cce13a79c1a57ba04176a24ea2f6b76e57daa1ff04e4eb92093ab4460908798b673621be502d92fa4396c2291926b853fff65b36404ba7974182cad0bad284c34f3c0069a5ed0e92bfcffded4355b7eec73f0dfaa9c2b6e7048c0bfe8db70db5f9bc85ee71e6115610f05bbb22f5f58be3e69573d46b100f780969162175d75f76f817a9be1b9570b60f871a5a68b7ffebb3947eedd12cfde9498b93d7bfbc31f207d909680abeaf40d68a70d6559b7c1d784b0ebd7a41f1102a6156d81116fe679dc15feb319fe8b375daaba588960b51fe89cdabf83a6de2d8d38da2db2c0e62af75883f992d701e596c8681502d8af90ed27d3db61e151baf0115026caa3feef855b2f0885cea0ee97a09b85e446b6acb8c84c014e1a64cf622a21fc10337a66329eb8ca7a0143bf6614f7622fd07427e83334f706ba28618af20bb382c3fb756e0624bf61b8b03000fbb48a2bae4417087ff044fa206d6e1282d1ca3279161db407bc6f02a40caf5765eb1a66cf817ce11401d591e228192968de4b71445713b7081a28c656c98cd8a47677217dc4d5b35b4842feda555ef4b9cafd85699b1bcdd2020b73c666ed62528f4ba60c898b417bb01725c78a3456b95649dc87d0503ade9c921f79a307a58aa914dc3e012087973c6caedb9b30b0390354a5342d8bf761ef8db3227e715b0c4c8269448af954fe599cb7c035a35fd2aa3c5232695ab4a62803fae5dd4630b603fffb41f6e9385f7b2fa8604e76ebd11f5c4af5b0d753ed959525cb57ccbbcf7b93685109aa4281747d6e32321bfcf4ccfc646d4b73d22929c53f80518c81fd9708c2daf98e9b1cd38440b98f1433e3204af509ab371f519c51d9b94a3143326a69734b23081a7b501f7dddbbe90ce18b3d3539f0f239c7def8a342694d6d616076319cae598e91dea2b7b90d6df88b193dd8ff12612d855ad308a8748539a201829f0a6482bb85c0999a76c4e7397c2443b7ac272b8e67adb47945ff177a6e3f2e3d78884df4b9dafba7a7202d14c85a5bcbbf39446a4234fc845c8ed1e8d43b90f30f7d2336f47855952ab17a55087c5bfced4bdbe6ba2cd44e2a04e55ffc6717099a3dd2682ecaffdbcafd20e48a6b8a77e4a3b9fe42255999de65d3b7d4129617ee30a8415824fc7c6d79c698760ec0ad5e04f3e9e9da8b33baf92bf100c385dbadf43fbb3d9553f22ebbbe0e426c94e2c4b00ae7030e4efe43d9ee183d0cf8438db8174e8b8146a7c2bb1133d434453f7519427df321b16aef764a337718729a0e10343fae2993cda9496fc821cdf9d45fc1f107c8388ce9d2c81efaf9fcb0af61d0d8b6cddcaf64a4ff7d22808a6f0dcae2558a448f413273f09795df610861f9cd64dd2bba59abe582ed64f1652478a823a1ecbd1f8bb4f6eeb6f4c03a7196425e53540574629f26e196de43e1e9a15275c288e2489b7386e115c11da7e930e0f08ebf26f5bdd745b97e98fe7f36753c2022367ba9e242a7d6ffa211a81133c473b332c6881b6804fdf9633e7fd26740c44b1f56b833bcc20b21dd93cdf0ac387fe867d7a3c353a4bbd226cffa3733650286083672133d6554fadd1992b8075bfd6e536f390d8f2c349e34608d4a4e1e03286fc90391ec7c42ce4b7c8549ed4804894e2c20f276b0e8bc62d6492a6152250ce5b54506e3bf5d6163fb1f819212acdc52944bb0f03a3274636fb1d87520352528b7c05ce1d6cc0bf1bf5f40b9b0e63c2733384ac717f832c319299fdd693293fd422e886c1d01c49773dd0ea7418bb554e321da3038ee2129e0fe739c0aad6e5dcea4cdab0546c695ea8ac3cb1175fa730649bd79ca360b56bd67c441743f73a2c2bbdbea8cb8b96496e99848677fb41526a3ab7e0564737e84ec4b7bb894bf2ec6df9ec3b54ad23c42a37db8ba8e6b15035e000ad97b54fff2120b8f99e0d5b81f51461611a6d0176ef83b87fae4cb9ef57c42802a1a4bc78e936090d665fa9c78ff34f8fdf281c880d37d2abd958152e223b1fc488756e420c0ebe3142dfd3a0b847c2113ba7baebf05051abdb72f529b4a4626dada73e51682b3bd3ab89d6c2cc3c8752404af7bc57de8d1984ef45637ee4e26d4d600008666cae4f2fa8250cc70f45e4acd8768a08cab09a50fd47d9c92827930a889c2b0a762d31694b23b9dde406c0c3cb7f3ce18fa89f8a5dd6edee865c5063da429e213682d15992011a1ae8149602bdb1f2f263260db857d8db14be88f14e2c9d2d57133b961cdc348f627ad7d51ce54fa85354eb17d76e4f7301afef4516c25f2a11349e7ec180f5e8cbdf81310893c6d72cb80853f6a5f125f8d53429a9732334d6a035cd45083441f1309d48cb5ac09cf6af5dfac15334aceb92031552cc807c3d9c7f03bb3fcc58a82ebb79d7b26227f2282440cafde52fde9de6fbb6df95bdedb349888e91033fafea7eb12a83d558c50d1ab426abdadee5e88a74cf1795a7372eb69ce3ba9b56b19d026756402049c843e90c51bec78bac38e5fab4f3b968e7140e39095ff3591920a3a8cc7da1cb7360105654eeb8724f5ca2b482d9e72c6ada6664e2ee9400eca45ac84cc415b15a4713312a0ccf2b712933516a93cf068ad23f178287b527326ecdc492466b32ecf7ed6dbdb137c6d2f4545ea1388cabbab5baa679099e13c0edad77571fab353e169bd526b6b4581691c76adcc7ad3401051f6774b7a2c78f40fadaa876205fad8d9aa670327d8fa4c8caf785ebd50444cc679cd7b7541de8de6a716e5eebf66e34925f66765e31218f65d07315fca7deb0cd7c4729d0bef1191bcfb24160366e8f1192e87fe4470d4fc5bdb84ff1afaaed00638c264949126ed98c83d0d3d9c3ece65933205d04c8c70d44e62f5a0a23be8d6261b5ef376de09e507c07de5484d28d05e88a33be5c422448bbd9a9a41ae1003f86a627d03966cf7960fe2c76844d2d3ad778b03d8821dcec171d192b3018f29c4ff3071ebd2272b3178be8a8a3a7c549fd8fc2578164447a2d5aaf9ba3b650024a6ebb0963d8ecb41f2827d7383737266dadac251e8c02e01fb71c41bf28db165b5a959efd50a16193356e40f50739389321b26cbad1b14f06ef73979fc7e8e68dee698ff6e872c12e0f40bb756e87e383ea45241b505cc7c15096e3380a864481e945bb07644e7ed4867f36d604d7c264857b49472ee4db4aac399594f9f17b2a209e30da6b0145325fe0ef1df19cdef8af53bb664097acb65e8b1d6aea1dc66987ae3e8fef093a2154ab138683b017333ba6913b4810ab2a727e9f8b4b56c7aa73e2a617e3eb33f28495adeff9209a139df54da8e79625f4981b459f9956467846c36c04fcb0725e8d2ef428f84a7d05d3f22687394ea0b516ad8218017bfc30cf7f3ccd146559ed374210a5ccabb588c8779edea03fc63fabb03b1f0f3c93a55c7032b9f7ed73b03874512d2a47f5806a61fb87d6f002465c7370a56be68d0f16ff8990e871e9dcc378c16736c53ef6455591c1e9d2610250d80fa29d41e3179d8981ca27ec371b6cb748c25957f3195a09489f2e329ff719648ca1bf1fd7ee4fec79af7b52e7fbb8bbef5595156d2fd7c258a3b0e6083e0a48e29d2ef6dde64f038461bb86e4c12407eeee7124a4e3fbb832402c73787465e5d01ca924318f085e3cc0967fe17e84a7a5b5ae886a7f28f7c9bf7db8c6f8ff26abc2bebf31c18eb6df0bea70d50976cf6034ebfc1194055f7b841e5cefae7119dabc7eabc642cb43642a103f4a6f66d9b44781854922a44dc24ceb830405ba8110c8835f321eb11650f132c6c04c52b6f16602ba6870e3810f0d1e5889304d31fd95cdcf11370abc52cab921ec2aba7b67fa1e17c0ce1e5e2d7fda5a5eb3962e2566ac82fc2ab9503ebc5fb1a517fa21a587b3bc76c1436f8e718452775bafedcc1a40be9cd553db4456f404fd161c2c849e66cd79d12e0ff1f182557e82b44287c3339b6fa3ace0d7ed911a8d12096630ebb2358bb69791691826602638cf948bf8bef9798c105d60628867661034e6206a3bd26117982c538243e3f48b46b2475880e3a591f91932d30fb31290bbd6c5c7cbbbc7cade969234cce64f493611327599db9facf99aada7a3386e6a134510b73b144f763bb39f06b499b28d9ac32c782aee189b8fe70502363fcbfece8e62d5a944fd70e61c83ba0edb9236388394a6bacb974e85279eab6bccd711a91f3cc2c925aabafc6bb91cdeb738f58eb8070a8bbfbbe5703a7199066d58e92c0361c7797d81625ec20246fc1642ca702586b972b70370c183b367f10c55d7947105589d1ec0b170502e8c5e7ce8dea0289f7acc517e4d466367ffa8b336ad0ace713a603f16d502c6ad818f05f491330cf6c772b4f1aa98cc1285b68a0427143e5ae8f5858432099460207936933ec1afd43a5e192a463cbe29e1ccb804a7f1a9a0bb47d652a21f704b57f102f3b6dde92800a794f3f7c57f4a33f63f55ed0ba9f4dd8eff01622066d06d6fd4210d983f1276565b212bf62e9b729ca280f5138c2737af831bc1759f35a5277f7ff5f2552f1f2a5f670ef4d5f08f9375fd827158614f6510f4bd523cda9ffaf2a2787d90b914f89aa20f1b5de882ed9f8691507b69e52a356fa1c46a2b503bb0fcc7425c81f6b66920aeb01666bcfe7ff49b1407c824a14bc469ba2a96a68eeb93fb1f306cde87fb8d65a3b73f7cdc046dbc09929cc8c5cf0e4f55a3614a353b7b1c98fdd81573401120f8c755dd8c8d29c2e58facc88a48e5f251bd6238571adc49e16a0a259eeed284177ab13e150e1eb2dfa729f2399169e5fa5ca947fe938ce7980b0e1543a0aafd5d09c2493ab7c168bcc6e52bfb3e477c05d61a5b2e0b6979fdc4f8d4dd93b8703413aeda47d7d8b4bdaa242acda127d68fd21f648dc27ded2ce58b0ae291e3625301f352d9349853ebaa1d960b0a97d64e44a2e89535742e1ee33fd87fc02f0d0528d06f828f29a1631a82b7e0f25278494a7378b01d169f855d410045826263d2fc8277f2ef8d3d5fef28b8df0865e4a9d2d0113a65110e75fc5b6da1dc583455e7d85c8434a8bccbd19e355ff747e32466f22186ef246c4a7f9256914e024e03c7a9575454edec796f7824c01b035538f07b23564ebdea26ca818dd23faf3d5032a1aa0c4c541c2f0fdca70e009df959185ffc1a791c2e5030ade23d6e1b4506f658827bd59354ae3fe8c4e5fb6ea6f605537033f374149e370a984ffa6693f73daff355dd223f470d19991e2cd70b76a338096dfbd0e70e1ddfb602042c15bcb518a9f8b546fd64fd866c4246556d9cbca460e8a0a8be7e478cf538de80366f439217b6a33f359e44b8ae4c508804a65c40659d29bbd1af017cf0af7e329238494751c70be711d96c114925d4cd19fd4a937137cb38ffb950f75b593329c553b0d91fe656a9b2047ead17ece41abe21e91e418b4323d70370b3bdd5c6dd219896f2aa18e9ec3260fa734e52f431f3d0a865c786beff00da3d21c7ddd5fd5fa0537021437e9e2520a30b9576404023b2d013abf72971b7e06ee9963439671adbbafaa0e92b10f9051ff0b6c93540b37153360ae854eaf0dc962f3fb7659d6d4de7124ff2818a1555920dc1112ca65b922fb421cf731e9e640442b603a66d298367ea3d3f413a5132f2b965d8f57b213bf92f19cba157f4352a144445a1cda9d08b2bf19e01aedd075533e218a62eae8be818c8d3cf9c5c62b4df810cedb4a5d33b63c580fe75051b13119525643c7618baa161f0463d8d21aa4740a243d604acfe3fd0f7c8b39ae5cf1211ddb50d9d583b6787dce414cedaf0e3a4834587bacdcc40b21f5f9a479e4c0c7c26fc5d57774e0152952ce6e301c3ff8a33978c57df9487f26de72fe6ae78018b8d66e9b9a1d6980b586526edc77f4b3dc38ddbddaace295424fe23c5e4554bcd7d3fbfb93d0d18a90563539b7e40a9b4d29a6d0943a40c087f8288fca1e873bd85f8e455bed1ee2819246a639ba9f38564824a6134a3d3ad6f8833197d4ccb2668b484e5c0b5707dd0eccc801aeb5a239326410c696454712b25ed4f24ebd14a393bac247650f7adb05a1d2bcae66c85ec17a19d62a63a444a0cb41d56ef26bb2c36d62390e78803c4d29f0cd8fa8a3ec277c3ed400dbd94bab85ae3d5f89c4cf41a0680a0f94773dfab1b9841f3853f31b0888acdc40bf8f1d31437414bf7c2645e6dad84cb3ff042a3190286cf309f728b8d9eab57fd7de627e54d0f03d31f881836ef5c1293309d1f6126a5e57318269c433f194df754b3296ee8a8823a55422b528b150df10e37c9386ddb7cca66bcd092b3d23476012528c9c4537f4ae5f3e72f825026ddc4d127392f7d178aec452d50fe874d40b1a0a8993bbf1e405f9979b43a4b6b5e7e1a8d512c0dc58e4906685866c69791835f53edac1293915b7530088fbf5cea2c179211119820976fd0896e7053385b637bf331d12fc9810ec863fcbdcf0a5518c3810e1d89cfbea844bae66385498d08e971c415f3050dfc1fde62f923776ea6cc4f8d4b32129e15457702554ee808c519a65b5683e809c731f85751018afa6efa97ad62449cf1cdf8465d77d602145ed6b6bdf08ba8a39f4ed09de620d23314616d1c605325be59f6946f57e834c84699d59c5c1121d0257486d4d552910a157dba9383cc8b80b61fbd52fe185644dc223695d16001b48a8ca37b5f566d63c196e5f761e0d06925174af2526671c099a18f99c63b9147d3d36e65fb2f7cf40a6390f65e74bbaa33b94df0f83f1a9c1cc4a898203b4c1ddf0c113319a0173d486ff7e3a8b26b5073d122c6249d7efceafdd9d64fbd0623564ab0e4991a0835a356dd9d83163095e60e8e240ebd8085cc44bbfcb5406bd1e13841bc12e9c88540e53a523b138e698a9e33540f75dd4d2895020324f8b2a77a6806515bac685566c2158ecf5c5b77fafbdbdac5d43cd6a0fde3394d2ff7ed4a65847f3bb21542a0a1e1ce7e6d9430456b491854d9945f6ba16608d156a288fc4eb61a9809213ece685ca64b9278bbd2fee49f3d079ee8ae3b7902bd53b54aa24f22c8936c79b702cb87724b466e651c60f85f674041d146937d769a4b551921dc973ab3dcb0995cb356f84222666196f339c9a2546badcc71d16faafbbd91bba32f587d04ed0bee370007d21b69de30eee0088b5032f056f86c11974126c507453b344ce8266de5dc6db1fe1dca78fb20b0d5a70b3230ecca07ff19719826b8d1591702b764006e7bea83130dbd070b5d87e3f0287a27402bd7246e22e4c0b23e3fd62745b72be2315d77a10d77de8279d1bbc2d74beb36553bdef34a901d113bb4c40ea896ccb134eb52aefdff855a4018eb9b65b227315b7f587086c352f9c0c044bdab9b5d08177f38cb5b91576112b71f2d9ca532b0c7664022fcdc23b5191edb7db88faf1a6badd963fc89947d2a751c3284a0dbc15d50140b5ae22598e0b27595dfa232c248ebea16f845b129c2b6722028d4c3a625555377119e45fc8044d707a4aa326aed4d1c4caa99cea51c8d0ad440589df73af74503c8a2a700daa4ed8537f5ca5edc3024d7d11cb7e59903896932a82ff14a85fc3bc3ed98c8e243c7dcf6b4269993d169a877dee4a6694adb14910fa8c617597947f67401c82e72258bb8a3a8c2be21bf491bc4f155a36572da946496bc72f9f98d534471069de161e0d82a2f5337eed84aa080730b444f4fa5dbc579022ff80e7d1d3a6341ffb8956f25a7534eb6051d5905bf1cf10da116e08bac463a6403558662b7fe583e81febadee90e07ca6be43bf960a8a14ad2d948776731c4c68a6e202eff0ea2f388a0be6ae05e63b58e61f75f71e4b1f065966dd227873b5f44c9bfb53538f28ed337e95c2f61bf2d94feae86ba28fe7f50c129d703ac1005f9006edb045900310f215909f54aa76f3df1fbdc0df9f7f6939fc72b20f4043e7382b08c1da5f1036139367db50f92c4e3f91cef3202537ecf67de96bafff09236ab3d11b3bba0ab7e86cad7d3a6776d46597cebe17ca0a3758411886950066cf868bc3f27d512294bd7775d0ec84da3a8f251cac3cd19b0186c1a3341332495acedad6bd44df7fa82dfb93b6886aff147847d13b8e1e28cf970dc57179d230c0d0210d70acd6001b1353d35e1254f6601d498069d9f49294302b8f7f1b99b902e5522111717919ce9dff8a0cce12a51e49ff78b49049486d8f5103363091c7aa310c21a278d5ec6d653b17e96b95c71a904dcb6812cdacfc42328cf5511c22952cb311eae843c9b8fb465990c46ce9124dde9743b5380e30aa15f80b714c3ba6a9061f41e0490b71c043a3a0752587af9d987fd72bb032b61c7d867fee44cecdafa2f3e100a050827f8dcf161ec154eeb35c55cdcf177668a17f2e591b31978d42fdf87020771b847a137219945fbe718a406efb7c1eebbf444a3a26a2a4ee72c89e751196001028126755cbf1117a351884f0f8244a0296b559f8d973e8438e456387c0bcb75891aa18359bbe33abdaad029b40e0765e70a3f8db262f021e26f30964878241e12f9ed6a95804e18d0cdeff371633224cee1a609f69a4cedb610bb64ddbe11c86e80c5f59966ece70820a2502ffbb81ce606332b59d4295a9126de08c1aeb98aef6e9197d1343687bbb1606af631391d1b41ae59d3a405bbaa7cd158893c7b034e17fe58914b89ffe0c00d13ed215a6092f77fe7823c335fe1c86d7fd0ee0ce52787b012737dfc62a67b67ecf4403c1e6d747327d550e534e8481210766229956376268f1c7446b66235a65896008738aa0bdde7180d6da2367f69e6139ee912bd4c561c07355f157790026a4e8cecb2f8b2f3ed8da83f6cbde2837bd50a170c4458ad637c99b9b75ca956dcfdfe64d4c908f4f01d9876e32eeb2065c20c9eef87fabef33dfac577b3ed9a3f63434d5cf9c45b4531dd09e38558b3fd0bd0a09bc230a25f9382f53eaca607116c1c289da52dbc46cb2d1594a5a98e57508e5333ad3fd9116a701f86ee28527dfcc54b599634324bfab55a1b5a037244543b87fe33f81ce7c6a16f08795d949e32bd90f458fbbd3f1df5b002c5e9274710f6018a29bfc5a128cc9b41797af33e07f5dcb049a6429f47163c4687dd8178c87506f74e6fbc66e9ffd23578b0344ece5275c59bfef53158f85121956cdece2dcbe28b7c18aa6f4fae41efaf3895d93c96cdef78d5694c44ade081fb4b7d2defedf2f13f83361b9297342af97e4e47dfd5d9af90c64eeddb69a55aa484b2d189c4cbdb639292be1c5b3680c44f248b98af82a574ea1feeab947f710593e269769918905c58fe7598e77108a8441e630c7244faf123a39fd6414c8d71041d0d69a543fc035234b225ee0bbd8478054908ceb4936dbf2b9f0e3688e4aa86459289f6732c884168e9ab9cbd894cfc9dfac21a646aac24777173f8bd99504a762d7073cf34cfc72c4aa554f1f6aace5e687c116f9ee8b97a607ff962cf3c3572881f27a42d6b25a5365b4c9a7a6dd14bcd0564fecf01923b86e5b42551288ea1f65dc841b6a8feecfa2c456cc50a1a8d51c746d4dabda56e782ecea43b4974d5026a2e836ddbe0c1c206985ebf73b33f32ca2ea768db4f08bfb0f76e016919354808c1be55d96d3a3e72ceacf160b15e5541ddee7e49a9f53af89b7de0eaee8b24337aa4b5029fc0974ebea16c57639bce360b453078f0f43915c031868c22bc53f7519685e433f8a280c12b0a548350eb7642bc72cbdda295024e2767c351d6608bf9fe1bfa568e17f94f7afe29642f5899518c76231c08e0d651dcdca1f88b118ea1185a1a46209a89426f9aec6caa7c9bffaf8c7bbd770f82dd13907bb5b8ebe14c37675037c20cd3fa81469d151b798872e86085a26134f800ebac7360a8009674f6ef6cccfa0f30f87b8416e17369762b3948d51ccf3328b0041b5eb91904f0084aaaf20d1b6da82da9ef1c1774cc534b25c4dc0a0ee75aef2bd206f1133637a4773152ca95abe87e003e6689815767da812c00a12610362d57fa36713ffe9979662f57dc56ddbc8209c98896d775c74a913c12f88aa55a659fb2f6dcf1c29b3d9b1a7952a687d43213753afce9575c594bdfd632b8453dd6dbcc6b536e38bfaef3751f25721b890ce08a93d602fef0436a3ac15ced2b35c5f950a873b2e3fe998657275f1349fc7a034a5e1c653e0a6d40e068e37fce1f096f875b0a7e7a4fc2da5b1491125d1e90fe04ffa608f71a543c64050920ea356a96efa87cc2ce0ac289f664e1cbd0b93a30df82bad6dc91015b3efab2c9dc3490ab835aa307e8efc024b37e867e1d0bb2c340362529e2ac7f9f6da0745e490a84022e9de6159d5a7db06c87310c51378f59f6c99265d9113218143e7b4058c5c38b53f66ae688e27ac26ad94eb35818d32baea85fe1a8a53fa428b3feb8dda2afa440fef0ce91931cfa8ea28383d339656f381a5fe28f79d7423e2e65d8356143cab0b9c159dfb6db1c0176d962ceae91bdbef0e5eeaa33fe45c1d70d93fde96d63364ffff0c5d8bcce37d8ca4bc7b47ce191af34dbc73d3d8763d9ce7d34735f7211206d9be16f3ec946b94bc56def8827cc9341c71fb5ba50dc7587bf4e0042d7f6c7ee32cc47bd86f05e3c184292a9e0efb09c0ef5b956c7f48bbd91048d4375f2fa956fb922f1d4db67829d3004bf86cf202ff1c45cdd9c351a0ec60e511ba49e37542631d173f9ef80d02a878548aaf2664ff7b222e8a53314708e7e2f127907fc1518f4d1e6d734d62e9a94804ae5aa6cc45133ee3af2e731f022b2acc1c8a50dd71b95ab6dffcab3bfd78cd8df71387353305b18e286a608a0da92722df1701d7ab2601a10b10da0a175bec839e5d061cfdc28f2498e5d3a33d50211a710b72dd85118eb665c07716abfd06a61b54ea772e5115572da76c9deb8c3bffb9690294a44a7692754a53c68b74c5e3d812360f1c140e7d3ab66c3012d5086c37adbeac933125c9250533782bb4171d46c8280febac1f65bebcba733caae1c50ae0c9507d8290e1b9cb2fd6767e1969eaba462fcc1aee1d0649cef898d492a35912d11d8dd2a0bbac968008ede6411fc5ee5b1c88f47e0dd49fbd3653bd6104cfffcc7fe1873a46d14a12ffd93afbe8cc1928f06bdfe6969d0742b5569709cc8a80b856456aff1d04f37193b40a9242ab8b3ace37c866a16a3eeb7aaf471651dd50b8221b219ae11d24e09dca1d5cd2b46f1ec208793dcda275682a7cd76025974e595a1d3141d7748451b787b729128a83bd14fe17baec7a4b47d80a233131f263c70066027e20a9c1274a89d3867c9061b1190abb2a30e9755ab254e2d6f614d99971ef7c469d49179bb7c7a5190d3485302f3616ff30ae3dc2ecfda00b85fa1419d15887822bf835687b8eb4ce322040c86e2570144645d589d364ddb4e5df1681fa0a1c189d9d0ea5d4a239f12c46bc179b10b9dc8c9f8f8ab11d82dd7616e56ed991e3eb272ad721d7bd382591b4f6523d1fb8239a93163548e76de90b2bfdd33aef835855264704f30b106150905d6903f33ec226e43005c1be782c4479079e77402ab1165d8469c7c642e496fcdbf4c491f531178084ae55a7a24dc7fce2627faa0727384d2e6b52c01210db888568bdcf9a9863bddde7169aebd0c6490ada4a5bff5e7ba58c3654f4f577640a323bb7e41ed5e32881c18e27c0cd768aceb1d64fe5d9e014c68ac728660bcbcd32cf491f2d56761fab7ca2a7b047b508749864d63f643b9783dfcd6beaf7f0beedaa9d213de117caff3496b0e2c82857d6f317e1883c7a1d6bd92ce00a326955b9b63ffbc0fb091a6d9fccb5d1a95ddaeb7810108e89fedfcd4c30dba95eb39e44109f617bd022373c07bf2b9fd0530398291ff64b25af551bbf05311057cf42258384b537b3aebd0e6dee5c619786f4fdbbb203f3723d8de00a41bf72d8cd0ed7d66ffb5b45fb86844b28a56f47464879aada6970e599af532637b7b62032c4f6bc0e692668cf0762d7c01d5e8f3aff0c19bc907ed9df863713313ce6daed56a5e271ea737e5d3f35cf08f917eb4d22e2fff9136f65188766c35cec73872c970f1a04e7a153845853141e5288f68f6a385c353b42dd44d81f387ff389b34e9dafaeb81d8ccf23aca9b64dd4a8a3d765954cc82903b5b3423c130d56cd1d825bcaa295d7aa1b5f174c4b90098c33e163df7ac773bed9ca5335661a277ad9c0fc192576727e849e99a698bee41fc4bb64a0d3cd04c5432486cf9a2d3239ba3fd8a8aceb513a464a7a4b297dc2a24628c89594a5cf11405963baba82ba1769d528228e3bb96efdccba196650b73a5328a2e2300110d25be411786191ce947d95696cdc383234a736976f1ded1b9f38b122d2e0c2ab5705d0c34e95b550b2d09795f021d858f7a7a7f4218ba5598951692f2f17c9a594ce9662769c79cac63343f8fea8fc1f476e4b2c9f60e7e8e9db64b7bcdb8bbc91cac3cd040fe27ba72652f1f85cff4e0439246970aa5266f5cf47036bd4131dd07314b7b8cedd64b1f6333406ecbc6208450724b788ce868e5a77daf9a02f841e12ae2bd5218eff4b64dc444e2bd0dee8bb8b949833c688b9536dac972fc06a6b647aa61ed20072fe449a13b4f539f4c4278e87d0de873797dafb21ff6f2a76be6592a7e5ef49bcf9b584f4e2bd12681ec2d633ccf2fe268b780a2748c9812d507602ecc163824c0084980b71b7eb5f6805b6af5c0c810671323671f755c3437c4a1fb391fc488cf813102a8488a1560799a7f572b89c3de321a9ec323cf34fc6059cc1493ed0c21f54df25f2912014be905c30cd49db906e92f43618fdc6d88c8daebb61183ca362057508283e7d9a9ec210eb4afe7959d908a18ceba91ce09179d27427a4a00bdfcde4b5efad7f7dda7820c4f2f91a99147a09539220ad82571e082af95797c5648a81aac155b165e9b15c7a0cd0b960e0dc3357b7f2267a035f2e17351047f11ad46bdff31756b60810a668bbe59a7fd41df54a1c3dbf9d96f6f34d7d1e95613506d10f5ddc8263f41cb94af03b0feda8f0415c14ad7c48d77cc7b09e47a964592fcf3bea718f3d62ceb872efdc882cdc956fe5f49136e1d90fdb95def0d7c7c64e84b2ff8cc1633bd7d37c343c6fb815e01859e6d20b4c929aa5bc7df1157bbde91faaee67d2c1d9bfece87395404b91d2507d93b6d0215264c3c7f69e73b4cf7f7ef23a31c963368c25d89de27538114d35e9d10a2c93c6c61c0d1f77bcf9f4c9e3d02a2fe3731b897a930b9170f1b5ba570852a0a89a78f08630628f2b1b3abc7145450285388630f23087b54b4a23277b570e187f61dab49ca68132193b0e3b27f89de565c9d512eec6e800eb8bfda44e033b93b9a9819f9f3339be6fbb0124ba770e093e1d52d8291dd2b7b0d145a4ecd6090450f45af2da9c31ce7e265bd5a10654d436c155a7650bf8259b540c0043b8a6dea0d3ff0ab6cd5eac22f3198cce34849a239daab25f7b8a9e5243a25d5672c1c73cd26a0c186ceae51f2b412929f1db6b620659f3b162035dd14bbda00d0c664ab610e501e5fa061c6aa13d07fec63e255f404b15772eb8d2845be3ec728c4983a00605d4e6404e4d0957e1d80b0f0350392c2ce05e3d6c6900d91e3eb77d88e8573da2fa4ca6744e9b33ebc0d95f099ebd067dcf010f4b4388f1ab3a4234a3e65a6a598c7dcd1828373e6d1b9d59dca9cc2c3c48d2987462e</script></div><script src="/code/lib/blog-encrypt.js"></script><link href="/code/css/blog-encrypt.css" rel="stylesheet" type="text/css">]]></content>
      
      
      
        <tags>
            
            <tag> Data Structure </tag>
            
            <tag> Segment Tree </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Golang心情隨筆 #1</title>
      <link href="/code/gd-1/"/>
      <url>/code/gd-1/</url>
      
        <content type="html"><![CDATA[<!-- build time:Mon May 04 2020 16:50:35 GMT+0800 (Taipei Standard Time) --><p>我也有點忘記我最初為什麼會接觸 Golang 了<br>應該是被「內建平行運算」這個功能燒到了吧，就有點好奇平行運算要怎麼實現<br>像是以前寫的語言如 C++，或是摸過一陣子的 Swift 3, Perl, Python 等等都是線性處理的（？</p><a id="more"></a><p>而且學到的理由也是莫名其妙，我本來請我媽幫我訂書，我丟了幾本書單給她<br>其中好像就有一本Golang的語法書<br>雖然後來我跟他說那一本先不用，但是我媽還是幫我訂了<br>所以我就開始翻了起來<br>起初我最不能接受的一點是在用如 Scanf, Printf 等等的函數前面還要先打 package 名稱<br>像是我可以在 C 裡面 #include&lt;stdio.h&gt; 後，然後就直接用標頭檔裡面的函數<br>不過在 Golang 裡面做的事情像是這樣： stdio.Scanf ( “%d”, &amp;n ) 之類的<br>（嚴格來說應該是 fmt.Scanf ( “%d”, &amp;n )）<br>但是後來慢慢就習慣了，反正要說最麻煩的語言絕對是Java沒錯ww<br>明明就只是要 print 個 Hello, World! 要寫 class ww</p><p>.</p><p>最近比較有空，所以想說來複習一下 Golang 怎麼寫（？<br>論一個語言怎麼學最快，當然是學會基礎後拿它來做任何事情，像是打演算法競賽<br>或者是拿它來寫程設作業<br>什麼？只能用 C 寫喔<br>沒關係啊，我用 C 產一份 Golang 檔案出來不就好了（Ｘ</p><p>不過後來這個想法就不了了之了，因為沒有權限裝 Golang 的編譯器</p><!-- rebuild by neat -->]]></content>
      
      
      
        <tags>
            
            <tag> Golang </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>C語言中 char 字串轉換成數字</title>
      <link href="/code/C-atoi/"/>
      <url>/code/C-atoi/</url>
      
        <content type="html"><![CDATA[<!-- build time:Mon May 04 2020 16:50:35 GMT+0800 (Taipei Standard Time) --><h2 id="前言"><a class="header-anchor" href="#前言"></a>前言</h2><p>今天來簡單介紹一下要如何在C語言中把 char 字串轉換成數字</p><a id="more"></a><h2 id="方法"><a class="header-anchor" href="#方法"></a>方法</h2><ol><li>使用內建函數atoi</li><li>自己寫</li></ol><p>內建函數的用法可以去cpprefrence查到，所以這邊就不解說了<br>只有講自己寫的做法</p><h2 id="原理"><a class="header-anchor" href="#原理"></a>原理</h2><p>如果要在一個數字的尾端加上一位數，該如何操作？<br>有一種方法：先把原數字 * 10，然後再把那一位數加上去<br>所以就可以有下面這種code</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">translate</span> <span class="params">( <span class="keyword">char</span> *c, <span class="keyword">int</span> len )</span></span>&#123;</span><br><span class="line"><span class="keyword">int</span> i, res = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> ( i = <span class="number">0</span> ; i &lt; len ; i++ )&#123;</span><br><span class="line">res *= <span class="number">10</span>;</span><br><span class="line">res += ( c[i] - <span class="string">'0'</span> );</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>然後解說一下code中第五行<br>char之間的相減就是ASCii code的值的差<br>所以可以用這種方法把原本的數字還原出來</p><!-- rebuild by neat -->]]></content>
      
      
      
        <tags>
            
            <tag> C </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>[APCS] 2019年六月場實作題詳解</title>
      <link href="/code/APCS-19-06/"/>
      <url>/code/APCS-19-06/</url>
      
        <content type="html"><![CDATA[<!-- build time:Mon May 04 2020 16:50:35 GMT+0800 (Taipei Standard Time) --><h2 id="前言"><a class="header-anchor" href="#前言"></a>前言</h2><p>因為想要拼5 + 5，於是又報名了這次的APCS<br>至於成績如何那就晚點再說吧，算是個小伏筆（？</p><a id="more"></a><p>即便考場在家附近，我還是提早出門了<br>還以為考場一樣在成大的資工系大樓，還在想說為什麼今天進不去，不是有APCS嗎<br>趕快google一下才發現跑錯棚了，應該是在校區的另一邊<br>所以我又趕快跑過去，差一點點遲到<br>好險有提早出門（汗</p><img src="/code/APCS-19-06/img.jpg" title="因為不想要縮圖是我的成績單，所以我就放這張圖了"><h2 id="problem-1"><a class="header-anchor" href="#problem-1"></a>problem 1</h2><h3 id="題目"><a class="header-anchor" href="#題目"></a>題目</h3><p>給定兩場籃球賽雙方每一節的比分（每場籃球賽各四節<br>求出主場最終的輸贏</p><ol><li>兩場全贏：勝</li><li>兩場全敗：敗</li><li>一勝一敗：平手</li></ol><p>保證輸數皆為正整數且每場比賽不會有雙方比分相同的問題</p><h3 id="解法"><a class="header-anchor" href="#解法"></a>解法</h3><p>直接實作一下就好了</p><h3 id="code"><a class="header-anchor" href="#code"></a>code</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// by. MiohitoKiri5474</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    ios::sync_with_stdio ( <span class="literal">false</span> );</span><br><span class="line">    <span class="built_in">cin</span>.tie ( <span class="number">0</span> );</span><br><span class="line">    <span class="built_in">cout</span>.tie ( <span class="number">0</span> );</span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> a = <span class="number">0</span>, b = <span class="number">0</span>, ans = <span class="number">0</span>, swp;</span><br><span class="line">    <span class="keyword">for</span> ( <span class="keyword">int</span> i = <span class="number">0</span> ; i &lt; <span class="number">4</span> ; i++ )&#123;</span><br><span class="line">        <span class="built_in">cin</span> &gt;&gt; swp;</span><br><span class="line">        a += swp;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> ( <span class="keyword">int</span> i = <span class="number">0</span> ; i &lt; <span class="number">4</span> ; i++ )&#123;</span><br><span class="line">        <span class="built_in">cin</span> &gt;&gt; swp;</span><br><span class="line">        b += swp;</span><br><span class="line">    &#125;</span><br><span class="line">    ans += ( a &gt; b ? <span class="number">1</span> : <span class="number">-1</span> );</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    a = b = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> ( <span class="keyword">int</span> i = <span class="number">1</span> ; i &lt; <span class="number">4</span> ; i++ )&#123;</span><br><span class="line">        <span class="built_in">cin</span> &gt;&gt; swp;</span><br><span class="line">        a += swp;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> ( <span class="keyword">int</span> i = <span class="number">1</span> ; i &lt; <span class="number">4</span> ; i++ )&#123;</span><br><span class="line">        <span class="built_in">cin</span> &gt;&gt; swp;</span><br><span class="line">        b += swp;</span><br><span class="line">    &#125;</span><br><span class="line">    ans += ( a &gt; b ? <span class="number">1</span> : <span class="number">-1</span> );</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> ( !ans )</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; <span class="string">"Draw"</span>;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> ( ans &gt; <span class="number">0</span> )</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; <span class="string">"Win"</span>;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; <span class="string">"Lose"</span>;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">'\n'</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="problem-2"><a class="header-anchor" href="#problem-2"></a>problem 2</h2><h3 id="題目-v2"><a class="header-anchor" href="#題目-v2"></a>題目</h3><p>給定一張圖，起點為整張圖權重最小的點<br>並規定如果可以從點$A$移動到下一個點點$B$，若且唯若點$B$為點$A$的可連接點中，權重最小的點<br>然後路徑上點不能重複<br>求出路徑的總權重</p><h3 id="解法-v2"><a class="header-anchor" href="#解法-v2"></a>解法</h3><p>dfs裸題，UVa有類似的題目（題號我忘記了<br>反正就是模擬一次就對了（也沒有其他解法啊(ry</p><h3 id="code-v2"><a class="header-anchor" href="#code-v2"></a>code</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// by. MiohitoKiri5474</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxN = <span class="number">105</span>; <span class="comment">// 大小我忘記了</span></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> INF = <span class="number">0x3f3f3f3f</span>; <span class="comment">// INF大於值域，又可直接memset，方便又實用</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> LL;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> mp[maxN][maxN];</span><br><span class="line"></span><br><span class="line"><span class="function">LL <span class="title">dfs</span> <span class="params">( <span class="keyword">int</span> x, <span class="keyword">int</span> y, LL sum )</span></span>&#123;</span><br><span class="line">    <span class="comment">// 先找出最低點</span></span><br><span class="line">    <span class="keyword">int</span> mi = min ( min ( mp[x + <span class="number">1</span>][y], mp[x - <span class="number">1</span>][y] ), min ( mp[x][y + <span class="number">1</span>], mp[x][y - <span class="number">1</span>] ) );</span><br><span class="line">    sum += mp[x][y];</span><br><span class="line">    mp[x][y] = INF;</span><br><span class="line">    <span class="keyword">if</span> ( mi == INF )</span><br><span class="line">        <span class="keyword">return</span> sum;</span><br><span class="line">    <span class="keyword">if</span> ( mp[x + <span class="number">1</span>][y] == mi )</span><br><span class="line">        <span class="keyword">return</span> dfs ( x + <span class="number">1</span>, y, sum );</span><br><span class="line">    <span class="keyword">if</span> ( mp[x - <span class="number">1</span>][y] == mi )</span><br><span class="line">        <span class="keyword">return</span> dfs ( x - <span class="number">1</span>, y, sum );</span><br><span class="line">    <span class="keyword">if</span> ( mp[x][y + <span class="number">1</span>] == mi )</span><br><span class="line">        <span class="keyword">return</span> dfs ( x, y + <span class="number">1</span>, sum );</span><br><span class="line">    <span class="keyword">if</span> ( mp[x][y - <span class="number">1</span>] == mi )</span><br><span class="line">        <span class="keyword">return</span> dfs ( x, y - <span class="number">1</span>, sum );</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    ios::sync_with_stdio ( <span class="literal">false</span> );</span><br><span class="line">    <span class="built_in">cin</span>.tie ( <span class="number">0</span> );</span><br><span class="line">    <span class="built_in">cout</span>.tie ( <span class="number">0</span> );</span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> n, m, x, y, mi = INF;</span><br><span class="line">    <span class="built_in">memset</span> ( mp, INF, <span class="keyword">sizeof</span> mp );</span><br><span class="line">    <span class="built_in">cin</span> &gt;&gt; n &gt;&gt; m;</span><br><span class="line">    <span class="comment">// 1 index，可以直接免去判斷邊界的麻煩</span></span><br><span class="line">    <span class="keyword">for</span> ( <span class="keyword">int</span> i = <span class="number">1</span> ; i &lt;= n ; i++ )</span><br><span class="line">        <span class="keyword">for</span> ( <span class="keyword">int</span> j = <span class="number">1</span> ; j &lt;= m ; j++ )&#123;</span><br><span class="line">            <span class="built_in">cin</span> &gt;&gt; mp[i][j];</span><br><span class="line">            <span class="keyword">if</span> ( mi &gt; mp[i][j] )</span><br><span class="line">                mi = mp[i][j], x = i, y = j;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; dfs ( x, y, <span class="number">0</span> ) &lt;&lt; <span class="string">'\n'</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="problem-3"><a class="header-anchor" href="#problem-3"></a>problem 3</h2><h3 id="題目-v3"><a class="header-anchor" href="#題目-v3"></a>題目</h3><p>給定$N$個字串，且這$N$個字串只會由前$M$個字元組成，字元由$A$開始<br>請求出每一對可以組成互補字串的數量<br>且字串是一個集合，也就是說，即便元素有重複還是只算一個，也不計較排列<br>所以$AAB$與$AB$與$BA$都是相同的字串</p><h4 id="定義一下互補字串"><a class="header-anchor" href="#定義一下互補字串"></a>定義一下互補字串</h4><p>假設字串$A$中的元素沒有出現在字串$B$中<br>同時，字串$B$的元素也沒有出現在字串$A$中<br>則稱$A \text&amp; B$為互補字串</p><h3 id="解法-v3"><a class="header-anchor" href="#解法-v3"></a>解法</h3><h4 id="解法一：硬幹"><a class="header-anchor" href="#解法一：硬幹"></a>解法一：硬幹</h4><h5 id="說明"><a class="header-anchor" href="#說明"></a>說明</h5><p>之所以會稱為是硬幹，是因為在找查互補字串的時候是硬著做的</p><h5 id="code-v3"><a class="header-anchor" href="#code-v3"></a>code</h5><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// by. MiohitoKiri5474</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> F first</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> S second</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="built_in">map</span> &lt; <span class="built_in">string</span>, <span class="keyword">int</span> &gt; lib;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    ios::sync_with_stdio ( <span class="literal">false</span> );</span><br><span class="line">    <span class="built_in">cin</span>.tie ( <span class="number">0</span> );</span><br><span class="line">    <span class="built_in">cout</span>.tie ( <span class="number">0</span> );</span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> n, m, ans = <span class="number">0</span>;</span><br><span class="line">    <span class="built_in">string</span> str, basic;</span><br><span class="line">    <span class="keyword">char</span> c = <span class="string">'A'</span>;</span><br><span class="line">    <span class="built_in">cin</span> &gt;&gt; n &gt;&gt; m;</span><br><span class="line">    <span class="keyword">for</span> ( <span class="keyword">int</span> i = <span class="number">0</span> ; i &lt; m ; i++, c++ )</span><br><span class="line">        basic += c;</span><br><span class="line">    <span class="keyword">while</span> ( n-- )&#123;</span><br><span class="line">        <span class="built_in">cin</span> &gt;&gt; str;</span><br><span class="line">        <span class="comment">// 這邊為了要把順序都統一，所以先做一下排序</span></span><br><span class="line">        sort ( str.begin(), str.end() );</span><br><span class="line">        <span class="comment">// 這邊則是要把重複的字元壓掉</span></span><br><span class="line">        str.erase ( unique ( str.begin(), str.end() ), str.end() );</span><br><span class="line">        lib[str]++;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> ( <span class="keyword">auto</span> j: lib )&#123;</span><br><span class="line">        str = basic;</span><br><span class="line">        <span class="comment">// 把出現過的直接刪掉</span></span><br><span class="line">        <span class="keyword">for</span> ( <span class="keyword">auto</span> i: j.F )</span><br><span class="line">            str.erase ( lower_bound ( str.begin(), str.end(), i ) );</span><br><span class="line">        ans += j.S * lib[str];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 因為會重複計算到兩次    </span></span><br><span class="line">    ans /= <span class="number">2</span>;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; ans &lt;&lt; <span class="string">'\n'</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="方法二：Xor"><a class="header-anchor" href="#方法二：Xor"></a>方法二：Xor</h4><h5 id="說明-v2"><a class="header-anchor" href="#說明-v2"></a>說明</h5><p>因為原本的方法太智障了（？<br>如果不是因為資料量小可以這樣做，資料量一大直接吃土</p><p>出來之後聽到有人是這樣做的，有點類似Hash的做法<br>把字串轉成二進位，如果這個字元有出現過就是$1$，反之，就是$0$<br>然後為了方便運算會把這個二進位reverse</p><p>也就是說，$ACD$會轉成$(1101)_2$，而$ABD$會轉成$(1011)_2$，$BD$會轉成$(1010)_2$<br>然後再把二進位轉成十進位<br>這樣就可以很輕鬆的用一個$int$來作儲存了，而且可以直接用$Xor$來取互補字串</p><h5 id="code-v4"><a class="header-anchor" href="#code-v4"></a>code</h5><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// by. MiohitoKiri5474</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> F first</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> S second</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="built_in">map</span> &lt; <span class="keyword">int</span>, <span class="keyword">int</span> &gt; lib;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">translate</span> <span class="params">( <span class="built_in">string</span> str )</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> res = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> ( <span class="keyword">auto</span> i: str )</span><br><span class="line">        res |= ( <span class="number">1</span> &lt;&lt; ( i - <span class="string">'A'</span> ) );</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    ios::sync_with_stdio ( <span class="literal">false</span> );</span><br><span class="line">    <span class="built_in">cin</span>.tie ( <span class="number">0</span> );</span><br><span class="line">    <span class="built_in">cout</span>.tie ( <span class="number">0</span> );</span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> n, m, ans = <span class="number">0</span>, ori = <span class="number">0</span>;</span><br><span class="line">    <span class="built_in">string</span> str;</span><br><span class="line">    <span class="built_in">cin</span> &gt;&gt; n &gt;&gt; m;</span><br><span class="line">    <span class="keyword">for</span> ( <span class="keyword">int</span> i = <span class="number">0</span> ; i &lt; m ; i++ )</span><br><span class="line">        ori |= ( <span class="number">1</span> &lt;&lt; i );</span><br><span class="line">    <span class="keyword">while</span> ( n-- )&#123;</span><br><span class="line">        <span class="built_in">cin</span> &gt;&gt; str;</span><br><span class="line">        <span class="comment">// 這邊為了要把順序都統一，所以先做一下排序</span></span><br><span class="line">        sort ( str.begin(), str.end() );</span><br><span class="line">        <span class="comment">// 這邊則是要把重複的字元壓掉</span></span><br><span class="line">        str.erase ( unique ( str.begin(), str.end() ), str.end() );</span><br><span class="line">        lib[translate ( str )]++;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> ( <span class="keyword">auto</span> j: lib )</span><br><span class="line">        ans += ( j.S * lib[ori ^ j.F] );</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 因為會重複計算到兩次    </span></span><br><span class="line">    ans &gt;&gt;= <span class="number">1</span>;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; ans &lt;&lt; <span class="string">'\n'</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>注意，這份code並沒有經過詳細測試，可能有誤</strong></p><h2 id="problem-4"><a class="header-anchor" href="#problem-4"></a>problem 4</h2><h3 id="題目-v4"><a class="header-anchor" href="#題目-v4"></a>題目</h3><p>給定一個長度為$N$的序列，求給定數字$M$長度，且其中所有數字都不重複的連續子序列數量</p><h3 id="解法-v4"><a class="header-anchor" href="#解法-v4"></a>解法</h3><p>Slide Window裸題，不過關於實作又有兩種做法</p><h4 id="方法一：固定Window大小"><a class="header-anchor" href="#方法一：固定Window大小"></a>方法一：固定Window大小</h4><p>把window大小固定為$M$，並且開一個set紀錄這個window的數字<br>要把數字從前端pop掉時，記得檢查這個數字在後頭是否出現過<br>然後不想要用map，所以離散化一下，這樣就可以用陣列儲存了</p><h4 id="code-v5"><a class="header-anchor" href="#code-v5"></a>code</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// by. MiohitoKiri5474</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxN = <span class="number">100005</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> cnt[maxN];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    ios::sync_with_stdio ( <span class="literal">false</span> );</span><br><span class="line">    <span class="built_in">cin</span>.tie ( <span class="number">0</span> );</span><br><span class="line">    <span class="built_in">cout</span>.tie ( <span class="number">0</span> );</span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> n, m, ans = <span class="number">0</span>;</span><br><span class="line">    <span class="built_in">cin</span> &gt;&gt; n &gt;&gt; m;</span><br><span class="line">    <span class="built_in">vector</span> &lt; <span class="keyword">int</span> &gt; data ( n ), lib;</span><br><span class="line">    <span class="keyword">for</span> ( <span class="keyword">auto</span> &amp;i: data )</span><br><span class="line">        <span class="built_in">cin</span> &gt;&gt; i;</span><br><span class="line">    <span class="comment">// 離散化</span></span><br><span class="line">    lib = data;</span><br><span class="line">    sort ( lib.begin(), lib.end() );</span><br><span class="line">    lib.erase ( unique ( lib.begin(), lib.end() ), lib.end() );</span><br><span class="line">    <span class="keyword">for</span> ( <span class="keyword">auto</span> &amp;i: data )</span><br><span class="line">        i = lower_bound ( lib.begin(), lib.end(), i ) - lib.begin();</span><br><span class="line"></span><br><span class="line">    <span class="built_in">queue</span> &lt; <span class="keyword">int</span> &gt; q;</span><br><span class="line">    <span class="built_in">set</span> &lt; <span class="keyword">int</span> &gt; s;</span><br><span class="line">    <span class="keyword">for</span> ( <span class="keyword">int</span> i = <span class="number">0</span> ; i &lt; n ; i++ )&#123;</span><br><span class="line">        q.push ( data[i] );</span><br><span class="line">        s.insert ( data[i] );</span><br><span class="line">        cnt[data[i]]++;</span><br><span class="line">        <span class="keyword">if</span> ( q.size() &gt;= m )&#123;</span><br><span class="line">            cnt[q.front()]--;</span><br><span class="line">            <span class="keyword">if</span> ( !cnt[q.front()] )</span><br><span class="line">                s.erase ( q.front() );</span><br><span class="line">            q.pop();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> ( s.size() == m )</span><br><span class="line">            ans++;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; ans &lt;&lt; <span class="string">'\n'</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="方法二：不固定的window大小"><a class="header-anchor" href="#方法二：不固定的window大小"></a>方法二：不固定的window大小</h4><p>此方法由吳邦一教授提出（<a href="https://brian.su/r/APCS-2019-06-P4" target="_blank" rel="noopener">原文連結</a>）<br>由左往右把數字push進window，如果遇到已經在window裡面的數字，則一路pop到該數字離開window為止</p><h4 id="code-v6"><a class="header-anchor" href="#code-v6"></a>code</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// by. MiohitoKiri5474</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxN = <span class="number">100005</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> cnt[maxN];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    ios::sync_with_stdio ( <span class="literal">false</span> );</span><br><span class="line">    <span class="built_in">cin</span>.tie ( <span class="number">0</span> );</span><br><span class="line">    <span class="built_in">cout</span>.tie ( <span class="number">0</span> );</span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> n, m, ans = <span class="number">0</span>;</span><br><span class="line">    <span class="built_in">cin</span> &gt;&gt; n &gt;&gt; m;</span><br><span class="line">    <span class="built_in">vector</span> &lt; <span class="keyword">int</span> &gt; data ( n ), lib;</span><br><span class="line">    <span class="keyword">for</span> ( <span class="keyword">auto</span> &amp;i: data )</span><br><span class="line">        <span class="built_in">cin</span> &gt;&gt; i;</span><br><span class="line">    <span class="comment">// 離散化</span></span><br><span class="line">    lib = data;</span><br><span class="line">    sort ( lib.begin(), lib.end() );</span><br><span class="line">    lib.erase ( unique ( lib.begin(), lib.end() ), lib.end() );</span><br><span class="line">    <span class="keyword">for</span> ( <span class="keyword">auto</span> &amp;i: data )</span><br><span class="line">        i = lower_bound ( lib.begin(), lib.end(), i ) - lib.begin();</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 這邊的話就不用set了    </span></span><br><span class="line">    <span class="built_in">queue</span> &lt; <span class="keyword">int</span> &gt; q;</span><br><span class="line">    <span class="keyword">for</span> ( <span class="keyword">int</span> i = <span class="number">0</span> ; i &lt; n ; i++ )&#123;</span><br><span class="line">        <span class="comment">// 不斷pop直到這個數字前面沒有出現過</span></span><br><span class="line">        <span class="keyword">while</span> ( !q.empty() &amp;&amp; cnt[data[i]] )&#123;</span><br><span class="line">            cnt[q.front()]--;</span><br><span class="line">            q.pop();</span><br><span class="line">        &#125;</span><br><span class="line">        q.push ( data[i] );</span><br><span class="line">        cnt[data[i]]++;</span><br><span class="line">        <span class="keyword">if</span> ( q.size() == m )</span><br><span class="line">            ans++;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; ans &lt;&lt; <span class="string">'\n'</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="後記"><a class="header-anchor" href="#後記"></a>後記</h2><p>其實我把所有題目寫完之後，大概才過41分鐘<br>然後為了要確定code都沒有爛，還特地多花一個小時半左右吧，在寫對拍，想要抓抓看bug<br>接著我就發現我在裡面多花快一個半小時，然後一個字元都沒有改到<br>也就是說，我在裡面燒機燒了一個半小時然後產量是零<br>抓到，澪人桐是燒機大師<br>早就知道出來玩手機算了 = =</p><p>.</p><p>看到這邊多多少少都會對我的成績有點興趣吧（？<br>（不然如果他成績跟垃圾一樣，到底浪費時間看這篇文章幹嘛<br>話不多說我直接上圖好了</p><p><img src="score.png" alt=""></p><p>差一題觀念5+5<br>搞什麼 = =</p><p>以前我有過觀念五，但是那次實作沒有考好，這次換觀念沒有五，我該注意什麼<br>（欸，差不多是一年前的六月場欸OAO</p><p>雖然按照官方的說法這樣也算是5+5啦，不過沒有單場5+5真的有點可惜<br>那麼今天就到這邊了，謝謝各位今天的閱讀<br>如果需要更多的說明（無論是否是這次的題目，或是該如何準備APCS）的話，都歡迎寫email給我<br>我的email可以在我的<a href="https://miohitokiri5474.github.io/code/about/">個人頁面</a>找到<br>p.s. 我今天寫好長的文章喔，到這邊已經430行了</p><p>本來用Typora編輯，那個md編輯軟體好像會自動幫我加上一大堆的空行，大概就是打完一行就會有一行空行<br>所以原本的文章看起來很很空<br>還需要自己手動調整，有點小麻煩<br>不過他可以即時顯示md的渲染結果，真的讓人難以抉擇</p><h2 id="更新（2019-07-04-10-28）"><a class="header-anchor" href="#更新（2019-07-04-10-28）"></a>更新（2019/07/04 10:28）</h2><p>之前可以查詢成績好像是bug，官方是說今天早上十點才可以查<br>剛剛查了一下，發現級距出來了，在這邊附上（上次查的沒有級距可以看）</p><img src="/code/APCS-19-06/per.png" title="2019年六月場級距"><h2 id="圖片出處"><a class="header-anchor" href="#圖片出處"></a>圖片出處</h2><ol><li>紅色鳥居：神奈川縣蘆之湖<a href="https://www.instagram.com/kaji_nori06/" target="_blank" rel="noopener">kaji_nori06</a></li><li>成績單。。。等等，這張就我的成績單啊，沒有什麼出處問題吧</li><li>級距。。。啊就從成績單上截圖截下來的啊 = =</li></ol><!-- rebuild by neat -->]]></content>
      
      
      
        <tags>
            
            <tag> APCS </tag>
            
            <tag> Full Contest Solution </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Google Code Jam 2019 Qualification Round</title>
      <link href="/code/GCJ-2019-QuR/"/>
      <url>/code/GCJ-2019-QuR/</url>
      
        <content type="html"><![CDATA[<!-- build time:Mon May 04 2020 16:50:35 GMT+0800 (Taipei Standard Time) --><h2 id="前言"><a class="header-anchor" href="#前言"></a>前言</h2><p>我到當天下午五點我才想到有 GCJ 的 Qualification Round （資格賽）<br>然後我六點有補習，差點就要像去年一樣頂著睡意惺忪的眼睛打了</p><p>只要能夠在這個 Round 拿到 $30$ 分就可以打 Round 1 了</p><a id="more"></a><p>下一場是在這週六晚上九點～十一點半<br>撞到補習有點慘（九點下課），我想一下要怎麼跟老師交涉一下，讓我提早走</p><p>總之，過 Qualification Round 應該就算比去年好了<br>去年在耍廢直接爆炸。。。</p><p>希望今年可以去 Round 2</p><p>先放上這次的<a href="https://codingcompetitions.withgoogle.com/codejam/round/0000000000051705" target="_blank" rel="noopener">題目連結</a></p><h2 id="problem-A"><a class="header-anchor" href="#problem-A"></a>problem A</h2><h3 id="題目"><a class="header-anchor" href="#題目"></a>題目</h3><p>現在有個鍵盤的數字，現在數字 $4$ 的按鍵壞了<br>然而現在有數字要輸入，求分成兩個數字其總和等於原數、且兩數字中皆不可出現 $4$<br><strong>多筆測資</strong></p><h3 id="解法"><a class="header-anchor" href="#解法"></a>解法</h3><p>顯而易見的，這是大水題，輸入還開到 ${10} ^ {100}$<br>一臉就是在跟你說開 string 存啊<br>所以我們先把數字讀進來，然後檢查每個 digital ，遇到 $4$ 就先把他拆成 $3$ 跟 $1$<br>然後把這兩個數字輸出<br><strong>注意不能有前導零</strong></p><h3 id="code"><a class="header-anchor" href="#code"></a>code</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// by. MiohitoKiri5474</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    ios::sync_with_stdio ( <span class="literal">false</span> );</span><br><span class="line">    <span class="built_in">cin</span>.tie ( <span class="number">0</span> );</span><br><span class="line">    <span class="built_in">cout</span>.tie ( <span class="number">0</span> );</span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> t, mi;</span><br><span class="line">    <span class="built_in">string</span> n;</span><br><span class="line">    <span class="built_in">cin</span> &gt;&gt; t;</span><br><span class="line">    <span class="keyword">for</span> ( <span class="keyword">int</span> tms = <span class="number">1</span> ; tms &lt;= t ; tms++ )&#123;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; <span class="string">"Case #"</span> &lt;&lt; tms &lt;&lt; <span class="string">": "</span>;</span><br><span class="line">        <span class="built_in">cin</span> &gt;&gt; n;</span><br><span class="line">        mi = INF;</span><br><span class="line">        <span class="keyword">for</span> ( <span class="keyword">int</span> i = <span class="number">0</span> ; i &lt; n.size() ; i++ )&#123;</span><br><span class="line">            <span class="keyword">if</span> ( n[i] == <span class="string">'4'</span> )&#123;</span><br><span class="line">                mi = min ( mi, i );</span><br><span class="line">                <span class="built_in">cout</span> &lt;&lt; <span class="string">'3'</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">                <span class="built_in">cout</span> &lt;&lt; n[i];</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; <span class="string">' '</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> ( <span class="keyword">int</span> i = mi ; i &lt; n.size() ; i++ )</span><br><span class="line">            <span class="built_in">cout</span> &lt;&lt; ( n[i] == <span class="string">'4'</span> )</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; <span class="string">'\n'</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="後記"><a class="header-anchor" href="#後記"></a>後記</h3><p>我還沒有注意到這題有保證輸入有 $4$<br>也沒有注意到這題要求輸出都要是正整數<br>運氣真好，歪歪得正</p><h2 id="problem-B"><a class="header-anchor" href="#problem-B"></a>problem B</h2><h3 id="題目-v2"><a class="header-anchor" href="#題目-v2"></a>題目</h3><p>給定一張二維圖以及一條從左上到右下的路線<br>求一條不重複的另外一條路線<br>所謂的路線重複是指 $a \to b$ 這個邊同時出現在兩條路線中<br>然後輸入都是SESE這樣，代表從起點開始他往哪些位置走<br>並且保證只會往東（右）以及往南（下）走<br>詳細請看這張圖<br><img src="pB.jpg" alt=""></p><h3 id="解法-v2"><a class="header-anchor" href="#解法-v2"></a>解法</h3><h4 id="O-N-2"><a class="header-anchor" href="#O-N-2"></a>$O ( N ^ 2 )$</h4><p>垃圾如我，肯定只會寫 $N ^ 2$ 的解法<br>簡單來說就是 dp<br>我一開始定義 $dp[i][j]$ 代表從 $( 1, 1 )$ 走到 $( i, j )$ 需要經過的路線，用 string 存<br>然後就 MLE 了，所以我又加上滾動（因為每次要轉移只會用到上一行的資料，也就是說再前面的資料通通丟掉沒關係）<br>接著又 TLE 了，因為 string + char 這樣的操作本來就容易 TLE （？）<br>所以我又改成， $dp[i][j]$ 應該從哪轉移過來（紀錄 $S$ 或 $E$ ），最後從終點回朔回起點</p><p>不過這樣做有小地方需要注意一下<br>理論上來說，$dp[i][j]$ 可以從 $dp[i - 1][j]$ &amp; $dp[i][j - 1]$ 轉移過來<br>所以無法處理題目要求的不重複路徑，於是我先把原本的路徑打印在圖上<br>如果 $( i, j )$ 有被原路徑經過，那麼就不要從也有被經過的點轉移過來<br>但是因為我懶得寫特判<del>（明明就是自己懶）</del>所以即便這個點無法從起點到達，還是會有路線（但是回朔回去可能不會到起點）<br>因此又要特判（相較之下好寫很多），如果兩邊都可以拿，拿路徑比較長的那一邊來做轉移<br>啊如果還是都可以拿，那就真的隨便了</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// by. MiohitoKiri5474</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> F first</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> S second</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> mp make_pair</span></span><br><span class="line"><span class="keyword">typedef</span> pair &lt; short, <span class="keyword">char</span> &gt; psc;</span><br><span class="line"></span><br><span class="line"><span class="keyword">bool</span> lib[maxN][maxN];</span><br><span class="line">psc str[maxN][maxN];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    ios::sync_with_stdio ( <span class="literal">false</span> );</span><br><span class="line">    <span class="built_in">cin</span>.tie ( <span class="number">0</span> );</span><br><span class="line">    <span class="built_in">cout</span>.tie ( <span class="number">0</span> );</span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> t, n, x, y;</span><br><span class="line">    <span class="built_in">string</span> data;</span><br><span class="line">    <span class="built_in">cin</span> &gt;&gt; t;</span><br><span class="line">    <span class="keyword">for</span> ( <span class="keyword">int</span> tms = <span class="number">1</span> ; tms &lt;= t ; tms++ )&#123;</span><br><span class="line">        <span class="built_in">cin</span> &gt;&gt; n &gt;&gt; data;</span><br><span class="line">        <span class="built_in">memset</span> ( lib, <span class="number">0</span>, <span class="keyword">sizeof</span> lib );</span><br><span class="line">        <span class="keyword">for</span> ( <span class="keyword">int</span> i = <span class="number">0</span> ; i &lt;= n ; i++ )&#123;</span><br><span class="line">            <span class="keyword">for</span> ( <span class="keyword">int</span> j = <span class="number">0</span> ; j &lt;= n ; j++ )&#123;</span><br><span class="line">                str[i][j] = mp ( <span class="number">0</span>, <span class="string">' '</span> );</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        x = <span class="number">1</span>, y = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span> ( <span class="keyword">auto</span> i: data )&#123;</span><br><span class="line">            lib[x][y] = <span class="literal">true</span>;</span><br><span class="line">            i == <span class="string">'S'</span> ? x++ : y++;</span><br><span class="line">        &#125;</span><br><span class="line">        lib[x][y] = <span class="literal">true</span>;</span><br><span class="line">        str[<span class="number">1</span>][<span class="number">1</span>] = mp ( <span class="number">0</span>, <span class="string">' '</span> );</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> ( <span class="keyword">int</span> i = <span class="number">2</span> ; i &lt;= n ; i++ )&#123;</span><br><span class="line">            <span class="keyword">if</span> ( lib[<span class="number">1</span>][i] )&#123;</span><br><span class="line">                <span class="keyword">if</span> ( !lib[<span class="number">1</span>][i - <span class="number">1</span>] )&#123;</span><br><span class="line">                    str[<span class="number">1</span>][i] = str[<span class="number">1</span>][i - <span class="number">1</span>];</span><br><span class="line">                    str[<span class="number">1</span>][i].F++;</span><br><span class="line">                    str[<span class="number">1</span>][i].S = <span class="string">'E'</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span>&#123;</span><br><span class="line">                str[<span class="number">1</span>][i] = str[<span class="number">1</span>][i - <span class="number">1</span>];</span><br><span class="line">                str[<span class="number">1</span>][i].F++;</span><br><span class="line">                str[<span class="number">1</span>][i].S = <span class="string">'E'</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> ( <span class="keyword">int</span> i = <span class="number">2</span> ; i &lt;= n ; i++ )&#123;</span><br><span class="line">            <span class="keyword">if</span> ( lib[i][<span class="number">1</span>] )&#123;</span><br><span class="line">                <span class="keyword">if</span> ( !lib[i - <span class="number">1</span>][<span class="number">1</span>] )&#123;</span><br><span class="line">                    str[i][<span class="number">1</span>] = str[i - <span class="number">1</span>][<span class="number">1</span>];</span><br><span class="line">                    str[i][<span class="number">1</span>].F++;</span><br><span class="line">                    str[i][<span class="number">1</span>].S = <span class="string">'S'</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span>&#123;</span><br><span class="line">                str[i][<span class="number">1</span>] = str[i - <span class="number">1</span>][<span class="number">1</span>];</span><br><span class="line">                str[i][<span class="number">1</span>].F++;</span><br><span class="line">                str[i][<span class="number">1</span>].S = <span class="string">'S'</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">for</span> ( <span class="keyword">int</span> j = <span class="number">2</span> ; j &lt;= n ; j++ )&#123;</span><br><span class="line">                <span class="keyword">if</span> ( lib[i][j] )&#123;</span><br><span class="line">                    <span class="keyword">if</span> ( !lib[i][j - <span class="number">1</span>] )&#123;</span><br><span class="line">                        str[i][j] = str[i][j - <span class="number">1</span>];</span><br><span class="line">                        str[i][j].F++;</span><br><span class="line">                        str[i][j].S = <span class="string">'E'</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="keyword">else</span>&#123;</span><br><span class="line">                        str[i][j] = str[i - <span class="number">1</span>][j];</span><br><span class="line">                        str[i][j].F++;</span><br><span class="line">                        str[i][j].S = <span class="string">'S'</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">else</span>&#123;</span><br><span class="line">                    <span class="keyword">if</span> ( str[i][j - <span class="number">1</span>].F &gt; str[i - <span class="number">1</span>][j].F )&#123;</span><br><span class="line">                        str[i][j] = str[i][j - <span class="number">1</span>];</span><br><span class="line">                        str[i][j].S = <span class="string">'E'</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="keyword">else</span>&#123;</span><br><span class="line">                        str[i][j] = str[i - <span class="number">1</span>][j];</span><br><span class="line">                        str[i][j].S = <span class="string">'S'</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                    str[i][j].F++;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        data = <span class="string">""</span>;</span><br><span class="line">        x = y = n;</span><br><span class="line">        <span class="keyword">while</span> ( str[x][y].S != <span class="string">' '</span> )&#123;</span><br><span class="line">            data += str[x][y].S;</span><br><span class="line">            str[x][y].S == <span class="string">'S'</span> ? x-- : y--;</span><br><span class="line">        &#125;</span><br><span class="line">        reverse ( data.begin(), data.end() );</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; <span class="string">"Case #"</span> &lt;&lt; tms &lt;&lt; <span class="string">": "</span> &lt;&lt; data &lt;&lt; <span class="string">'\n'</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="O-N"><a class="header-anchor" href="#O-N"></a>$O ( N )$</h4><p>沒錯，$O ( N )$<br>我後來才發現我TMD被哏到了<br>只要把 S E 反轉就好啊<br>讀到 S 輸出 E ，反之讀到 E 輸出 S<br>這樣就會變成從左上到右下的對稱<br>所以路線不會重複。。。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// by. MiohitoKiri5474</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    ios::sync_with_stdio ( <span class="literal">false</span> );</span><br><span class="line">    <span class="built_in">cin</span>.tie ( <span class="number">0</span> );</span><br><span class="line">    <span class="built_in">cout</span>.tie ( <span class="number">0</span> );</span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> t, n;</span><br><span class="line">    <span class="built_in">string</span> str;</span><br><span class="line">    <span class="built_in">cin</span> &gt;&gt; t;</span><br><span class="line">    <span class="keyword">while</span> ( t-- &amp;&amp; <span class="built_in">cin</span> &gt;&gt; n &gt;&gt; str )&#123;</span><br><span class="line">        <span class="keyword">for</span> ( <span class="keyword">auto</span> i: str )</span><br><span class="line">            <span class="built_in">cout</span> &lt;&lt; ( i == <span class="string">'S'</span> ? <span class="string">'E'</span> : <span class="string">'S'</span> );</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; <span class="string">'\n'</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="problem-C"><a class="header-anchor" href="#problem-C"></a>problem C</h2><p>感謝 <a href="https://www.facebook.com/enminghuang1" target="_blank" rel="noopener">En-ming Huang</a> 大大提供<br>要 solution 請去找他</p><h3 id="code-v2"><a class="header-anchor" href="#code-v2"></a>code</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// by. MiohitoKiri5474</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> input[maxN], l;</span><br><span class="line"><span class="keyword">char</span> out[maxN][<span class="number">2</span>], print[maxN];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">check</span> <span class="params">( <span class="keyword">int</span> idx, <span class="keyword">char</span> now )</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> ( idx == l )&#123;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; print &lt;&lt; <span class="string">'\n'</span>;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> ( <span class="keyword">int</span> i = <span class="number">0</span> ; i &lt; <span class="number">2</span> ; i++ )&#123;</span><br><span class="line">        <span class="keyword">if</span> ( out[idx][i] != now )</span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line">        print[idx] = out[idx][i];</span><br><span class="line">        <span class="keyword">if</span> ( idx == l - <span class="number">1</span> )</span><br><span class="line">            print[idx + <span class="number">1</span>] = out[idx][!i];</span><br><span class="line">        <span class="keyword">return</span> check ( idx + <span class="number">1</span>, out[idx][!i] );</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    ios::sync_with_stdio ( <span class="literal">false</span> );</span><br><span class="line">    <span class="built_in">cin</span>.tie ( <span class="number">0</span> );</span><br><span class="line">    <span class="built_in">cout</span>.tie ( <span class="number">0</span> );</span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> t, n, idx;</span><br><span class="line">    <span class="built_in">set</span> &lt; <span class="keyword">int</span> &gt; prime;</span><br><span class="line">    <span class="built_in">map</span> &lt; <span class="keyword">int</span>, <span class="keyword">char</span> &gt; lib;</span><br><span class="line">    <span class="built_in">cin</span> &gt;&gt; t;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= t; i++)&#123;</span><br><span class="line">        <span class="built_in">cin</span> &gt;&gt; n &gt;&gt; l;</span><br><span class="line">        <span class="built_in">memset</span> ( print, <span class="number">0</span>, <span class="keyword">sizeof</span> print );</span><br><span class="line">        prime.clear();</span><br><span class="line">        lib.clear();</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; <span class="string">"Case #"</span> &lt;&lt; i &lt;&lt; <span class="string">": "</span>;</span><br><span class="line">        <span class="keyword">for</span> ( <span class="keyword">int</span> i = <span class="number">0</span> ; i &lt; l ; i++ )&#123;</span><br><span class="line">            <span class="built_in">cin</span> &gt;&gt; input[i];</span><br><span class="line">            <span class="keyword">for</span> ( <span class="keyword">int</span> j = <span class="number">2</span> ; j &lt;= n ; j++ )&#123;</span><br><span class="line">                <span class="keyword">if</span> ( input[i] % j == <span class="number">0</span> )&#123;</span><br><span class="line">                    prime.insert ( j );</span><br><span class="line">                    prime.insert ( input[i] / j );</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        idx = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> ( <span class="keyword">auto</span> i: prime )</span><br><span class="line">            lib[i] = <span class="string">'A'</span> + idx++;</span><br><span class="line">        <span class="keyword">for</span> ( <span class="keyword">int</span> i = <span class="number">0</span> ; i &lt; l ; i++ )</span><br><span class="line">            <span class="keyword">for</span> ( <span class="keyword">int</span> j = <span class="number">2</span> ; j &lt;= n ; j++ )</span><br><span class="line">                <span class="keyword">if</span> ( input[i] % j == <span class="number">0</span> )&#123;</span><br><span class="line">                    out[i][<span class="number">0</span>] = lib[j];</span><br><span class="line">                    out[i][<span class="number">1</span>] = lib[input[i] / j];</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">        <span class="keyword">for</span> ( <span class="keyword">int</span> i = <span class="number">0</span> ; i &lt; <span class="number">2</span> ; i++ )</span><br><span class="line">            <span class="keyword">if</span> ( check ( <span class="number">0</span>, out[<span class="number">0</span>][i] ) )</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="後記-v2"><a class="header-anchor" href="#後記-v2"></a>後記</h2><p>這場打起來感覺好廢<br>最近比較少寫演算法競賽的題目<br>幾乎都是在讀新東西<br>手感感覺不是很好<br>教練，我想要拿 T-Shirt<br>p.s. GCJ 只要進 Round 3 就可以拿到一件 T-Shirt。。。只是聽說要很久才會拿到？！<br>下一場 1A 感覺不是很好打，因為是第一場，沒意外應該會有不少人去打<br>而且時間上來說是 CodeForces 的 usaul time<br>中國人應該不少（汗<br>1A 1B 1C 要有一場前 1500 名才能進去啊（遠望<br>覺得有點難@@</p><p>最後放個計分板截圖<br><img src="scb.jpg" alt=""></p><p>寫完這篇文章，在本地端用 hexo 編譯預覽出來後<br>發現圖片邊緣有白框<br>。。。<br>好樣的，我又要來修 css 配置了<br>工作量 up up<br>= =</p><!-- rebuild by neat -->]]></content>
      
      
      
        <tags>
            
            <tag> Full Contest Solution </tag>
            
            <tag> GCJ </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>[TIOJ][1909] 勇者出征</title>
      <link href="/code/TIOJ-1909/"/>
      <url>/code/TIOJ-1909/</url>
      
        <content type="html"><![CDATA[<!-- build time:Mon May 04 2020 16:50:35 GMT+0800 (Taipei Standard Time) --><h2 id="題目"><a class="header-anchor" href="#題目"></a>題目</h2><p><a href="https://tioj.ck.tp.edu.tw/problems/1909" target="_blank" rel="noopener">原題目連結</a><br>據說是 2015TOI 三模的題目<br>簡單來說，就是給定一數列代表一排石柱，並且任意石柱 $A$ 可以到達的石柱有：</p><ol><li>從 $A$ 左邊第一個比 $A$ 高的石柱 $B$，以及從 $A$ 往右找的第一個比$A$高的石柱 $C$，其中高度比較低的石柱，其中如果 $B$ 或 $C$ 其中一個不存在，則連結到存在的那一個</li><li>假設 $D$ 可以連結到 $A$ 的話（$D的高度 \lt A$），那麼$A$也可以到 $D$</li></ol><p>求所有石柱中，被最多條簡單路經過的石柱，其被走過的次數及編號<br>如果有多組解，輸出編號最小的</p><a id="more"></a><h2 id="解法"><a class="header-anchor" href="#解法"></a>解法</h2><p>我們先來釐清一下什麼是簡單路徑好了<br>所謂的簡單路徑，就是起點終點不重複，且路徑上經過的點不重複的路徑</p><h3 id="建圖"><a class="header-anchor" href="#建圖"></a>建圖</h3><p>看到路徑，我第一個想到的是圖論<br>我們先想一下，要怎麼把圖建出來</p><h4 id="暴力-O-N-2"><a class="header-anchor" href="#暴力-O-N-2"></a>暴力 $O ( N^2 )$</h4><p>$N^2$ 就爆搜啊，按照題目寫的，往左往右找比他大的然後做比較</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">define</span> UNI(u,v,edge) edge[u].pb ( v ), edge[v].pb ( u )</span></span><br><span class="line"><span class="keyword">for</span> ( <span class="keyword">int</span> i = <span class="number">0</span> ; i &lt; n ; i++ )&#123;</span><br><span class="line">    <span class="keyword">int</span> l = <span class="number">-1</span>, r = n;</span><br><span class="line">    <span class="keyword">for</span> ( <span class="keyword">int</span> j = i - <span class="number">1</span> ; j &gt;= <span class="number">0</span> ; j-- )</span><br><span class="line">        <span class="keyword">if</span> ( data[j] &gt; data[i] )&#123;</span><br><span class="line">            l = j;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    <span class="keyword">for</span> ( <span class="keyword">int</span> j = i + <span class="number">1</span> ; j &lt; n ; j++ )</span><br><span class="line">        <span class="keyword">if</span> ( data[j] &gt; data[i] )&#123;</span><br><span class="line">            r = j;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    <span class="keyword">if</span> ( l == <span class="number">-1</span> &amp;&amp; r == n )</span><br><span class="line">        <span class="keyword">continue</span>;</span><br><span class="line">    <span class="keyword">if</span> ( l == <span class="number">-1</span> )&#123;</span><br><span class="line">        UNI ( r, i, edges );</span><br><span class="line">        <span class="keyword">continue</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> ( r == n )&#123;</span><br><span class="line">        UNI ( l, i, edges );</span><br><span class="line">        <span class="keyword">continue</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    UNI ( ( data[l] &lt; data[r] ? l : r ), i, edges );</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="線段樹-O-NlogN"><a class="header-anchor" href="#線段樹-O-NlogN"></a>線段樹 $O ( NlogN )$</h4><p>然後我就想到線段樹了<br>$index$ 是做離散化後的數字，$value$ 是編號<br>然後就可以開兩顆線段樹，一顆紀錄左手邊的最大值，一邊紀錄右邊最小值<br>一開始右手邊的最小值線段樹，裡面有$N$個點<br>每處理完一個點，就把這個點拔掉丟到左邊去<br>code大概像這樣</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">define</span> UNI(u,v,edge) edge[u].pb ( v ), edge[v].pb ( u )</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> INF 0x3f3f3f3f</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// function</span></span><br><span class="line"><span class="comment">// 線段樹1是紀錄最小值、右手邊的線段樹</span></span><br><span class="line"><span class="comment">// 而線段數2是紀錄最大值、左手邊的線段樹</span></span><br><span class="line"><span class="keyword">int</span> seg1[maxN &lt;&lt; <span class="number">2</span>], seg2[maxN &lt;&lt; <span class="number">2</span>];</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">update1</span> <span class="params">( <span class="keyword">int</span> l, <span class="keyword">int</span> r, <span class="keyword">int</span> index, <span class="keyword">int</span> value, <span class="keyword">int</span> n )</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">query1</span> <span class="params">( <span class="keyword">int</span> l, <span class="keyword">int</span> r, <span class="keyword">int</span> nowL, <span class="keyword">int</span> nowR, <span class="keyword">int</span> n )</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">update2</span> <span class="params">( <span class="keyword">int</span> l, <span class="keyword">int</span> r, <span class="keyword">int</span> index, <span class="keyword">int</span> value, <span class="keyword">int</span> n )</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">query2</span> <span class="params">( <span class="keyword">int</span> l, <span class="keyword">int</span> r, <span class="keyword">int</span> index, <span class="keyword">int</span> value, <span class="keyword">int</span> n )</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// lib是已經做完離散化的數列</span></span><br><span class="line"><span class="built_in">memset</span> ( seg1, INF, <span class="keyword">sizeof</span> seg1 );</span><br><span class="line"><span class="built_in">memset</span> ( seg2, <span class="number">-1</span>, <span class="keyword">sizeof</span> seg2 )</span><br><span class="line"><span class="keyword">for</span> ( <span class="keyword">int</span> i = <span class="number">0</span> ; i &lt; n ; i++ )</span><br><span class="line">    update1 ( <span class="number">0</span>, n, i, lib[i], <span class="number">1</span> );</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> ( <span class="keyword">int</span> i = <span class="number">0</span> ; i &lt; n ; i++ )&#123;</span><br><span class="line">    <span class="keyword">int</span> l = query2 ( lib[i] + <span class="number">1</span>, n, <span class="number">0</span>, n, <span class="number">1</span> );</span><br><span class="line">    <span class="keyword">int</span> r = query1 ( lib[i] + <span class="number">1</span>, n, <span class="number">0</span>, n, <span class="number">1</span> );</span><br><span class="line">    <span class="keyword">if</span> ( l == <span class="number">-1</span> &amp;&amp; r == INF )</span><br><span class="line">        <span class="keyword">continue</span>;</span><br><span class="line">    <span class="keyword">if</span> ( l == <span class="number">-1</span> )&#123;</span><br><span class="line">        UNI ( i, r, edges );</span><br><span class="line">        <span class="keyword">continue</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> ( r == INF )&#123;</span><br><span class="line">        UNI ( i, l, edges );</span><br><span class="line">        <span class="keyword">continue</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    UNI ( i, ( data[l] &lt; data[r] ? l : r ), edges );</span><br><span class="line"></span><br><span class="line">    update1 ( <span class="number">0</span>, n, INF, lib[i], <span class="number">1</span> );</span><br><span class="line">    update2 ( <span class="number">0</span>, n, i, lib[i], <span class="number">1</span> );</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="單調列隊優化-O-N"><a class="header-anchor" href="#單調列隊優化-O-N"></a>單調列隊優化 $O ( N )$</h4><p>關於單調列隊優化的介紹可以看這份建中講義第二頁<a href="https://goo.gl/e12UAo" target="_blank" rel="noopener">這邊</a></p><p>根據單調列隊的特性，我們可以保證現在在 deque 中的數字是遞減的</p><p>那麼假設要插入一個數字呢？<br>假設現在這個數字比最後一個還要大，那麼我們就不斷的拔<br>拔到最後一個數字比現在要插入的數字 $A$ 還要大的時候<br>接著把這些拔掉的數字與 $A$ 做連接</p><p>不過為什麼是跟 $A$ 做連結而不是另一邊比較大的數字呢？<br>因為他是說兩邊第一個比她大的數字的 min<br>既然兩邊都比他大，那麼當然選小的啊</p><p>最後這個 deque 會保證遞減<br>那麼就是把這個 deque 最後一個數字 $L$ 與最後一個數字 $L’$ 做連結<br>直到這個 deque 清空為止</p><p>不過因為只需要從後端做操作<br>所以用 stack 就可以了</p><p>詳細的 code 請看這</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> pair &lt; <span class="keyword">int</span>, <span class="keyword">int</span> &gt; pii;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> F first</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> S second</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> UNI(u,v,edge) edge[u].pb ( v ), edge[v].pb ( u )</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// data 是原數列</span></span><br><span class="line"><span class="built_in">stack</span> &lt; pii, <span class="built_in">vector</span> &lt; pii &gt; &gt; st;</span><br><span class="line"><span class="comment">// stack 小技巧，stack 原本是用 deque 實作，可以自行更換為較快速的 vector （只有從後端操作）</span></span><br><span class="line">pii swp;</span><br><span class="line">st.push ( pii ( data[<span class="number">0</span>], <span class="number">0</span> ) );</span><br><span class="line"><span class="keyword">for</span> ( <span class="keyword">int</span> i = <span class="number">1</span> ; i &lt; n ; i++ )&#123;</span><br><span class="line">    <span class="keyword">while</span> ( !st.empty() &amp;&amp; data[i] &gt; st.top().F )&#123;</span><br><span class="line">        swp = st.top();</span><br><span class="line">        st.pop();</span><br><span class="line">        <span class="keyword">if</span> ( EMP ( st ) )</span><br><span class="line">            UNI ( swp.S, i, edges );</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            UNI ( ( st.top().F &lt; data[i] ? st.top().S : i ), swp.S, edges );</span><br><span class="line">    &#125;</span><br><span class="line">    st.push ( pii ( data[i], i ) );</span><br><span class="line">&#125;</span><br><span class="line">swp = st.top();</span><br><span class="line">st.pop();</span><br><span class="line"><span class="keyword">while</span> ( !st.empty() )&#123;</span><br><span class="line">    UNI ( swp.S, st.top().S, edges );</span><br><span class="line">    swp = st.top();</span><br><span class="line">    st.pop();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="是時候來處理路徑囉"><a class="header-anchor" href="#是時候來處理路徑囉"></a>是時候來處理路徑囉</h3><p>至於這個題目的另外一個部分：路徑<br>又該怎麼處理呢？<br>我們可以發現，這份資料轉換完之後保證是二元樹<br>為什麼？<br>因為他最多只會被兩個其他的點連結（左邊一個右邊一個）<br>而自己只會連結到一個點<br>那麼這不就是二元樹嗎？<br>那麼，通過點 $u$ 的路徑會有三種：</p><ol><li>$u$ 的祖先到 $u$ 的子孫的路徑</li><li>$u$ 的子孫到 $u$ 的子孫，但是有經過 $u$ 的路徑</li><li>從 $u$ 開始（或結束）的路徑</li></ol><p>我們先定義<br>$$dp[u] = u的子孫數目（包含 u ）$$</p><p>因為是樹，所以不會有起點同終點但是路徑不同的情況發生（沒有環）<br>因此只要計算起點終點的組合數就好了</p><p>那麼 1. 就很好算啦<br>$$( 總點數 - dp[n] - 1 )\times ( dp[n] - 1 )$$</p><p>那麼 2. 呢？<br>上面有提到是二元樹，所以任一點最多只會有三條邊出去（兩個子孫一個祖先）<br>所以，把祖先扣掉的那兩個 $a, b$ 的大小乘起（ $dp[a]\times dp[n]$）就是答案了</p><p>呃，3. 應該就不用講了吧 = =<br>就 總點數減一啊 = =</p><p>然後有一點要注意的，因為一條路徑可以有頭尾互換（起點終點不同不能算是同一條路徑吧）</p><p>綜合一二三，所以只需要dfs一次就好了</p><p>這部分的code我放這</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">define</span> maxN 1000005</span></span><br><span class="line"><span class="built_in">vector</span> &lt; <span class="keyword">int</span> &gt; edges[maxN];</span><br><span class="line"><span class="keyword">int</span> cnt[maxN], dp[maxN], N;</span><br><span class="line"><span class="comment">// N = 總點數 - 1</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dfs</span> <span class="params">( <span class="keyword">int</span> n,  <span class="keyword">int</span> p )</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> a = <span class="number">-1</span>, b = <span class="number">-1</span>;</span><br><span class="line">    <span class="keyword">for</span> ( <span class="keyword">auto</span> i: edges[n] )&#123;</span><br><span class="line">        <span class="keyword">if</span> ( i == p )</span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line">        <span class="keyword">if</span> ( a == <span class="number">-1</span> )</span><br><span class="line">            a = i;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            b = i;</span><br><span class="line">        dfs ( i, n );</span><br><span class="line">        dp[n] += dp[i];</span><br><span class="line">    &#125;</span><br><span class="line">    cnt[n] += ( N - dp[n] ) * dp[n]; <span class="comment">// 祖先到子孫</span></span><br><span class="line">    <span class="keyword">if</span> ( deges[n].size() == <span class="number">3</span> ) <span class="comment">// 如果是有兩個子孫的話</span></span><br><span class="line">        cnt[n] += dp[a] * dp[b];</span><br><span class="line">    dp[n]++; <span class="comment">// 因為包含 n ，但是前面都還要 - 1 很麻煩，所以我放到這邊才 + 1</span></span><br><span class="line">    cnt[n] += N;</span><br><span class="line">    cnt[n] &lt;&lt;= <span class="number">1</span>; <span class="comment">// 記得乘二喔</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="code"><a class="header-anchor" href="#code"></a>code</h2><p>綜合以上，我的code長這樣</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// by. MiohitoKiri5474</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> LL;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> pair &lt; <span class="keyword">int</span>, <span class="keyword">int</span> &gt; pii;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> pb push_back</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> F first</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> S second</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> UNI(u,v,edge) edge[u].pb ( v ), edge[v].pb ( u )</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> maxN 1000005</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">vector</span> &lt; <span class="keyword">int</span> &gt; edges[maxN];</span><br><span class="line">LL dp[maxN], N, cnt[maxN];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dfs</span> <span class="params">( <span class="keyword">int</span> n,  <span class="keyword">int</span> p )</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> a = <span class="number">-1</span>, b = <span class="number">-1</span>;</span><br><span class="line">    <span class="keyword">for</span> ( <span class="keyword">auto</span> i: edges[n] )&#123;</span><br><span class="line">        <span class="keyword">if</span> ( i == p )</span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line">        <span class="keyword">if</span> ( a == <span class="number">-1</span> )</span><br><span class="line">            a = i;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            b = i;</span><br><span class="line">        dfs ( i, n );</span><br><span class="line">        dp[n] += dp[i];</span><br><span class="line">    &#125;</span><br><span class="line">    cnt[n] += ( N - dp[n] ) * dp[n];</span><br><span class="line">    <span class="keyword">if</span> ( edges[n].size() == <span class="number">3</span> )</span><br><span class="line">        cnt[n] += dp[a] * dp[b];</span><br><span class="line">    dp[n]++;</span><br><span class="line">    cnt[n] += N;</span><br><span class="line">    cnt[n] &lt;&lt;= <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    ios::sync_with_stdio ( <span class="literal">false</span> );</span><br><span class="line">    <span class="built_in">cin</span>.tie ( <span class="number">0</span> );</span><br><span class="line">    <span class="built_in">cout</span>.tie ( <span class="number">0</span> );</span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> n, idx = <span class="number">-1</span>;</span><br><span class="line">    LL ma = <span class="number">-1</span>;</span><br><span class="line">    <span class="built_in">cin</span> &gt;&gt; n;</span><br><span class="line">    <span class="built_in">vector</span> &lt; <span class="keyword">int</span> &gt; data ( n );</span><br><span class="line">    <span class="keyword">for</span> ( <span class="keyword">auto</span> &amp;i: data )</span><br><span class="line">        <span class="built_in">cin</span> &gt;&gt; i;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="built_in">stack</span> &lt; pii, <span class="built_in">vector</span> &lt; pii &gt; &gt; st;</span><br><span class="line">    pii swp;</span><br><span class="line">    st.push ( pii ( data[<span class="number">0</span>], <span class="number">0</span> ) );</span><br><span class="line">    <span class="keyword">for</span> ( <span class="keyword">int</span> i =  <span class="number">1</span> ; i &lt; n ; i++ )&#123;</span><br><span class="line">        <span class="keyword">while</span> ( !st.empty() &amp;&amp; data[i] &gt; st.top().F )&#123;</span><br><span class="line">            swp = st.top();</span><br><span class="line">            st.pop();</span><br><span class="line">            <span class="keyword">if</span> ( st.empty() )</span><br><span class="line">                UNI ( swp.S, i, edges );</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">                UNI ( ( st.top().F &lt; data[i] ? st.top().S : i ), swp.S, edges );</span><br><span class="line">        &#125;</span><br><span class="line">        st.push ( pii ( data[i], i ) );</span><br><span class="line">    &#125;</span><br><span class="line">    swp = st.top();</span><br><span class="line">    st.pop();</span><br><span class="line">    <span class="keyword">while</span> ( !st.empty() )&#123;</span><br><span class="line">        UNI ( swp.S, st.top().S, edges );</span><br><span class="line">        swp = st.top();</span><br><span class="line">        st.pop();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    N = n - <span class="number">1</span>;</span><br><span class="line">    dfs ( <span class="number">0</span>, <span class="number">-1</span> );</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> ( <span class="keyword">int</span> i = <span class="number">0</span> ; i &lt; n ; i++ )&#123;</span><br><span class="line">        <span class="keyword">if</span> ( cnt[i] &gt; ma )</span><br><span class="line">            ma = cnt[i], idx = i;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; ma &lt;&lt; <span class="string">' '</span> &lt;&lt; idx + <span class="number">1</span> &lt;&lt; <span class="string">'\n'</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="後記"><a class="header-anchor" href="#後記"></a>後記</h2><p>其實這題我寫了很久<br>因為之前一段時間都在搞特選<br>而且我怕特選爆掉沒學校念<br>所以我都在讀學測<br>最近特選出來了<br>已經沒有後顧之憂可以好好搞 TOI 了 &lt;3<br>才回來鍊<br>也是因為剛回來鍊<br>所以手感很糟 = =<br>線段樹寫 query 還把查詢區間 &amp; 總區間寫反 = =<br>還有忘了設定 ma = -1<br>然後還想說為什麼 WA Orz<br>這題也沒有看出來是單調列隊<br>還傻傻花一個多小時寫線段樹 + debug<br>結果單調隊列快狠準 = =<br>我到底在幹嘛 = =<br>不過好險還有三個月（吧</p><p>然後這篇文章也太長 = =<br>這一行是第 326 行<br>呃我是說在原始的 md 檔案上<br>喔這邊已經 328 行了<br>好多 = =<br>至少可定下心來好好練習了</p><!-- rebuild by neat -->]]></content>
      
      
      
        <tags>
            
            <tag> graph </tag>
            
            <tag> TIOJ </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>[CF]Round 521</title>
      <link href="/code/CFR521/"/>
      <url>/code/CFR521/</url>
      
        <content type="html"><![CDATA[<!-- build time:Mon May 04 2020 16:50:35 GMT+0800 (Taipei Standard Time) --><h2 id="前言"><a class="header-anchor" href="#前言"></a>前言</h2><p>身為一個垃圾，當然要打的像垃圾一樣<br>先是校內爆掉，現在換 div.3 爆掉<br>。。。pC 沒開 long long 溢位被 hack 成智障的就是我<br>坐等晚上 rating change<br>沒意外應該會噴掉啦</p><a id="more"></a><p>先放上所有題目的<a href="http://codeforces.com/contest/1077" target="_blank" rel="noopener">連結</a></p><h2 id="problem-A"><a class="header-anchor" href="#problem-A"></a>problem A</h2><h3 id="題目"><a class="header-anchor" href="#題目"></a>題目</h3><p>大意就是，假設在奇數回合往右走 $a$ 步，偶數回合往左走 $b$ 步<br>然後請問第 $K$ 回合現在位置在哪（假設起始位置為 $0$ 且向右為正）</p><h3 id="解法"><a class="header-anchor" href="#解法"></a>解法</h3><p>阿不就直接暴力就好<br>算一下會往左次往右幾次，算一下就好</p><h3 id="code"><a class="header-anchor" href="#code"></a>code</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// by. MiohitoKiri5474</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> LL;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    ios::sync_with_stdio ( <span class="literal">false</span> );</span><br><span class="line">    <span class="built_in">cin</span>.tie ( <span class="number">0</span> );</span><br><span class="line">    <span class="meta">#<span class="meta-keyword">define</span> int LL</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> t, k, a, b, swp, ans;</span><br><span class="line">    <span class="built_in">cin</span> &gt;&gt; t;</span><br><span class="line">    <span class="keyword">while</span> ( t-- )&#123;</span><br><span class="line">        <span class="built_in">cin</span> &gt;&gt; a &gt;&gt; b &gt;&gt; k;</span><br><span class="line">        swp = a - b;</span><br><span class="line">        ans = swp * ( LL ) ( k / <span class="number">2</span> );</span><br><span class="line">        <span class="keyword">if</span> ( k &amp; <span class="number">1</span> )</span><br><span class="line">            ans += a;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; ans &lt;&lt; <span class="string">'\n'</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="problem-B"><a class="header-anchor" href="#problem-B"></a>problem B</h2><h3 id="題目-v2"><a class="header-anchor" href="#題目-v2"></a>題目</h3><p>給定一排房屋現在是否有開燈<br>通常關燈了就是在睡覺了</p><p>題目定義會被干擾就是有戶人家已經在睡覺了，但是隔壁兩間房子的人都有開著燈<br>那麼那戶人家就會被干擾<br>但是請注意，只有一邊的鄰居開燈並不會被干擾</p><p>現在想要讓所有在睡覺的人都不會被干擾<br>求達成此目標所需要的最小關燈（把原先亮著的燈關掉）數</p><h3 id="解法-v2"><a class="header-anchor" href="#解法-v2"></a>解法</h3><p>因為只有一邊有開燈並不會被干擾<br>也就是說，針對每一個會被干擾的人，把一邊的燈關掉就好了</p><p>那麽，我先找出有哪幾戶人家會被干擾，然後把其中一邊的燈關掉<br>順便特判一下有沒有關一戶燈，兩邊就都不會被打擾的狀況，避免重複計算</p><h3 id="code-v2"><a class="header-anchor" href="#code-v2"></a>code</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// by. MiohitoKiri5474</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    ios::sync_with_stdio ( <span class="literal">false</span> );</span><br><span class="line">    <span class="built_in">cin</span>.tie ( <span class="number">0</span> );</span><br><span class="line">    <span class="built_in">cout</span>.tie ( <span class="number">0</span> );</span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> n, ans = <span class="number">0</span>, m;</span><br><span class="line">    <span class="built_in">cin</span> &gt;&gt; n;</span><br><span class="line">    <span class="built_in">vector</span> &lt; <span class="keyword">int</span> &gt; data ( n ), lib;</span><br><span class="line">    <span class="keyword">for</span> ( <span class="keyword">auto</span> &amp;i: data )</span><br><span class="line">        <span class="built_in">cin</span> &gt;&gt; i;</span><br><span class="line">    <span class="keyword">for</span> ( <span class="keyword">int</span> i = <span class="number">1</span> ; i &lt; n - <span class="number">1</span> ; i++ )&#123;</span><br><span class="line">        <span class="keyword">if</span> ( !data[i] &amp;&amp; data[i - <span class="number">1</span>] &amp;&amp; data[i + <span class="number">1</span>] )</span><br><span class="line">            lib.push_back ( i );</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    m = lib.size();</span><br><span class="line">    <span class="keyword">while</span> ( lib.size() &gt; <span class="number">1</span> )&#123;</span><br><span class="line">        <span class="keyword">if</span> ( lib[<span class="number">1</span>] - lib[<span class="number">0</span>] == <span class="number">2</span> )&#123;</span><br><span class="line">            ans++;</span><br><span class="line">            lib.erase ( lib.begin() );</span><br><span class="line">            lib.erase ( lib.begin() );</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span>&#123;</span><br><span class="line">            ans++;</span><br><span class="line">            lib.erase ( lib.begin() );</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> ( !lib.empty() )</span><br><span class="line">        ans++;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; ans &lt;&lt; <span class="string">'\n'</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="problem-C"><a class="header-anchor" href="#problem-C"></a>problem C</h2><p>就是這題，我沒有開 long long 然後就被 hack 了<br>名次噴掉 1500 多名</p><h3 id="題目-v3"><a class="header-anchor" href="#題目-v3"></a>題目</h3><p>給定一條長度為 $N$ 的序列<br>我們假設一個序列是「好的」為以下情況：這個序列的其中一個數字，剛好等於此序列其他元素的和<br>也就是說，$[ 1, 3, 3, 7 ]$ 這個序列是好的，因為 $7 = 1 + 3 + 3$<br>求一共有幾種可能，在移除掉一個元素的情況下，這個序列會是好的<br>請列出數量，以及些解的位置</p><p>因為題目有點難懂，我放上其中一個例子好了<br>那現在看另外一個序列 $[ 8, 3, 5, 2 ]$</p><ol><li>移除掉第一個元素（也就是 $8$ ），這個序列會是好的，因為 $[ 3, 5, 2 ] \to 5 = 3 + 2$</li><li>移除掉第四個元素（也就是 $2$ ），這個序列也會是好的，因為 $[ 8, 3, 5 ] \to 8 = 3 + 5$</li></ol><h3 id="解法-v3"><a class="header-anchor" href="#解法-v3"></a>解法</h3><ol><li>計算原先序列的總和</li><li>每舉所有元素 ( $a[i]$ )，把他從 $sum$ 減掉</li><li>把 $sum$ 為奇數則返回步驟2</li><li>尋找 $\frac{sum}{2}$ 是否出現於原序列中</li><li>檢查 $\frac{sum}{2}$ 是否與 $a[i]$ 相等，如果相等，那麼 $a[i]$ 是否出現於原序列中兩次</li><li>如果有出現過兩次，那麼 i 就是其中一個答案</li><li>返回步驟 2</li></ol><p>有一點可能會覺得有點奇怪，為什麼 $sum - a[i]$ 一定要是偶數<br>假設 $sum’ = sum - a[i]，sum’$ 代表除了 $a[i]$ 以外的元素和<br>既然一個序列為好的序列，代表說這個序列會被切成兩部分<br>而這兩部分的和會一樣<br>既然都會被切成兩個一樣的東西了，為什麼 $sum’$ 會是奇數<br>這就矛盾了，所以 $sum’$ 一定為偶數</p><h3 id="code-v3"><a class="header-anchor" href="#code-v3"></a>code</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// by. MiohitoKiri5474</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> LL;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> int LL</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">map</span> &lt; <span class="keyword">int</span>, <span class="keyword">int</span> &gt; lib;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">undef</span> int</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    ios::sync_with_stdio ( <span class="literal">false</span> );</span><br><span class="line">    <span class="built_in">cin</span>.tie ( <span class="number">0</span> );</span><br><span class="line">    <span class="meta">#<span class="meta-keyword">define</span> int LL</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> n, sum = <span class="number">0</span>;</span><br><span class="line">    <span class="built_in">cin</span> &gt;&gt; n;</span><br><span class="line">    <span class="built_in">vector</span> &lt; <span class="keyword">int</span> &gt; data ( n ), ans;</span><br><span class="line">    <span class="keyword">for</span> ( <span class="keyword">auto</span> &amp;i: data )&#123;</span><br><span class="line">        <span class="built_in">cin</span> &gt;&gt; i;</span><br><span class="line">        sum += i;</span><br><span class="line">        lib[i]++;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> ( <span class="keyword">int</span> i = <span class="number">0</span> ; i &lt; n ; i++ )&#123;</span><br><span class="line">        sum -= data[i];</span><br><span class="line">        <span class="keyword">if</span> ( sum &amp; <span class="number">1</span> )&#123;</span><br><span class="line">            sum += data[i];</span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        sum &gt;&gt;= <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">if</span> ( ( lib[sum] == <span class="number">1</span> &amp;&amp; sum != data[i] ) || lib[sum] &gt; <span class="number">1</span> )&#123;</span><br><span class="line">            ans.push_back ( i + <span class="number">1</span> );</span><br><span class="line">        &#125;</span><br><span class="line">        sum &lt;&lt;= <span class="number">1</span>;</span><br><span class="line">        sum += data[i];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; ans.size() &lt;&lt; <span class="string">'\n'</span>;</span><br><span class="line">    <span class="keyword">for</span> ( <span class="keyword">auto</span> i: data )</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; i &lt;&lt; <span class="string">' '</span>;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">'\n'</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="problem-D"><a class="header-anchor" href="#problem-D"></a>problem D</h2><h3 id="題目-v4"><a class="header-anchor" href="#題目-v4"></a>題目</h3><p>給定一大小為 $N$ 的可重複集合 $S$<br>求找出一大小為 $K$ 的可重複集合 $S’ ( S’\subseteq S )$ 且 $S’$ 在 $S$ 中出現次數最多</p><p><strong>元素可重複，這件事情非常重要</strong></p><h3 id="解法-v4"><a class="header-anchor" href="#解法-v4"></a>解法</h3><p>我先做離散化，反正數字跟解法沒有關係<br>接著紀錄每個數字出現幾次<br>我先二分搜最多那個集合最多可以出現幾次<br>然後按照次數輸出，反正只要符合要求的都行</p><h3 id="code-v4"><a class="header-anchor" href="#code-v4"></a>code</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// by. MiohitoKiri5474</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> LL;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> maxN 200005</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> cnt[maxN], m, k, ma;</span><br><span class="line"><span class="built_in">vector</span> &lt; <span class="keyword">int</span> &gt; lib;</span><br><span class="line"><span class="built_in">map</span> &lt; <span class="keyword">int</span>, <span class="built_in">vector</span> &lt; <span class="keyword">int</span> &gt; &gt; table;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">bool</span> <span class="title">check</span> <span class="params">( <span class="keyword">int</span> tms )</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> res = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> ( <span class="keyword">int</span> i = tms ; i &lt; ma ; i++ )</span><br><span class="line">        <span class="keyword">for</span> ( <span class="keyword">auto</span> j: table[i] )</span><br><span class="line">            res += cnt[j] / tms;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> res &gt;= k;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    ios::sync_with_stdio ( <span class="literal">false</span> );</span><br><span class="line">    <span class="built_in">cin</span>.tie ( <span class="number">0</span> );</span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> n, l = <span class="number">0</span>, r = <span class="number">-1</span>, mid;</span><br><span class="line">    <span class="built_in">cin</span> &gt;&gt; n &gt;&gt; k;</span><br><span class="line">    <span class="built_in">vector</span> &lt; <span class="keyword">int</span> &gt; data ( n );</span><br><span class="line">    <span class="keyword">for</span> ( <span class="keyword">auto</span> &amp;i: data )</span><br><span class="line">        <span class="built_in">cin</span> &gt;&gt; i;</span><br><span class="line">    <span class="keyword">if</span> ( n == k )&#123;</span><br><span class="line">        <span class="keyword">for</span> ( <span class="keyword">auto</span> i: data )</span><br><span class="line">            <span class="built_in">cout</span> &lt;&lt; i &lt;&lt; <span class="string">' '</span>;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; <span class="string">'\n'</span>;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    lib = data;</span><br><span class="line">    sort ( lib.begin(), lib.end() );</span><br><span class="line">    lib.erase ( unique ( lib.begin(), lib.end() ), lib.end() );</span><br><span class="line">    m = lib.size();</span><br><span class="line">    <span class="keyword">for</span> ( <span class="keyword">auto</span> i: data )&#123;</span><br><span class="line">        cnt[lower_bound ( lib.begin(), lib.end(), i ) - lib.end()]++;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> ( <span class="keyword">int</span> i = <span class="number">0</span> ; i &lt; m ; i++ )&#123;</span><br><span class="line">        r = max ( r, cnt[i] );</span><br><span class="line">        table[cnt[i]].push_back ( i );</span><br><span class="line">    &#125;</span><br><span class="line">    ma = ++r;</span><br><span class="line">    mid = ( l + r ) &gt;&gt; <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span> ( r - l &gt; <span class="number">1</span> )&#123;</span><br><span class="line">        <span class="keyword">if</span> ( check ( mid ) )</span><br><span class="line">            l = mid;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            r = mid;</span><br><span class="line">        mid = ( l + r ) &gt;&gt; <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    l = k;</span><br><span class="line">    <span class="keyword">for</span> ( <span class="keyword">int</span> i = <span class="number">0</span> ; i &lt; m ; i++ )&#123;</span><br><span class="line">        <span class="keyword">for</span> ( <span class="keyword">int</span> j = <span class="number">0</span> ; j &lt; min ( cnt[i] / mid, l ) ; j++ )</span><br><span class="line">            <span class="built_in">cout</span> &lt;&lt; lib[i] &lt;&lt; <span class="string">' '</span>;</span><br><span class="line">        l -= min ( cnt[i] / mid, l );</span><br><span class="line">        <span class="keyword">if</span> ( !l )</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">'\n'</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="problem-E"><a class="header-anchor" href="#problem-E"></a>problem E</h2><p>這題我賽中只有想到喇賽解法，賽後才想到正解</p><h3 id="題目-v5"><a class="header-anchor" href="#題目-v5"></a>題目</h3><p>給定一些題目，$a_i$ 即代表第 $i$ 題的種類為 $a_i$<br>要求每場比賽的的題目種類都要一樣，用過的種類不能再次使用<br>且每一場需要的題目數量是前一場的兩倍（第一天的題目數量可以任意）<br>求最多可以使用多少題目<br><strong>注意！你應該要最大會題目數量，而非天數</strong></p><h3 id="解法-v5"><a class="header-anchor" href="#解法-v5"></a>解法</h3><p>每舉第一天的題數，然後暴力往後找<br>用 lower_bound 去尋找是個不錯的選擇</p><h3 id="code-v5"><a class="header-anchor" href="#code-v5"></a>code</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// by. MiohitoKiri5474</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> LL;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> maxN 200005</span></span><br><span class="line"></span><br><span class="line">LL cnt[maxN];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    ios::sync_with_stdio ( <span class="literal">false</span> );</span><br><span class="line">    <span class="built_in">cin</span>.tie ( <span class="number">0</span> );</span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> n, m, ma, ans = <span class="number">-1</span>, swp, idx, id;</span><br><span class="line">    <span class="built_in">cin</span> &gt;&gt; n;</span><br><span class="line">    <span class="built_in">vector</span> &lt; <span class="keyword">int</span> &gt; data ( n ), lib;</span><br><span class="line">    <span class="keyword">for</span> ( <span class="keyword">auto</span> &amp;i: data )</span><br><span class="line">        <span class="built_in">cin</span> &gt;&gt; i;</span><br><span class="line">    lib = data;</span><br><span class="line">    sort ( lib.begin(), lib.end() );</span><br><span class="line">    lib.erase ( unique ( lib.begin(), lib.end() ), lib.end() );</span><br><span class="line">    m = lib.size();</span><br><span class="line">    <span class="keyword">for</span> ( <span class="keyword">auto</span> i: data )</span><br><span class="line">        cnt[lower_bound ( lib.begin(), lib.end(), i ) - lib.begin()]++;</span><br><span class="line"></span><br><span class="line">    data.clear();</span><br><span class="line">    <span class="keyword">for</span> ( <span class="keyword">int</span> i = <span class="number">0</span> ; i &lt; m ; i++ )&#123;</span><br><span class="line">        data.push_back ( cnt[i] );</span><br><span class="line">    &#125;</span><br><span class="line">    sort ( data.begin(), data.end() );</span><br><span class="line">    ma = data.back() + <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> ( <span class="keyword">int</span> i = <span class="number">0</span> ; i &lt; ma ; i++ )&#123;</span><br><span class="line">        swp = idx = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> ( <span class="keyword">int</span> j = i ; j &lt; ma &amp;&amp; idx &lt; m ; j &lt;&lt;= <span class="number">1</span> )&#123;</span><br><span class="line">            id = lower_bound ( data.begin() + idx, data.end(), j ) - data.begin();</span><br><span class="line">            <span class="keyword">if</span> ( id &lt; data.size() )</span><br><span class="line">                swp += j;</span><br><span class="line">            idx = id + <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        ans = max ( ans, swp );</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; ans &lt;&lt; <span class="string">'\n'</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="後記"><a class="header-anchor" href="#後記"></a>後記</h2><p>老實說我這場有點慘<br>pC 被 Hack，pE 賽中沒寫出來<br>以我的實力來說不應該這樣子的<br>因為沒開 long long 而炸掉，我現在已經在我的 default code 裡加上 #define int long long 了@@</p><p>希望下一場可以好好發揮</p><!-- rebuild by neat -->]]></content>
      
      
      
        <tags>
            
            <tag> Full Contest Solution </tag>
            
            <tag> CodeForces </tag>
            
            <tag> div.3 </tag>
            
            <tag> dp </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>[TIOJ][1615] A! + B! problem</title>
      <link href="/code/TIOJ-1615/"/>
      <url>/code/TIOJ-1615/</url>
      
        <content type="html"><![CDATA[<!-- build time:Mon May 04 2020 16:50:35 GMT+0800 (Taipei Standard Time) --><h2 id="前言"><a class="header-anchor" href="#前言"></a>前言</h2><p>好久沒有寫 code 發題解了<br>最近因為一些事情沒有時間（也沒有心情）認真寫 code<br>（因為上次 CodeForces 連續掉分我心情有點糟）<br>（啊還有學科校內爆炸也是我心情糟的原因之一）<br>（開始懷疑我到底這一年努力是為了什麼，之類的）</p><a id="more"></a><p>然後今天想說寫個題目、發個題解刷一下存在感，之類的<br>所以跑去 TIOJ 翻題目<br>然後看到這題<br>。。。寫完 AC 了之後發現很裸，裸到有點不知道該說什麼</p><h2 id="題目-解法"><a class="header-anchor" href="#題目-解法"></a>題目 &amp; 解法</h2><p>大意上是說，給定兩數字 $A, B$ ，求 $A! + B!$ 共有多少個質因數<br>原網址我放<a href="https://tioj.ck.tp.edu.tw/problems/1615" target="_blank" rel="noopener">在這</a></p><p>很直觀的會拆成 $A ( ( B - A )! + 1 )$ 來做<br>所以答案就是$le A$ 的質因數個數，然後再檢查 $( B - A )! + 1$ 共有多少個質因數<br>因為要加一，所以我想了很久<br>感覺這種題目就是會卡 $O ( N ^ 2 )$ 解（被這種題目雷到好幾次@@）<br>但是我真的沒有想法<br>所以就寫了個 $O ( N^2 )$ 的解法<br>。。。然後過了，wtf<br>就真的把 $( B - A )! + 1$ 暴力做，然後暴力檢查<br>就這樣。。。<br>我一臉懵逼的坐在電腦前傻了一下<br>才開始動手打這篇文章</p><h2 id="code"><a class="header-anchor" href="#code"></a>code</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// by. MiohitoKiri5474</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> LL;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> maxN 1000000</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">bitset</span> &lt; maxN &gt; lib;</span><br><span class="line"><span class="built_in">vector</span> &lt; LL &gt; prime;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    ios::sync_with_stdio ( <span class="literal">false</span> );</span><br><span class="line">    <span class="built_in">cin</span>.tie ( <span class="number">0</span> );</span><br><span class="line">    <span class="built_in">cout</span>.tie ( <span class="number">0</span> );</span><br><span class="line">    <span class="meta">#<span class="meta-keyword">define</span> int LL</span></span><br><span class="line"></span><br><span class="line">    lib[<span class="number">0</span>] = lib[<span class="number">1</span>] = <span class="literal">true</span>;</span><br><span class="line">    <span class="keyword">for</span> ( <span class="keyword">int</span> i = <span class="number">2</span> ; i &lt; maxN ; i++ )&#123;</span><br><span class="line">        <span class="keyword">if</span> ( !lib[i] )&#123;</span><br><span class="line">            prime.push_back ( i );</span><br><span class="line">            <span class="keyword">for</span> ( <span class="keyword">int</span> j = i ; j &lt; maxN ; j += i )</span><br><span class="line">                lib[j] = <span class="literal">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> a, b, len = prime.size();</span><br><span class="line">    LL ans, stp;</span><br><span class="line">    <span class="keyword">while</span> ( <span class="built_in">cin</span> &gt;&gt; a &gt;&gt; b )&#123;</span><br><span class="line">        <span class="keyword">if</span> ( a &gt; b )</span><br><span class="line">            swap ( a, b );</span><br><span class="line">        ans = upper_bound ( prime.begin(), prime.end(), a ) - prime.begin();</span><br><span class="line">        stp = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span> ( <span class="keyword">int</span> i = a + <span class="number">1</span> ; i &lt;= b ; i++ )&#123;</span><br><span class="line">            stp *= i;</span><br><span class="line">        &#125;</span><br><span class="line">        stp++;</span><br><span class="line">        <span class="keyword">for</span> ( <span class="keyword">int</span> i = <span class="number">0</span> ; i &lt; ans ; i++ )&#123;</span><br><span class="line">            <span class="keyword">while</span> ( stp % prime[i] == <span class="number">0</span> )&#123;</span><br><span class="line">                stp /= prime[i];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> ( <span class="keyword">int</span> i = ans ; i &lt; len ; i++ )&#123;</span><br><span class="line">            <span class="keyword">if</span> ( !( stp % prime[i] ) )&#123;</span><br><span class="line">                ans++;</span><br><span class="line">                <span class="keyword">while</span> ( stp % prime[i] == <span class="number">0</span> )</span><br><span class="line">                    stp /= prime[i];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> ( stp &gt; maxN )</span><br><span class="line">            ans++;</span><br><span class="line"></span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; ans &lt;&lt; <span class="string">'\n'</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="後記"><a class="header-anchor" href="#後記"></a>後記</h2><p>最近特殊選才有點忙<br>加上 CodeForces，校內賽的陰影<br>我可能會暫時停筆一下啦XD<br>沒有意外，等到特選告一段落會繼續。。。吧<br>等等印象中好像有 CodeForces，啊不過有點晚<br>會不會打還是未知數<br>下禮拜的 HPCW、MCC 打完，應該又會停一段時間吧<br>在特選放榜前我應該不會繼續認真搞比賽了<br>因為我不知道在放榜後我會何去何從（笑<br>先讀點書好像比較保險</p><p>不過如果特選有好結果我還是會認真搞 TOI 入營考啦<br>已經是最後一年了，能不能進去就聽由天命囉</p><p>然後，謝謝看到這邊的你<br>（我這麼寫怎麼有點感傷啊XD）<br>我已經很久沒有發文了，希望大家還有在看<br>謝謝各位一直以來對我的支持 &lt;3</p><!-- rebuild by neat -->]]></content>
      
      
      
        <tags>
            
            <tag> TIOJ </tag>
            
            <tag> math </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>[ITSA] No.66 詳解</title>
      <link href="/code/itsa-66/"/>
      <url>/code/itsa-66/</url>
      
        <content type="html"><![CDATA[<!-- build time:Mon May 04 2020 16:50:35 GMT+0800 (Taipei Standard Time) --><h2 id="前言"><a class="header-anchor" href="#前言"></a>前言</h2><p>簡單來說就是我特殊選才的資料不夠<br>所以只好來打這東西，不然備審有夠空QQ</p><a id="more"></a><h2 id="problem-1"><a class="header-anchor" href="#problem-1"></a>problem 1</h2><h3 id="題目"><a class="header-anchor" href="#題目"></a>題目</h3><p>這題就是給你一行整數（數量不定，但是保證 &lt; 11個）<br>求該行出現率「超過」一半的整數</p><h3 id="解法"><a class="header-anchor" href="#解法"></a>解法</h3><p>看到數量不定就會用 getline + stringstream，這很直觀<br>然後因為他只有說「給整數」，並沒有限制數字大小<br>所以我是用 map 做，而不是陣列（出現負數就尷尬了）<br>雖然比較慢但是也比較無腦</p><p>為什麼我會在題目那把「超過」加上引號？<br>。。。因為我在寫 code 的時候耍智障把判斷式寫成 &gt;=<br>然後我就吃 WA 了<br>我還跑去問如果有多組解怎麼辦<br>結果超過一半的數字只會有一個QQ<br>還有把 NO 打成 No<br>就多吃兩個 penalty 了，虧爆<br>抓到，澪人桐不會寫程式</p><h3 id="code"><a class="header-anchor" href="#code"></a>code</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// by. MiohitoKiri5474</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="built_in">map</span> &lt; <span class="keyword">int</span>, <span class="keyword">int</span> &gt; lib;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    ios::sync_with_stdio ( <span class="literal">false</span> );</span><br><span class="line">    <span class="built_in">cin</span>.tie ( <span class="number">0</span> );</span><br><span class="line">    <span class="built_in">cout</span>.tie ( <span class="number">0</span> );</span><br><span class="line"></span><br><span class="line">    <span class="built_in">string</span> str;</span><br><span class="line">    <span class="keyword">int</span> in, cnt;</span><br><span class="line">    <span class="keyword">bool</span> ans;</span><br><span class="line">    <span class="keyword">while</span> ( getline ( <span class="built_in">cin</span>, str ) )&#123;</span><br><span class="line">        lib.clear();</span><br><span class="line">        cnt = <span class="number">0</span>;</span><br><span class="line">        ans = <span class="literal">false</span>;</span><br><span class="line">        <span class="function"><span class="built_in">stringstream</span> <span class="title">ss</span> <span class="params">( str )</span></span>;</span><br><span class="line">        <span class="keyword">while</span> ( ss &gt;&gt; in )&#123;</span><br><span class="line">            lib[in]++;</span><br><span class="line">            cnt++;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> ( <span class="keyword">auto</span> i: lib )&#123;</span><br><span class="line">            <span class="keyword">if</span> ( i.S &gt; cnt / <span class="number">2</span> )&#123;</span><br><span class="line">                <span class="built_in">cout</span> &lt;&lt; i.F &lt;&lt; <span class="string">'\n'</span>;</span><br><span class="line">                ans = <span class="literal">true</span>;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> ( !ans )</span><br><span class="line">            <span class="built_in">cout</span> &lt;&lt; <span class="string">"NO\n"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="problem-2"><a class="header-anchor" href="#problem-2"></a>problem 2</h2><h3 id="題目-v2"><a class="header-anchor" href="#題目-v2"></a>題目</h3><p>給一個簡單的一元一次方程式<br>保證只有兩個數字、一個未知數 $x$、一個等號、一個加減乘除<br>並保證所有運算元與運算子之間只都有空白隔開<br>並且求出 $x$，無條件捨去到小數點第一位</p><h3 id="解法-v2"><a class="header-anchor" href="#解法-v2"></a>解法</h3><p>要寫字串判斷很麻煩欸 = =<br>pA寫爆了先來寫這題（？<br>手速不知道為什麼爆快<br>快到我自己也嚇到<br>也沒出什麼 bug，很快就 AC 了 &lt;3</p><h3 id="code-v2"><a class="header-anchor" href="#code-v2"></a>code</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// by. MiohitoKiri5474</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> pb push_back</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">string</span> str;</span><br><span class="line"><span class="built_in">vector</span> &lt; <span class="keyword">int</span> &gt; lib;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    ios::sync_with_stdio ( <span class="literal">false</span> );</span><br><span class="line">    <span class="built_in">cin</span>.tie ( <span class="number">0</span> );</span><br><span class="line">    <span class="built_in">cout</span>.tie ( <span class="number">0</span> );</span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> opt, len, x, a, b, ans;</span><br><span class="line">    <span class="keyword">bool</span> flag;</span><br><span class="line">    <span class="keyword">while</span> ( getline ( <span class="built_in">cin</span>, str ) )&#123;</span><br><span class="line">        len = str.size(), x = <span class="number">0</span>, ans = <span class="number">0</span>;</span><br><span class="line">        flag = <span class="literal">false</span>;</span><br><span class="line">        lib.clear();</span><br><span class="line">        <span class="keyword">for</span> ( <span class="keyword">int</span> i = <span class="number">0</span> ; i &lt; len ; i++ )&#123;</span><br><span class="line">            <span class="keyword">if</span> ( str[i] == <span class="string">'+'</span> )</span><br><span class="line">                opt = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span> ( str[i] == <span class="string">'-'</span> )</span><br><span class="line">                opt = <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span> ( str[i] == <span class="string">'*'</span> )</span><br><span class="line">                opt = <span class="number">2</span>;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span> ( str[i] == <span class="string">'/'</span> )</span><br><span class="line">                opt = <span class="number">3</span>;</span><br><span class="line">            <span class="keyword">else</span>&#123;</span><br><span class="line">                <span class="keyword">if</span> ( <span class="string">'0'</span> &lt;= str[i] &amp;&amp; str[i] &lt;= <span class="string">'9'</span> )&#123;</span><br><span class="line">                    x = x * <span class="number">10</span> + <span class="keyword">int</span> ( str[i] - <span class="string">'0'</span> );</span><br><span class="line">                    flag = <span class="literal">true</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">else</span>&#123;</span><br><span class="line">                    <span class="keyword">if</span> ( flag )</span><br><span class="line">                        lib.pb ( x );</span><br><span class="line">                    x = <span class="number">0</span>, flag = <span class="literal">false</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> ( flag )</span><br><span class="line">            lib.pb ( x );</span><br><span class="line">        a = lib[<span class="number">0</span>], b = lib[<span class="number">1</span>];</span><br><span class="line">        <span class="keyword">if</span> ( !opt )</span><br><span class="line">            ans = ( b - a ) * <span class="number">10.0</span>;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> ( opt == <span class="number">1</span> )</span><br><span class="line">            ans = ( b + a ) * <span class="number">10.0</span>;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> ( opt == <span class="number">2</span> )</span><br><span class="line">            ans = ( <span class="keyword">int</span> ) ( ( <span class="keyword">double</span> ) b / a * <span class="number">10.0</span> );</span><br><span class="line">        <span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="keyword">if</span> ( str[<span class="number">0</span>] == <span class="string">'x'</span> )</span><br><span class="line">                ans = ( <span class="keyword">int</span> ) ( ( <span class="keyword">double</span> ) b * a * <span class="number">10.0</span> );</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">                ans = ( <span class="keyword">int</span> ) ( ( <span class="keyword">double</span> ) a / b * <span class="number">10.0</span> );</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; ans / <span class="number">10</span> &lt;&lt; <span class="string">'.'</span> &lt;&lt; ans % <span class="number">10</span> &lt;&lt; <span class="string">'\n'</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="problem-3"><a class="header-anchor" href="#problem-3"></a>problem 3</h2><h3 id="題目-v3"><a class="header-anchor" href="#題目-v3"></a>題目</h3><p>給定 $N$ 組字串，請將字串以 $’:’ or ‘;’ or ‘,’$ 切割<br>並輸出出所有字串</p><h3 id="解法-v3"><a class="header-anchor" href="#解法-v3"></a>解法</h3><p>啊就水題水到爆啊，多開個 string 紀錄就好了<br>這題沒有難度（蓋章</p><h3 id="code-v3"><a class="header-anchor" href="#code-v3"></a>code</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// by. MiohitoKiri5474</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    ios::sync_with_stdio ( <span class="literal">false</span> );</span><br><span class="line">    <span class="built_in">cin</span>.tie ( <span class="number">0</span> );</span><br><span class="line">    <span class="built_in">cout</span>.tie ( <span class="number">0</span> );</span><br><span class="line"></span><br><span class="line">    <span class="built_in">string</span> str, swp;</span><br><span class="line">    <span class="keyword">int</span> t;</span><br><span class="line">    <span class="built_in">cin</span> &gt;&gt; t;</span><br><span class="line">    getline ( <span class="built_in">cin</span>, str );</span><br><span class="line">    <span class="keyword">while</span> ( t-- )&#123;</span><br><span class="line">        getline ( <span class="built_in">cin</span>, str );</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; <span class="string">"Tokens found:\n"</span>;</span><br><span class="line">        swp = <span class="string">""</span>;</span><br><span class="line">        <span class="keyword">for</span> ( <span class="keyword">auto</span> i: str )&#123;</span><br><span class="line">            <span class="keyword">if</span> ( i == <span class="string">':'</span> || i == <span class="string">','</span> || i == <span class="string">';'</span> )&#123;</span><br><span class="line">                <span class="built_in">cout</span> &lt;&lt; swp &lt;&lt; <span class="string">'\n'</span>;</span><br><span class="line">                swp = <span class="string">""</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">                swp += i;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> ( swp != <span class="string">""</span> )</span><br><span class="line">            <span class="built_in">cout</span> &lt;&lt; swp &lt;&lt; <span class="string">'\n'</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="problem-4"><a class="header-anchor" href="#problem-4"></a>problem 4</h2><h3 id="題目-v4"><a class="header-anchor" href="#題目-v4"></a>題目</h3><p>zj 上面的是羅馬數字轉阿拉伯數字<br>這次 ITSA 出的是要把阿拉伯數字轉羅馬數字<br>更水 = =</p><h3 id="解法-v4"><a class="header-anchor" href="#解法-v4"></a>解法</h3><p>直接按照位數打表輸出就好<br>。。。雖然這麼說，但是我還是出 bug 了<br>我把4打成&quot;IIII&quot;，正確應該是&quot;IX&quot;<br>垃圾是我QQ</p><h3 id="code-v4"><a class="header-anchor" href="#code-v4"></a>code</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// by.MiohitoKiri5474</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="built_in">string</span> lib0[<span class="number">10</span>] = &#123; <span class="string">""</span>, <span class="string">"I"</span>, <span class="string">"II"</span>, <span class="string">"III"</span>, <span class="string">"IV"</span>, <span class="string">"V"</span>, <span class="string">"VI"</span>, <span class="string">"VII"</span>, <span class="string">"VIII"</span>, <span class="string">"IX"</span> &#125;;</span><br><span class="line"><span class="built_in">string</span> lib1[<span class="number">10</span>] = &#123; <span class="string">""</span>, <span class="string">"X"</span>, <span class="string">"XX"</span>, <span class="string">"XXX"</span>, <span class="string">"XL"</span>, <span class="string">"L"</span>, <span class="string">"LX"</span>, <span class="string">"LXX"</span>, <span class="string">"LXXX"</span>, <span class="string">"XC"</span> &#125;;</span><br><span class="line"><span class="built_in">string</span> lib2[<span class="number">10</span>] = &#123; <span class="string">""</span>, <span class="string">"C"</span>, <span class="string">"CC"</span>, <span class="string">"CCC"</span>, <span class="string">"CD"</span>, <span class="string">"D"</span>, <span class="string">"DC"</span>, <span class="string">"DCC"</span>, <span class="string">"DCCC"</span>, <span class="string">"CM"</span> &#125;;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    ios::sync_with_stdio ( <span class="literal">false</span> );</span><br><span class="line">    <span class="built_in">cin</span>.tie ( <span class="number">0</span> );</span><br><span class="line">    <span class="built_in">cout</span>.tie ( <span class="number">0</span> );</span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> t, in;</span><br><span class="line">    <span class="built_in">cin</span> &gt;&gt; t;</span><br><span class="line">    <span class="keyword">while</span> ( t-- )&#123;</span><br><span class="line">        <span class="built_in">cin</span> &gt;&gt; in;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; lib2[in / <span class="number">100</span>] &lt;&lt; lib1[in % <span class="number">100</span> / <span class="number">10</span>] &lt;&lt; lib0[in % <span class="number">10</span>] &lt;&lt; <span class="string">'\n'</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="problem-5"><a class="header-anchor" href="#problem-5"></a>problem 5</h2><h3 id="題目-v5"><a class="header-anchor" href="#題目-v5"></a>題目</h3><p>給定兩個字串，求出這兩個字串所有的 LCS</p><h3 id="解法-v5"><a class="header-anchor" href="#解法-v5"></a>解法</h3><p>本來只有丟任意解的 LCS<br>然後就吃 WA 了，又多一個 penalty<br>問官方官方一直沒有回應<br>就想說先寫所有解的版本好了<br>等到一回覆馬上 judge</p><p>然後這就是裸的 LCS 啊 = =</p><h3 id="code-v5"><a class="header-anchor" href="#code-v5"></a>code</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// by. MiohitoKiri5474</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> dp[<span class="number">105</span>][<span class="number">105</span>], ma;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    ios::sync_with_stdio ( <span class="literal">false</span> );</span><br><span class="line">    <span class="built_in">cin</span>.tie ( <span class="number">0</span> );</span><br><span class="line">    <span class="built_in">cout</span>.tie ( <span class="number">0</span> );</span><br><span class="line"></span><br><span class="line">    <span class="built_in">string</span> a, b, str;</span><br><span class="line">    <span class="built_in">set</span> &lt; <span class="built_in">string</span> &gt; lib;</span><br><span class="line">    <span class="keyword">while</span> ( <span class="built_in">cin</span> &gt;&gt; a &gt;&gt; b )&#123;</span><br><span class="line">        <span class="keyword">int</span> szA = a.size(), szB = b.size();</span><br><span class="line">        lib.clear();</span><br><span class="line">        <span class="built_in">memset</span> ( dp, <span class="number">0</span>, <span class="keyword">sizeof</span> dp );</span><br><span class="line">        ma = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> ( <span class="keyword">int</span> i = <span class="number">0</span> ; i &lt; szA ; i++ )&#123;</span><br><span class="line">            <span class="keyword">for</span> ( <span class="keyword">int</span> j = <span class="number">0</span> ; j &lt; szB ; j++ )&#123;</span><br><span class="line">                <span class="keyword">if</span> ( a[i] == b[j] )&#123;</span><br><span class="line">                    dp[i + <span class="number">1</span>][j + <span class="number">1</span>] = dp[i][j] + <span class="number">1</span>;</span><br><span class="line">                    ma = max ( ma, dp[i + <span class="number">1</span>][j + <span class="number">1</span>] );</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> ( !ma )&#123;</span><br><span class="line">            <span class="built_in">cout</span> &lt;&lt; <span class="string">"No common sequence!\n"</span>;</span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> ( <span class="keyword">int</span> i = <span class="number">0</span> ; i &lt; szA ; i++ )&#123;</span><br><span class="line">            <span class="keyword">for</span> ( <span class="keyword">int</span> j = <span class="number">0</span> ; j &lt; szB ; j++ )&#123;</span><br><span class="line">                <span class="keyword">if</span> ( dp[i + <span class="number">1</span>][j + <span class="number">1</span>] == ma )&#123;</span><br><span class="line">                    str = <span class="string">""</span>;</span><br><span class="line">                    <span class="keyword">for</span> ( <span class="keyword">int</span> k = i - ma + <span class="number">1</span> ; k &lt;= i ; k++ )</span><br><span class="line">                        str += a[k];</span><br><span class="line">                    lib.insert ( str );</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> ( <span class="keyword">auto</span> i: lib )</span><br><span class="line">            <span class="built_in">cout</span> &lt;&lt; i &lt;&lt; <span class="string">'\n'</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="後記"><a class="header-anchor" href="#後記"></a>後記</h2><p>在第 37 分鐘的時候就破台了<br>（那時候師大還沒有破台）<br>那時候我跟師大的 penalty 差 67<br>也就是說如果師大 p4 吃超過67的 penalty 我就保證第一了<br>。。。然後師大只吃 66<br>80 抽抽不到術師匠的非洲酋長正常發揮QQ</p><p>下一次沒意外就會去打 PTC 了<br>不過是英文題目<br>我覺得我會扛不起來<br>在此誠徵英文好的選手一名<br>工作：只要幫我翻譯題目就好</p><p>然後這一篇的題解我居然寫了 330 行<br>喔，這行就 331 了 = =<br>雖然看起來很多不過大部分都是 code 就是了</p><!-- rebuild by neat -->]]></content>
      
      
      
        <tags>
            
            <tag> Full Contest Solution </tag>
            
            <tag> ITSA </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Disjoint Set 並查集</title>
      <link href="/code/dsu/"/>
      <url>/code/dsu/</url>
      
        <content type="html"><![CDATA[<!-- build time:Mon May 04 2020 16:50:35 GMT+0800 (Taipei Standard Time) --><p>上一篇blog因為介紹並查集的地方太多了，文章太長<br>所以我今天把昨天介紹並查集那一段拔出來，另外寫一篇文章好了<br>然後會在昨天文章上加入這篇的連結</p><a id="more"></a><h2 id="disjoint-set-並查集"><a class="header-anchor" href="#disjoint-set-並查集"></a>disjoint set 並查集</h2><p>我們會開一個陣列，記錄自己的老大是誰（最一開始的時候，所有人的老大都是自己）<br>在把兩個並查集合併（假設這兩個並查集老大為 $a, b$ ）的時候，把其中一個老大當作是這個新的並查集的老大，也就是把 $a$ 的老大指定為 $b ( dis[a] = b )$<br>至於查詢呢？我們可以用遞迴實作，不斷的遞迴下去直到有一個點老大是自己，則代表說這個點已經是這個並查集的頂了</p><p>這個時候大概會寫出像這樣的 code</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// disjoint set</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> maxN 10005</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> dis[maxN];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">init</span> <span class="params">( <span class="keyword">void</span> )</span></span>&#123;</span><br><span class="line">    <span class="keyword">for</span> ( <span class="keyword">int</span> i = <span class="number">0</span> ; i &lt; maxN ; i++ )</span><br><span class="line">        dis[i] = i;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">find</span> <span class="params">( <span class="keyword">int</span> n )</span></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> dis[n] == n ? dis[n] : find ( dis[n] );</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">Union</span> <span class="params">( <span class="keyword">int</span> a, <span class="keyword">int</span> b )</span></span>&#123;</span><br><span class="line">    dis[a] = b;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">bool</span> <span class="title">same</span> <span class="params">( <span class="keyword">int</span> a, <span class="keyword">int</span> b )</span></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> find ( a ) == find ( b );</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="路徑壓縮"><a class="header-anchor" href="#路徑壓縮"></a>路徑壓縮</h3><p>我們先觀察一下上面的 code，會發現在 find 的時候可能會往上回朔好幾層，而且這個點的老大就固定不變了（除非有新的合併）<br>所以我們會做一個優化，叫做路徑壓縮，在回傳同時，順便紀錄這個點的老大是誰<br>下次就可以直接略過中間的點，直接到老大那了</p><p>find 函數會被改成這樣<br>親民寫法：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">find</span> <span class="params">( <span class="keyword">int</span> n )</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> ( dis[n] == n )</span><br><span class="line">        <span class="keyword">return</span> n;</span><br><span class="line">    <span class="keyword">return</span> dis[n] = find ( n );</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>然後就是會有人（例如我），會想要把它寫在一起<br>所以就變成這樣了XD</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">find</span> <span class="params">( <span class="keyword">int</span> n )</span></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> dis[n] == n ? n : dis[n] = find ( dis[n] );</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>最後這個東西的複雜度會變成均攤 $O ( \log N )$，感覺還不錯</p><h3 id="避免-Stack-Overflow"><a class="header-anchor" href="#避免-Stack-Overflow"></a>避免 Stack Overflow</h3><p>最最最後有個東西也挺重要的<br>因為路徑壓縮還是要按照這個點的遍歷往上爬<br>又是用遞迴實作<br>所以有機會會戳到 Stack overflow<br>然後你就吃 RE 了<br>恭喜多一個 penalty<br>重點是你不知道<strong>這樣會吃到 Stack overflow</strong> 然後就會多吃幾個w</p><p>雖然說現在很多 judge 都避免掉了啦<br>會把 stack 的記憶體大小開的跟那一提的 Memery Limit 一樣大<br>只是難免會戳到那種舊型 judge<br>所以還是乖乖學一下怎麼避免 Stack overflow 吧</p><p>要壓縮遞迴深度，可以有兩種方法</p><h4 id="方法一：random"><a class="header-anchor" href="#方法一：random"></a>方法一：random</h4><p>在 Union 完後隨便戳一個點 find 一下，剛好會把它上面的那一長串都更新一遍<br>但是這東西太機率了，搞不好還是會戳到，只能怪臉黑啦</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">Union</span> <span class="params">( <span class="keyword">int</span> a, <span class="keyword">int</span> b )</span></span>&#123;</span><br><span class="line">    dis[a] = b;</span><br><span class="line">    find ( rand() % n );</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="方法二：Union-by-rank"><a class="header-anchor" href="#方法二：Union-by-rank"></a>方法二：Union by rank</h4><p>把 rank 小的集合接在大的集合上，讓深度平均點，遞迴的時候就比較不會戳到超級深的一條鏈<br>理論上這樣應該不會爆炸，因為深度很平均</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> rk[maxN];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">Union</span> <span class="params">( <span class="keyword">int</span> a, <span class="keyword">int</span> b )</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> ( rk[a] &lt; rk[b] )</span><br><span class="line">        swap ( a, b );</span><br><span class="line">    dis[b] = a;</span><br><span class="line">    rk[b] = rk[a] + <span class="number">1</span> ;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>這樣可以很神奇的把複雜度壓在 $O ( α ( N ) )$ 下<br>那個 $α ( N )$ 是阿克曼函數的反函數，即反阿克曼函數<br>至於那是啥我也不知道，只知道幾乎可以算是常數了</p><p>不過因為通常都會做路徑壓縮，所以 rank 到最後都很小，因此我不常用</p><h4 id="方法三：Union-by-size"><a class="header-anchor" href="#方法三：Union-by-size"></a>方法三：Union by size</h4><p>這也挺直觀的<br>把大小比較小的並查集接在大的下面<br>比較小，需要做改動的點就比較少，對吧</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> sz[maxN];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">Union</span> <span class="params">( <span class="keyword">int</span> a, <span class="keyword">int</span> b )</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> ( sz[a] &gt; sz[b] )</span><br><span class="line">        swap ( a, b );</span><br><span class="line">    dis[a] = b;</span><br><span class="line">    sz[b] += sz[a];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="如果開優化還是爛了呢"><a class="header-anchor" href="#如果開優化還是爛了呢"></a>如果開優化還是爛了呢</h4><p>通常我固定都會開 Union 前 find，如果還是爛掉的話就再加上 Union by Size<br>再爛掉。。。這應該是叫你去寫啟發式合併吧<br>據說那東西比並查集還要快<br>不過我也沒有實作過，所以我並不清楚</p><h3 id="確認是否屬於同一個並查集"><a class="header-anchor" href="#確認是否屬於同一個並查集"></a>確認是否屬於同一個並查集</h3><p>確認的方法很簡單，只要兩個的頭頭都一樣，肯定在同一個並查集內</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">bool</span> <span class="title">same</span> <span class="params">( <span class="keyword">int</span> a, <span class="keyword">int</span> b )</span></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> find ( a ) == find ( b )</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>用以上的方法就可以快速地確認兩個點是否屬於同一個並查集了</p><h2 id="後記"><a class="header-anchor" href="#後記"></a>後記</h2><p>我昨天到底發什麼瘋啊，沒事寫這麼多 dsu 的教學幹嘛 = =<br>現在看了一下，我光 dsu 就寫 171 行了@@<br>覺得累</p><!-- rebuild by neat -->]]></content>
      
      
      
        <tags>
            
            <tag> data structure </tag>
            
            <tag> dsu </tag>
            
            <tag> disjoint set </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>[TOJ][420] C. 藏寶圖</title>
      <link href="/code/TOJ-420/"/>
      <url>/code/TOJ-420/</url>
      
        <content type="html"><![CDATA[<!-- build time:Mon May 04 2020 16:50:35 GMT+0800 (Taipei Standard Time) --><p>今天來講講自己出的題目好了<br>這題是我在今年（2018）六月時排名賽出的題目<br>搞測資搞了一個禮拜，結果賽中只有一個人有認真寫過QQ</p><a id="more"></a><h2 id="題目"><a class="header-anchor" href="#題目"></a>題目</h2><p>先附上<a href="https://toj.tfcis.org/oj/pro/420/" target="_blank" rel="noopener">原題目網址</a></p><p>題意略，總之，就是給定一張圖，求這張圖的 MST 的樹直徑<br>MST 怎麼做？我這邊選用 Kruskal<br>（當然也可以用 Prim 做啦，只是個人習慣寫 Kruskal）</p><h2 id="先備知識"><a class="header-anchor" href="#先備知識"></a>先備知識</h2><p>在提 Kruskal 前，我們先講講 MST 到底是什麼吧</p><h3 id="最小生成樹"><a class="header-anchor" href="#最小生成樹"></a>最小生成樹</h3><p>MST 的正式全名為「最小生成樹」<br>所謂的生成樹就是把這張圖拔掉一些邊後，這張圖<em>沒有環</em>以及<em>所有點都有聯通</em><br>也就是說：<br>假設目前有張圖 $G$ 的子圖 $T$，且 $T$ 上任意兩點間只有<em>剛好</em>一條路徑，則稱 $T$ 為 $G$ 的其中一顆生成樹</p><p>而當一張圖 $G$ 的子圖 $T1$ 且 $T1$ 為 $G$ 之最小生成樹，則代表找不到另外其他同為生成樹的子圖 $T’$ 其邊權重總和比 $T1$ 還要來得大時，就稱 $T1$ 為圖 $G$ 的最小生成樹</p><h3 id="樹直徑"><a class="header-anchor" href="#樹直徑"></a>樹直徑</h3><p>那麼樹直徑又是什麼呢？<br>通常樹直徑就是一棵樹上的任意點對的最長距離</p><h2 id="作法"><a class="header-anchor" href="#作法"></a>作法</h2><h3 id="Kruskal"><a class="header-anchor" href="#Kruskal"></a>Kruskal</h3><p>我先講講Kruskal是什麼好了</p><p>按照MST的定義，有個很直觀的想法</p><ol><li>先按照邊的權重對於所有邊由小到大排序過</li><li>依序取出所有邊，假設這個邊的兩端還不在同一個聯通塊內，則把這個邊加進去 MST 中</li></ol><p>至於要怎麼確認這兩個點是不是屬於同一個聯通塊內呢？總不可能暴力dfs吧<br>這時就要搬另外一個資料結構出來了，叫並查集(disjoint set)<br>詳細內容可以看<a href="https://miohitokiri5474.github.io/code/dsu/">這篇</a></p><h3 id="樹直徑-v2"><a class="header-anchor" href="#樹直徑-v2"></a>樹直徑</h3><p>樹直徑作法通常有兩個：</p><ol><li>dfs時紀錄離當前點 $n_i$ 最遠的點 $u_i$ 以及次遠的點 $v_i$，則所有點 $n_i~u_i + n_i~v_i$ 的距離之最大值就是樹直徑</li><li>先對任意一個點 dfs 一次，找出離該點最遠的點再dfs一次，離該點最遠的最大值就是答案</li></ol><p>作法1還挺好瞭解的，只是實作上可能會出包<br>作法2有點費時間，但是很好寫</p><h2 id="code"><a class="header-anchor" href="#code"></a>code</h2><p>總而言之，我的 code 長這樣<br>是用 Kruskal + dsu 路徑壓縮 + 樹直徑方法二寫的</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// by. MiohitoKiri5474</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> maxN 1000005</span></span><br><span class="line"><span class="keyword">typedef</span> pair &lt; <span class="keyword">int</span>, <span class="keyword">int</span> &gt; pii;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> LL;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> pb push_back</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> F first</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> S second</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">node</span>&#123;</span></span><br><span class="line">    <span class="keyword">int</span> u, v, w;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">bool</span> <span class="title">cmp</span> <span class="params">( node a, node b )</span></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> a.w &lt; b.w;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> dis[maxN];</span><br><span class="line">LL dist[maxN];</span><br><span class="line"><span class="built_in">vector</span> &lt; node &gt; edges;</span><br><span class="line"><span class="built_in">vector</span> &lt; pii &gt; mst[maxN];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">init</span> <span class="params">( <span class="keyword">void</span> )</span></span>&#123;</span><br><span class="line">    <span class="keyword">for</span> ( <span class="keyword">int</span> i = <span class="number">0</span> ; i &lt; maxN ; i++ )</span><br><span class="line">        dis[i] = i;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">find</span> <span class="params">( <span class="keyword">int</span> n )</span></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> dis[n] == n ? n : dis[n] = find ( dis[n] );</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">Union</span> <span class="params">( <span class="keyword">int</span> a, <span class="keyword">int</span> b )</span></span>&#123;</span><br><span class="line">    dis[find ( a )] = find ( b );</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">bool</span> <span class="title">same</span> <span class="params">( <span class="keyword">int</span> a, <span class="keyword">int</span> b )</span></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> find ( a ) == find ( b );</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">Kruskal</span> <span class="params">( <span class="keyword">void</span> )</span></span>&#123;</span><br><span class="line">    sort ( edges.begin(), edges.end(), cmp );</span><br><span class="line">    <span class="keyword">for</span> ( <span class="keyword">auto</span> &amp;i: edges )&#123;</span><br><span class="line">        <span class="keyword">if</span> ( same ( i.u, i.v ) )</span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line">        Union ( i.u, i.v );</span><br><span class="line">        mst[i.u].pb ( pii ( i.v, i.w ) );</span><br><span class="line">        mst[i.v].pb ( pii ( i.u, i.w ) );</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dfs</span> <span class="params">( <span class="keyword">int</span> n, <span class="keyword">int</span> p )</span></span>&#123; <span class="comment">// 樹直徑</span></span><br><span class="line">    <span class="keyword">for</span> ( <span class="keyword">auto</span> i: mst[n] )&#123;</span><br><span class="line">        <span class="keyword">if</span> ( i.F == p )</span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line">        dist[i.F] = dist[n] + i.S;</span><br><span class="line">        dfs ( i.F, n );</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    ios::sync_with_stdio ( <span class="literal">false</span> );</span><br><span class="line">    <span class="built_in">cin</span>.tie ( <span class="number">0</span> );</span><br><span class="line">    <span class="built_in">cout</span>.tie ( <span class="number">0</span> );</span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> n, m, u, v, w, t, idx, now;</span><br><span class="line">    LL ma = <span class="number">-1</span>;</span><br><span class="line">    <span class="built_in">cin</span> &gt;&gt; n &gt;&gt; m;</span><br><span class="line">    init();</span><br><span class="line">    <span class="keyword">while</span> ( m-- )&#123;</span><br><span class="line">        <span class="built_in">cin</span> &gt;&gt; u &gt;&gt; v &gt;&gt; w;</span><br><span class="line">        edges.pb ( node &#123; u, v, w &#125; );</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    Kruskal();</span><br><span class="line"></span><br><span class="line">    dfs ( <span class="number">0</span>, <span class="number">-1</span> );</span><br><span class="line">    <span class="keyword">for</span> ( <span class="keyword">int</span> i = <span class="number">0</span> ; i &lt; n ; i++ )</span><br><span class="line">        <span class="keyword">if</span> ( ma &lt; dist[i] )</span><br><span class="line">            ma = dist[i], idx = i;</span><br><span class="line"></span><br><span class="line">    dist[idx] = <span class="number">0</span>;</span><br><span class="line">    dfs ( idx, <span class="number">-1</span> );</span><br><span class="line">    ma = <span class="number">-1</span>;</span><br><span class="line">    <span class="keyword">for</span> ( <span class="keyword">int</span> i = <span class="number">0</span> ; i &lt; n ; i++ )</span><br><span class="line">        ma = max ( ma, dist[i] );</span><br><span class="line"></span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; ma &lt;&lt; <span class="string">'\n'</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="後記"><a class="header-anchor" href="#後記"></a>後記</h2><p>我這一篇文我有種我是在寫 disjoint set 教學的錯覺<br>覺得累<br>大半篇幅都是在教 disjoint set<br>看來原始 md 檔要破 300 行了呢（倒地</p><p>然後還有那一堆數學式子，看到頭都在痛<br>我個人還蠻喜歡寫那些東西的<br>看起來很猛（就是中二啦 = =<br>不過常常寫到一半會開始懷疑<br>我沒事寫那麼難動幹嘛<br>沒事虐待自己幹嘛<br>話雖如此不過還是寫完了啦XD</p><h2 id="更新-2019-03-06"><a class="header-anchor" href="#更新-2019-03-06"></a>更新(2019/03/06)</h2><p>雖然說不是最近的事了，不過我想我還是提一下好了<br>因為去年十月跟社團上有一點不高興，我要求學弟把我出的題目下架了<br>所以目前在 TOJ 上寫不到這題喔<br>非常抱歉 &gt; &lt;</p><!-- rebuild by neat -->]]></content>
      
      
      
        <tags>
            
            <tag> dfs </tag>
            
            <tag> TOJ </tag>
            
            <tag> MST </tag>
            
            <tag> dsu </tag>
            
            <tag> 樹直徑 </tag>
            
            <tag> Kruskal </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>[TOJ][407] D. 警力配置</title>
      <link href="/code/TOJ-407/"/>
      <url>/code/TOJ-407/</url>
      
        <content type="html"><![CDATA[<!-- build time:Mon May 04 2020 16:50:35 GMT+0800 (Taipei Standard Time) --><p>又是某位捧油問我的問題，用 Messenger 傳太慢了，直接打成一篇 blog 好了= =<br><del>別再給我增加工作量啊垃圾</del><br>我還要把舊站的文章搬過來改成 md 檔啊 = =</p><h2 id="題目"><a class="header-anchor" href="#題目"></a>題目</h2><p>我先附上<a href="http://toj.tfcis.org/oj/pro/407/" target="_blank" rel="noopener">連結</a></p><p>題目敘述大意就是有兩個部門因為要搜查之類的，所以兩兩配對成一個「小組」<br>不過並沒有規定同一人只能屬於一個小組，同一名警察可以同時屬於複數的小組</p><a id="more"></a><p>有了小組就要管理，要管理就要組長，因此局長決定要選出其中一些人當組長<br>組長會有比較好的待遇，但是這些待遇會造成財政負擔，所以希望組長盡可能地少，但是對於任何一個小組至少有一個組長</p><p><strong>注意：至少有一個 $\to$ 有兩個也沒關係</strong></p><p>這超重要啊！我當初以為一組只能有一個所以很順手的寫了個著色，結果這題根本不能用著色寫<br><del>（但是不小心撈到73分，我問號）</del></p><h2 id="解法"><a class="header-anchor" href="#解法"></a>解法</h2><p>很顯然的要先轉成一張圖，這絕對是圖論 = =<br>也就是說題意可以被化簡成這樣：<br>給定一張圖，求至少需要選幾個節點才能保證所有邊都有被這些點接觸到<br>。。。啊不就匈牙利<br>既然知道是匈牙利就好寫啦，不知道匈牙利的可以翻一下<a href="http://www.csie.ntnu.edu.tw/~u91029/Matching.html" target="_blank" rel="noopener">這篇</a><br>然後因為這篇有不少內容，所以請自己 ctrl + F（Mac用戶請用 cmd + F）搜尋一下匈牙利演算法</p><p>因為這題真的是裸題（？）所以我就直接附 code 了</p><h2 id="code"><a class="header-anchor" href="#code"></a>code</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// by. MiohitoKiri5474</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> pb push_back</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> maxN 200005</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">vector</span> &lt; <span class="keyword">int</span> &gt; edges[maxN];</span><br><span class="line"><span class="keyword">int</span> match[maxN], visit[maxN], turn;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">bool</span> <span class="title">dfs</span> <span class="params">( <span class="keyword">int</span> n )</span></span>&#123;</span><br><span class="line">    visit[n] = turn;</span><br><span class="line">    <span class="keyword">for</span> ( <span class="keyword">auto</span> i: edges[n] )&#123;</span><br><span class="line">        <span class="keyword">if</span> ( match[i] == <span class="number">-1</span> || ( visit[match[i]] != turn &amp;&amp; dfs ( match[i] ) ) )&#123;</span><br><span class="line">            match[i] = n;</span><br><span class="line">            match[n] = i;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    ios::sync_with_stdio ( <span class="literal">false</span> );</span><br><span class="line">    <span class="built_in">cin</span>.tie ( <span class="number">0</span> );</span><br><span class="line">    <span class="built_in">cout</span>.tie ( <span class="number">0</span> );</span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> t, m, u, v, p, q, ans;</span><br><span class="line">    <span class="built_in">cin</span> &gt;&gt; t;</span><br><span class="line">    <span class="keyword">while</span> ( t-- )&#123;</span><br><span class="line">        ans = <span class="number">0</span>;</span><br><span class="line">        <span class="built_in">memset</span> ( match, <span class="number">-1</span>, <span class="keyword">sizeof</span> match );</span><br><span class="line">        <span class="keyword">for</span> ( <span class="keyword">auto</span> &amp;i: edges )</span><br><span class="line">            i.clear();</span><br><span class="line">        <span class="built_in">cin</span> &gt;&gt; p &gt;&gt; q &gt;&gt; m;</span><br><span class="line">        <span class="keyword">while</span> ( m-- )&#123;</span><br><span class="line">            <span class="built_in">cin</span> &gt;&gt; u &gt;&gt; v;</span><br><span class="line">            v += p;</span><br><span class="line">            edges[u].pb ( v );</span><br><span class="line">            edges[v].pb ( u );</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        p += q;</span><br><span class="line">        <span class="keyword">for</span> ( <span class="keyword">int</span> i = <span class="number">0</span> ; i &lt;= p ; i++ )&#123;</span><br><span class="line">            <span class="keyword">if</span> ( match[i] == <span class="number">-1</span> )&#123;</span><br><span class="line">                turn++;</span><br><span class="line">                <span class="comment">// 省去每次 dfs 都要 memset 一次 visit 陣列的時間</span></span><br><span class="line">                <span class="keyword">if</span> ( dfs ( i ) )</span><br><span class="line">                    ans++;</span><br><span class="line">                    <span class="comment">// 如果可以找到新的配對就 ans++</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; ans &lt;&lt; <span class="string">'\n'</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="tips"><a class="header-anchor" href="#tips"></a>tips</h2><p>然後這邊我有用到一個小技巧，可以避免 TLE<br>通常在 dfs 一份有環圖時，都會開一個 bool 陣列記錄這個點是否已經處理過了，避免在這邊一直繞造成 stack overflow<br>不過在需要 dfs 數次的時候就需要把這個陣列 memset，需要浪費 $O ( N )$ 的時間（我不是很確定）<br>如果我們把這個陣列開成 int 陣列<br>並且在dfs時不是確認 $visit[n] == true$ 而是確認 $visit[n] == turn$，每到下一輪就把 $turn++$，以便紀錄這是底幾輪<br>這樣就不用浪費時間去 memset 了</p><!-- rebuild by neat -->]]></content>
      
      
      
        <tags>
            
            <tag> graph </tag>
            
            <tag> TOJ </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>[CF][999E] E. REACHABILITY FROM THE CAPITAL</title>
      <link href="/code/CF-999E/"/>
      <url>/code/CF-999E/</url>
      
        <content type="html"><![CDATA[<!-- build time:Mon May 04 2020 16:50:35 GMT+0800 (Taipei Standard Time) --><h2 id="題目-解法"><a class="header-anchor" href="#題目-解法"></a>題目 + 解法</h2><p>這是 CodeForces Round 490 div.3 的題目<br>最近因為 div.3（水題上分 round）的緣故，不小心搭上 rating 通膨的潮流，上了藍人<br>沒有意外下一場應該就會下來了吧<br>先放上題目<a href="http://codeforces.com/problemset/problem/999/E" target="_blank" rel="noopener">連結</a></p><a id="more"></a><p>會寫這題的緣故是因為有某位捧油說他不會寫，前天在台北 ytp 的時候稍微提了下<br>今天想說把它寫成一篇題解吧，等等寫完剛好可以去看昨天 Education Round 的 Final Standing（雖然我沒打）</p><p>講一下題目大意好了<br>首先，給定一張圖有 $N$ 個點、$M$ 條單向邊，並給定一點 $S$<br>求現在這張圖還需要加上幾條邊（當然也是單向的），才可以使 $S$ 與此圖上的任意一點$U$有單向路徑（ $S$ 到 $U$ ）</p><p>有個很直觀的想法如下，首先點會先被分成兩種類型：</p><ol><li>這些點都可以從 $S$ 到達——也就是說，從 $S$ 開始 dfs ，這些點都會經過</li><li>沒有經過的點（從 $S$ 出發到達不了）</li></ol><p>所以要讓剩下的點都可以從 $S$ 到達，那就把邊接在類型2的那些點的頭（從這個點回朔到最頂端的點，有點樹鍊剖分的感覺），不就是最少新增邊的數量了？<br>（因為這些點的頂點可能會重複——即便沒有重複。。。這些點總還是要連接上去吧）</p><h2 id="code"><a class="header-anchor" href="#code"></a>code</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// by. MiohitoKiri5474</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> GCC optimize ( <span class="meta-string">"O3"</span> )</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> loop_opt ( on )</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> maxN 5005</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">vector</span> &lt; <span class="keyword">int</span> &gt; edges[maxN];</span><br><span class="line"><span class="keyword">int</span> pa[maxN];</span><br><span class="line"><span class="keyword">bool</span> used[maxN];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dfs</span> <span class="params">( <span class="keyword">int</span> n, <span class="keyword">int</span> p )</span></span>&#123;</span><br><span class="line">    used[n] = <span class="literal">true</span>;</span><br><span class="line">    pa[n] = p;</span><br><span class="line">    <span class="keyword">for</span> ( <span class="keyword">auto</span> i: edges[n] )&#123;</span><br><span class="line">        <span class="keyword">if</span> ( used[i] )</span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line">        dfs ( i, p );</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    ios::sync_with_stdio ( <span class="literal">false</span> );</span><br><span class="line">    <span class="built_in">cin</span>.tie ( <span class="number">0</span> );</span><br><span class="line">    <span class="built_in">cout</span>.tie ( <span class="number">0</span> );</span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> n, m, s, u, v;</span><br><span class="line">    <span class="built_in">cin</span> &gt;&gt; n &gt;&gt; m &gt;&gt; s;</span><br><span class="line">    <span class="keyword">while</span> ( m-- )&#123;</span><br><span class="line">        <span class="built_in">cin</span> &gt;&gt; u &gt;&gt; v;</span><br><span class="line">        edges[u].push_back ( v );</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    dfs ( s, s );</span><br><span class="line">    <span class="keyword">for</span> ( <span class="keyword">int</span> i = <span class="number">1</span> ; i &lt;= n ; i++ )&#123;</span><br><span class="line">        <span class="keyword">if</span> ( pa[i] == <span class="number">0</span> )&#123;</span><br><span class="line">            <span class="built_in">memset</span> ( used, <span class="number">0</span>, <span class="keyword">sizeof</span> used );</span><br><span class="line">            dfs ( i, i );</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">set</span> &lt; <span class="keyword">int</span> &gt; lib;</span><br><span class="line">    <span class="keyword">for</span> ( <span class="keyword">int</span> i = <span class="number">1</span> ; i &lt;= n ; i++ )&#123;</span><br><span class="line">        <span class="keyword">if</span> ( pa[i] != s )</span><br><span class="line">            lib.insert ( pa[i] );</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; lib.size() &lt;&lt; <span class="string">'\n'</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="tips"><a class="header-anchor" href="#tips"></a>tips</h2><p>可能有些人會有這個疑問：為甚麽我要在每次 dfs 前都把 used（記錄是否已經經過）清空，這樣不是會把某些點的 pa（記錄最頂頭的點是哪個）洗掉嗎，如果那些點已經是可以從 $S$ 到達的，這樣不是有可能會多算？</p><p>是這樣的：我會從這個點開始 dfs，代表我還不確定他的最頂（pa）在哪，意思就是說，我必須要在這個點以及 $S$ 之間加上一條邊，這還挺合理的吧（？</p><p>又，只要我在這個點以及 $S$ 之間加上一條邊了，那麼我好像也不用擔心他的子結點了，反正都會走到<br>所以即便 pa 被覆寫了也是沒有關係的</p><!-- rebuild by neat -->]]></content>
      
      
      
        <tags>
            
            <tag> CodeForces </tag>
            
            <tag> div.3 </tag>
            
            <tag> graph </tag>
            
            <tag> dfs </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>[TOJ][406] C. 軍隊部署</title>
      <link href="/code/TOJ-406/"/>
      <url>/code/TOJ-406/</url>
      
        <content type="html"><![CDATA[<!-- build time:Mon May 04 2020 16:50:35 GMT+0800 (Taipei Standard Time) --><h2 id="題目"><a class="header-anchor" href="#題目"></a>題目</h2><p>老樣子先放連結<br>[TOJ](&lt;<a href="http://toj.tfcis.org/oj/pro/406/" target="_blank" rel="noopener">http://toj.tfcis.org/oj/pro/406/</a>)<br>[ZJ](&lt;<a href="https://zerojudge.tw/ShowProblem?problemid=c460" target="_blank" rel="noopener">https://zerojudge.tw/ShowProblem?problemid=c460</a>)<br>這是去年（106年）全國學科能力競賽資訊科全國賽的pC<br>分類上算是水題一枚（按照去年整體難度來說）</p><p>題目大意略，總之，希望創造出一個軍隊，同時包含對空、範圍、遠距攻擊都有的軍隊</p><a id="more"></a><h2 id="解法"><a class="header-anchor" href="#解法"></a>解法</h2><p>所以如果我們先不看種族，我們先看能力就好，可以看成：</p><ul><li>第一位：是否對空，是為 $1$，否為 $0$</li><li>第二位：是否範圍，是為 $1$，否為 $0$</li><li>第三位：是否遠距，是為 $1$，否為 $0$</li></ul><p>所以如果有一個兵種，同時對空、遠距，但是不支援範圍攻擊，則會被寫成這樣：$(101)_2$<br>然後，咦？看起來好像二進位呢！那我們把這個數字看成二進位轉成十進位吧<br>會發現題目所有數字都不會大於 $7$，因為數字最大時就是所有功能都有，然後 $4 + 2 + 1 = 7$</p><p>接著是種族，有三種族，所以代號為$1, 2, 3$</p><p>那麼來做dp陣列的規劃吧<br>$dp[i][j]$ 代表：種族為 $i$ 的某兵種，具有代號為 $j$ 的功能</p><p>然後要求是三種族、三功能都要有，所以<strong>那三種兵種的代號做位元運算 or 的時候要為7（$(111)_2$），並同時包含三種族</strong></p><p>呃我這邊可能講的有點不好，但是我當初就是有點直覺得就這樣想<br>看 code 可能會比較好瞭解，我 code 放下面</p><h2 id="code"><a class="header-anchor" href="#code"></a>code</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// by. MiohitoKiri5474</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">long</span> <span class="keyword">long</span> dp[<span class="number">5</span>][<span class="number">10</span>];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    ios::sync_with_stdio ( <span class="literal">false</span> );</span><br><span class="line">    <span class="built_in">cin</span>.tie ( <span class="number">0</span> );</span><br><span class="line">    <span class="built_in">cout</span>.tie ( <span class="number">0</span> );</span><br><span class="line"></span><br><span class="line">    <span class="keyword">long</span> <span class="keyword">long</span> n, x, y, z, w, ans = <span class="number">0</span>;</span><br><span class="line">    <span class="built_in">cin</span> &gt;&gt; n;</span><br><span class="line">    <span class="keyword">for</span> ( <span class="keyword">int</span> i = <span class="number">0</span> ; i &lt; n ; i++ )&#123;</span><br><span class="line">        <span class="built_in">cin</span> &gt;&gt; w &gt;&gt; x &gt;&gt; y &gt;&gt; z;</span><br><span class="line">        dp[w][x * <span class="number">4</span> + y * <span class="number">2</span> + z]++;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> ( <span class="keyword">int</span> i = <span class="number">0</span> ; i &lt; <span class="number">8</span> ; i++ )</span><br><span class="line">        <span class="keyword">for</span> ( <span class="keyword">int</span> j = <span class="number">0</span> ; j &lt; <span class="number">8</span> ; j++ )</span><br><span class="line">            <span class="keyword">for</span> ( <span class="keyword">int</span> k = <span class="number">0</span> ; k &lt; <span class="number">8</span> ; k++ )</span><br><span class="line">                <span class="keyword">if</span> ( ( i | j | k ) == <span class="number">7</span> )</span><br><span class="line">                    ans += dp[<span class="number">1</span>][i] * dp[<span class="number">2</span>][j] * dp[<span class="number">3</span>][k];</span><br><span class="line"></span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; ans &lt;&lt; <span class="string">'\n'</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><!-- rebuild by neat -->]]></content>
      
      
      
        <tags>
            
            <tag> dp </tag>
            
            <tag> TOJ </tag>
            
            <tag> ZJ </tag>
            
            <tag> 全國賽 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>[CF][920F] F. SUM AND REPLACE</title>
      <link href="/code/CF-920F/"/>
      <url>/code/CF-920F/</url>
      
        <content type="html"><![CDATA[<!-- build time:Mon May 04 2020 16:50:35 GMT+0800 (Taipei Standard Time) --><h2 id="前言"><a class="header-anchor" href="#前言"></a>前言</h2><p>好久沒有發題解了，今天心血來潮來寫一篇吧<br>今天的內容是 CodeForces Education Round 37 ( Rated for Div.2 )的 pF<br>pF，感覺很難？其實還好， 因為這是 Education</p><a id="more"></a><h2 id="題目"><a class="header-anchor" href="#題目"></a>題目</h2><p>不管，翻譯下題目好了，畢竟原題是英文的<br>要原題連結的<a href="http://codeforces.com/problemset/problem/920/F" target="_blank" rel="noopener">在這</a></p><p>給定一個長度為N的序列，並有兩種輸入要處理：</p><ol><li>對區間 $l, r$ 做操作 $D$（等等寫在下面）</li><li>查詢區間和</li></ol><p>操作 $D$ ：把該數字轉換成此數字的因數個數，例如原先的數字是 $6$ ，則操作後會變成 $4$（ $6$ 的因數有 ${1, 2, 3, 6}$，共四個）</p><h2 id="解法"><a class="header-anchor" href="#解法"></a>解法</h2><p>嗯。。。區間操作？區間和？<br>怎麼看都是線段樹，但是問題是：操作<br>因為操作要查詢的是因數個數，我想不到更好的做法，所以就直接暴力，但是我只有跑到 $\sqrt{N}$，證明我等等再打</p><p>好，我們先觀察一下：</p><ol><li>只要數字是 $1$ 或 $2$ 就不用繼續操作下去了，對吧（ $2$ 的因數有 $1, 2$，$1$ 的因數只有 $1$ ，所以這兩個數字怎麼操作之後不會變）</li><li>越小的數字出現機率越大，也就是更容易使用，所以我們再建一個表，把用過的數字存起來，如果這個數字沒有計算過再算，不然就直接回傳結果</li></ol><p>接著是最後一個問題：該如何處理區間操作<br>對於處理這種無法打 Lazy Tag 的問題（因為這題就算打 Lazy Tag 還是要做 $K$（需要進行的操作次數）次，所以打 Lazy Tag 並沒有任何意義）<br>不過有種做法叫<strong>找收斂點（終止點）</strong></p><p>剛剛有提到，當數字為 $1$ 或 $2$ 進行操作並沒有任何意義，所以可以把此區間到底還有沒有 $\ge 2$ 的數字當作是否繼續進行操作的依據</p><p>到這，可能有人想到我之前發的某一題，題目是區間取模，所以紀錄區間最大值，如果有比當前需要操作的$m$還有大的數字才需要繼續進行操作，詳細可以看<a href="https://miohitokiri.github.io/code/TOJ-391/" target="_blank" rel="noopener">這篇</a></p><p>不過大概算了一下，這樣需要開到$8\times N$的記憶體，感覺會 MLE<br>所以我先拿區間和開刀，如果當前區間和 $\ge 2\times range（區間大小）$ 再繼續進行操作<br>。。。然後我就 WA 了，請想想如果當前區間內元素為 ${ 1, 1, 1, 3 }$ 的時候</p><p>有夠陰，總和為 $8$ ，乍看之下不需要做操作，但是實際上卻有需要進行修改的數字<br>所以我只能再開一顆線段樹（ bool的），記錄當前區間是否有數字 $\ge 2$</p><p>本來不想要開第二顆線段樹，到頭來還不是開了</p><h2 id="code"><a class="header-anchor" href="#code"></a>code</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// by. MiohitoKiri5474</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> LL;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> maxN 300005</span></span><br><span class="line"></span><br><span class="line">LL sum[maxN &lt;&lt; <span class="number">2</span>], dp[<span class="number">1000005</span>];</span><br><span class="line"><span class="keyword">bool</span> used[maxN &lt;&lt; <span class="number">2</span>];</span><br><span class="line"><span class="built_in">vector</span> &lt; <span class="keyword">int</span> &gt; prime;</span><br><span class="line"><span class="built_in">bitset</span> &lt; 1005 &gt; lib;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">D</span> <span class="params">( <span class="keyword">int</span> n )</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> ( dp[n] != <span class="number">-1</span> )</span><br><span class="line">        <span class="keyword">return</span> dp[n];</span><br><span class="line">    <span class="keyword">double</span> www = <span class="built_in">sqrt</span> ( n );</span><br><span class="line">    <span class="keyword">int</span> ma = www, res = <span class="number">0</span>, maa = ma + <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span> ( <span class="keyword">int</span> i = <span class="number">1</span> ; i &lt; maa ; i++ )</span><br><span class="line">        n % i ? res : res++;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> dp[n] = res * <span class="number">2</span> - ( www == ma ? <span class="number">1</span> : <span class="number">0</span> );</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">build</span> <span class="params">( <span class="keyword">int</span> l, <span class="keyword">int</span> r, <span class="keyword">int</span> n )</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> ( l == r )&#123;</span><br><span class="line">        <span class="built_in">cin</span> &gt;&gt; sum[n];</span><br><span class="line">        used[n] = ( sum[n] &gt; <span class="number">2</span> );</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="keyword">int</span> mid = ( l + r ) &gt;&gt; <span class="number">1</span>, leftSon = n &lt;&lt; <span class="number">1</span>, rightSon = leftSon | <span class="number">1</span>;</span><br><span class="line">        build ( l, mid, leftSon );</span><br><span class="line">        build ( mid + <span class="number">1</span>, r, rightSon );</span><br><span class="line"></span><br><span class="line">        sum[n] = sum[leftSon] + sum[rightSon];</span><br><span class="line">        used[n] = ( used[leftSon] || used[rightSon] );</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> LL <span class="title">query</span> <span class="params">( <span class="keyword">int</span> l, <span class="keyword">int</span> r, <span class="keyword">int</span> nowL, <span class="keyword">int</span> nowR, <span class="keyword">int</span> n )</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> ( l &lt;= nowL &amp;&amp; nowR &lt;= r )</span><br><span class="line">        <span class="keyword">return</span> sum[n];</span><br><span class="line">    <span class="keyword">int</span> mid = ( nowL + nowR ) &gt;&gt; <span class="number">1</span>, leftSon = n &lt;&lt; <span class="number">1</span>, rightSon = leftSon | <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">if</span> ( r &lt;= mid )</span><br><span class="line">        <span class="keyword">return</span> query ( l, r, nowL, mid, leftSon );</span><br><span class="line">    <span class="keyword">if</span> ( mid &lt; l )</span><br><span class="line">        <span class="keyword">return</span> query ( l, r, mid + <span class="number">1</span>, nowR, rightSon );</span><br><span class="line">    <span class="keyword">return</span> query ( l, r, nowL, mid, leftSon ) + query ( l, r, mid + <span class="number">1</span>, nowR, rightSon );</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">modify</span> <span class="params">( <span class="keyword">int</span> l, <span class="keyword">int</span> r, <span class="keyword">int</span> nowL, <span class="keyword">int</span> nowR, <span class="keyword">int</span> n )</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> ( !used[n] )</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    <span class="keyword">if</span> ( nowL == nowR )&#123;</span><br><span class="line">        sum[n] = D ( sum[n] );</span><br><span class="line">        used[n] = ( sum[n] &gt; <span class="number">2</span> );</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="keyword">int</span> mid = ( nowL + nowR ) &gt;&gt; <span class="number">1</span>, leftSon = n &lt;&lt; <span class="number">1</span>, rightSon = leftSon | <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">if</span> ( r &lt;= mid )</span><br><span class="line">            modify ( l, r, nowL, mid, leftSon );</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> ( mid &lt; l )</span><br><span class="line">            modify ( l, r, mid + <span class="number">1</span>, nowR, rightSon );</span><br><span class="line">        <span class="keyword">else</span>&#123;</span><br><span class="line">            modify ( l, r, nowL, mid, leftSon );</span><br><span class="line">            modify ( l, r, mid + <span class="number">1</span>, nowR, rightSon );</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        sum[n] = sum[leftSon] + sum[rightSon];</span><br><span class="line">        used[n] = ( used[leftSon] || used[rightSon] );</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    ios::sync_with_stdio ( <span class="literal">false</span> );</span><br><span class="line">    <span class="built_in">cin</span>.tie ( <span class="number">0</span> );</span><br><span class="line">    <span class="built_in">cout</span>.tie ( <span class="number">0</span> );</span><br><span class="line"></span><br><span class="line">    lib[<span class="number">0</span>] = lib[<span class="number">1</span>] = <span class="literal">true</span>;</span><br><span class="line">    <span class="keyword">for</span> ( <span class="keyword">int</span> i = <span class="number">2</span> ; i &lt; <span class="number">1005</span> ; i++ )&#123;</span><br><span class="line">        <span class="keyword">if</span> ( !lib[i] )&#123;</span><br><span class="line">            prime.push_back ( i );</span><br><span class="line">            <span class="keyword">for</span> ( <span class="keyword">int</span> j = i &lt;&lt; <span class="number">1</span> ; j &lt; <span class="number">1005</span> ; j += i )</span><br><span class="line">                lib[j] = <span class="literal">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">memset</span> ( dp, <span class="number">-1</span>, <span class="keyword">sizeof</span> dp );</span><br><span class="line">    <span class="keyword">int</span> n, m, type, l, r, stop;</span><br><span class="line">    <span class="built_in">cin</span> &gt;&gt; n &gt;&gt; m;</span><br><span class="line">    build ( <span class="number">1</span>, n, <span class="number">1</span> );</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> ( m-- )&#123;</span><br><span class="line">        <span class="built_in">cin</span> &gt;&gt; type &gt;&gt; l &gt;&gt; r;</span><br><span class="line">        <span class="keyword">if</span> ( type == <span class="number">1</span> )</span><br><span class="line">            modify ( l, r, <span class="number">1</span>, n, <span class="number">1</span> );</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            <span class="built_in">cout</span> &lt;&lt; query ( l, r, <span class="number">1</span>, n, <span class="number">1</span> ) &lt;&lt; <span class="string">'\n'</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="證明（？"><a class="header-anchor" href="#證明（？"></a>證明（？</h2><p>接下來來證明一下（也不能算是證明啦）為什麼只需要跑過 $\sqrt{N}$ 的數字就好了<br>假設現在要進行操作的數字為$N$，且有另外一個數字 $i$ 為 $N$ 的因數<br>這樣代表說 $\frac{N}{i}$ 也是另外一個$N$的因數對吧，我們在這邊令 $j = \frac{N}{i} \to i \times j = N$<br>假設 $i\le j$ 帶入上面的式子，$i^2\le N\to i\le\sqrt{N}$<br>故得證</p><p>。。。好啦，我感覺我寫的證明不是對的 &gt; &lt;<br>以上證明僅供參考</p><!-- rebuild by neat -->]]></content>
      
      
      
        <tags>
            
            <tag> CodeForces </tag>
            
            <tag> Education Round </tag>
            
            <tag> segment tree </tag>
            
            <tag> data structure </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>[TOJ][391] E. 模數 CANDY</title>
      <link href="/code/TOJ-391/"/>
      <url>/code/TOJ-391/</url>
      
        <content type="html"><![CDATA[<!-- build time:Mon May 04 2020 16:50:35 GMT+0800 (Taipei Standard Time) --><h2 id="題目-解法"><a class="header-anchor" href="#題目-解法"></a>題目 &amp; 解法</h2><p>我先附上題目<a href="http://toj.tfcis.org/oj/pro/391/" target="_blank" rel="noopener">連結</a><br>簡單來說，就是區間取餘數<br>然後這東西<strong>可以用線段樹實作</strong></p><a id="more"></a><p>然後問題來了，這種東西不能打 Lazy Tag 做（可以想一下為什麼，解答放文末），所以只能用類似於「區間開根號」的做法<br>在寫區間開根號的時候，我們用的是<strong>區間最大值線段樹</strong>，是的，區間最大值</p><p>理由很簡單，因為開根號開到最後，一定會朝向$1$收斂<br>所以只要當前區間的最大值為 $1$ 的時候，就不用繼續向下遞迴最修改了，對吧</p><p>同理，我們也可以用類似於這個的做法，一樣是區間最大值線段樹<strong>在修改時的終止條件是：當前區間最大值 ≤ 我們想要取模的那個數</strong><br>這應該算是一種剪枝（吧</p><h2 id="code"><a class="header-anchor" href="#code"></a>code</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// by. MiohitoKiri5474</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> GCC optimize ( <span class="meta-string">"O3"</span> )</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> loop_opt ( on )</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> maxN 200005</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> seg[maxN &lt;&lt; <span class="number">2</span>];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">update</span> <span class="params">( <span class="keyword">int</span> l, <span class="keyword">int</span> r, <span class="keyword">int</span> index, <span class="keyword">int</span> value, <span class="keyword">int</span> n )</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> ( l == r )</span><br><span class="line">        seg[n] += value;</span><br><span class="line">    <span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="keyword">int</span> mid = ( l + r ) &gt;&gt; <span class="number">1</span>, leftSon = n &lt;&lt; <span class="number">1</span>, rightSon = leftSon | <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">if</span> ( index &lt;= mid )</span><br><span class="line">            update ( l, mid, index, value, leftSon );</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            update ( mid + <span class="number">1</span>, r, index, value, rightSon );</span><br><span class="line"></span><br><span class="line">        seg[n] = max ( seg[leftSon], seg[rightSon] );</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">modify</span> <span class="params">( <span class="keyword">int</span> l, <span class="keyword">int</span> r, <span class="keyword">int</span> nowL, <span class="keyword">int</span> nowR, <span class="keyword">int</span> value, <span class="keyword">int</span> n )</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> ( seg[n] &lt; value )</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    <span class="keyword">if</span> ( nowL == nowR )</span><br><span class="line">        seg[n] %= value;</span><br><span class="line">    <span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="keyword">int</span> mid = ( nowL + nowR ) &gt;&gt; <span class="number">1</span>, leftSon = n &lt;&lt; <span class="number">1</span>, rightSon = leftSon | <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">if</span> ( r &lt;= mid )</span><br><span class="line">            modify ( l, r, nowL, mid, value, leftSon );</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> ( mid &lt; l )</span><br><span class="line">            modify ( l, r, mid + <span class="number">1</span>, nowR, value, rightSon );</span><br><span class="line">        <span class="keyword">else</span>&#123;</span><br><span class="line">            modify ( l, mid, nowL, mid, value, leftSon );</span><br><span class="line">            modify ( mid + <span class="number">1</span>, r, mid + <span class="number">1</span>, nowR, value, rightSon );</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        seg[n] = max ( seg[leftSon], seg[rightSon] );</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    ios::sync_with_stdio ( <span class="literal">false</span> );</span><br><span class="line">    <span class="built_in">cin</span>.tie ( <span class="number">0</span> );</span><br><span class="line">    <span class="built_in">cout</span>.tie ( <span class="number">0</span> );</span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> n, m, type, l, r, x, in;</span><br><span class="line">    <span class="built_in">cin</span> &gt;&gt; n;</span><br><span class="line">    n--;</span><br><span class="line">    <span class="keyword">for</span> ( <span class="keyword">int</span> i = <span class="number">0</span> ; i &lt;= n ; i++ )&#123;</span><br><span class="line">        <span class="built_in">cin</span> &gt;&gt; in;</span><br><span class="line">        update ( <span class="number">0</span>, n, i, in, <span class="number">1</span> );</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">cin</span> &gt;&gt; m;</span><br><span class="line">    <span class="keyword">while</span> ( m-- )&#123;</span><br><span class="line">        <span class="built_in">cin</span> &gt;&gt; type;</span><br><span class="line">        <span class="keyword">if</span> ( type == <span class="number">1</span> )&#123;</span><br><span class="line">            <span class="built_in">cin</span> &gt;&gt; l &gt;&gt; r;</span><br><span class="line">            update ( <span class="number">0</span>, n, r, l, <span class="number">1</span> );</span><br><span class="line">        &#125;        </span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> ( type == <span class="number">2</span> )&#123;</span><br><span class="line">            <span class="built_in">cin</span> &gt;&gt; l &gt;&gt; r &gt;&gt; x;</span><br><span class="line">            modify ( l, r, <span class="number">0</span>, n, x, <span class="number">1</span> );</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            <span class="built_in">cout</span> &lt;&lt; seg[<span class="number">1</span>] &lt;&lt; <span class="string">'\n'</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><del>所以其實這題也不難嘛</del></p><p>為什麼不能打 Lazy Tag？</p><p>。。。因為 mod 沒有疊加性啊</p><h2 id="證明"><a class="header-anchor" href="#證明"></a>證明</h2><p>然後我來證明一下為什麼這樣做幾乎等同於單點修改的東西會過<br>因為取 mod 至少會把數字砍掉一半（讀者可以自行想想）<br>所以總複雜度大約為 $O ( log ( max \lbrace a_i \rbrace ) )$ 左右<br>（此部分感謝 jd3 學長提供）</p><!-- rebuild by neat -->]]></content>
      
      
      
        <tags>
            
            <tag> segment tree </tag>
            
            <tag> TOJ </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>[TIOJ][1795] 咕嚕咕嚕呱啦呱啦</title>
      <link href="/code/TIOJ-1795/"/>
      <url>/code/TIOJ-1795/</url>
      
        <content type="html"><![CDATA[<!-- build time:Mon May 04 2020 16:50:35 GMT+0800 (Taipei Standard Time) --><p>這題目的名字感覺很有（ㄓˋ）趣（ㄓㄤˋ），但是其實算是水題。。。吧</p><h2 id="題目"><a class="header-anchor" href="#題目"></a>題目</h2><p>題目連結<a href="https://tioj.ck.tp.edu.tw/problems/1795" target="_blank" rel="noopener">在這</a></p><p>給定 $N$ 個點 $M$ 條邊，以及所有邊的邊權重，是否有辦法建構出一顆生成樹之權重總和剛好為$K$<br>另外，任意一條邊的權重只有可能為 $0 or 1$</p><a id="more"></a><h2 id="解法"><a class="header-anchor" href="#解法"></a>解法</h2><p>只要做出最小生成樹以及最大生成樹就好了，證明如下<br>假定這張簡單圖的最小生成樹權重和為$lb$，最大生成樹權重和為 $ub$ ，則：<br>$$ub = lb + ( 剩下的邊中，權重為1，且能替換掉mst中邊權重為0的邊的權重和 )$$<br>又，邊權重只有可能為 $0 or 1$，所以只要$lb/le k\le ub$，肯定存在一組以上的組合，可以建構出權重和為 $K$ 且 $lb\le k\e ub$ 的生成樹</p><h2 id="code"><a class="header-anchor" href="#code"></a>code</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// by. MiohitoKiri5474</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> LL;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> maxN 100005</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">bridge</span>&#123;</span></span><br><span class="line">    <span class="keyword">int</span> u, v, w;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">disjionSet</span>&#123;</span></span><br><span class="line">    <span class="keyword">int</span> dis[maxN];</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">Init</span> <span class="params">( <span class="keyword">void</span> )</span></span>&#123;</span><br><span class="line">        <span class="keyword">for</span> ( <span class="keyword">int</span> i = <span class="number">0</span> ; i &lt; maxN ; i++ )</span><br><span class="line">            dis[i] = i;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">find</span> <span class="params">( <span class="keyword">int</span> n )</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> dis[n] == n ? n : dis[n] = find ( dis[n] );</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">inline</span> <span class="keyword">bool</span> <span class="title">same</span> <span class="params">( <span class="keyword">int</span> a, <span class="keyword">int</span> b )</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> find ( a ) == find ( b );</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">Union</span> <span class="params">( <span class="keyword">int</span> a, <span class="keyword">int</span> b )</span></span>&#123;</span><br><span class="line">        dis[find ( a )] = find ( b );</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="built_in">vector</span> &lt; bridge &gt; edges;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">bool</span> <span class="title">cmp</span> <span class="params">( bridge a, bridge b )</span></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> a.w &lt; b.w;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    ios::sync_with_stdio ( <span class="literal">false</span> );</span><br><span class="line">    <span class="built_in">cin</span>.tie ( <span class="number">0</span> );</span><br><span class="line">    <span class="built_in">cout</span>.tie ( <span class="number">0</span> );</span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> n, m, k, u, v, w, ub = <span class="number">0</span>, lb = <span class="number">0</span>;</span><br><span class="line">    disjionSet dis;</span><br><span class="line">    <span class="built_in">cin</span> &gt;&gt; n &gt;&gt; m &gt;&gt; k;</span><br><span class="line">    <span class="keyword">while</span> ( m-- )&#123;</span><br><span class="line">        <span class="built_in">cin</span> &gt;&gt; u &gt;&gt; v &gt;&gt; w;</span><br><span class="line">        edges.push_back ( bridge &#123; u, v, w &#125; );</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    sort ( edges.begin(), edges.end(), cmp );</span><br><span class="line">    dis.Init();</span><br><span class="line">    <span class="keyword">for</span> ( <span class="keyword">auto</span> i: edges )&#123;</span><br><span class="line">        <span class="keyword">if</span> ( dis.same ( i.u, i.v ) )</span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line"></span><br><span class="line">        dis.Union ( i.u, i.v );</span><br><span class="line">        lb += i.w;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    reverse ( edges.begin(), edges.end() );</span><br><span class="line">    dis.Init();</span><br><span class="line">    <span class="keyword">for</span> ( <span class="keyword">auto</span> i: edges )&#123;</span><br><span class="line">        <span class="keyword">if</span> ( dis.same ( i.u, i.v ) )</span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line"></span><br><span class="line">        dis.Union ( i.u, i.v );</span><br><span class="line">        ub += i.w;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; ( lb &lt;= k &amp;&amp; k &lt;= ub ? <span class="string">"TAK"</span> : <span class="string">"NIE"</span> ) &lt;&lt; <span class="string">'\n'</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><!-- rebuild by neat -->]]></content>
      
      
      
        <tags>
            
            <tag> TIOJ </tag>
            
            <tag> math </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>[UVA][00459]GRAPH CONNECTIVITY</title>
      <link href="/code/uva00459/"/>
      <url>/code/uva00459/</url>
      
        <content type="html"><![CDATA[<!-- build time:Mon May 04 2020 16:50:35 GMT+0800 (Taipei Standard Time) --><h2 id="題目-解法"><a class="header-anchor" href="#題目-解法"></a>題目 &amp; 解法</h2><p><a href="https://uva.onlinejudge.org/index.php?option=com_onlinejudge&amp;Itemid=8&amp;page=show_problem&amp;problem=400" target="_blank" rel="noopener">原題目網址</a></p><p>簡言之就是求一片森林內的樹數量，輸入處理有點麻煩，但是在計算上只要用五行的dfs跑過整片森林就夠了。</p><p>喔，還有可能有重邊，避免麻煩可以用 set 寫，但是常數會比較大（比起 vector）</p><a id="more"></a><p>最一開始我是用 set 寫，因為邊有可能重複，又懶得檢查當前 vector 內有沒有重複的節點，想說數字也不會太大($N\le 26$) 所以就直接用 set 了</p><p>後來發現。。。就算重複了也無仿啊 = =</p><h2 id="code"><a class="header-anchor" href="#code"></a>code</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// by. MiohitoKiri5474</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> GCC optimize ( <span class="meta-string">"O3"</span> )</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> loop_opt ( on )</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> LL;</span><br><span class="line"></span><br><span class="line"><span class="comment">// define tools</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> REPP(i,f,s) for ( int i = f ; i &lt; s ; i++ )</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> REPALL(i,n) for ( auto &amp;i: n )</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MEM(n,i) memset ( n, i, sizeof n )</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="built_in">set</span> &lt; <span class="keyword">int</span> &gt; si;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> CLR(n) n.clear()</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> GL(n) getline ( cin, n )</span></span><br><span class="line"></span><br><span class="line">si edge[<span class="number">30</span>];</span><br><span class="line"><span class="keyword">bool</span> go[<span class="number">30</span>];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">dfs</span> <span class="params">( <span class="keyword">int</span> n )</span></span>&#123;</span><br><span class="line">    go[n] = <span class="literal">true</span>;</span><br><span class="line">    REPALL ( i, edge[n] )</span><br><span class="line">        <span class="keyword">if</span> ( !go[i] )</span><br><span class="line">            dfs ( i );</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    ios::sync_with_stdio ( <span class="literal">false</span> );</span><br><span class="line">    <span class="built_in">cin</span>.tie ( <span class="number">0</span> );</span><br><span class="line">    <span class="built_in">cout</span>.tie ( <span class="number">0</span> );</span><br><span class="line"></span><br><span class="line">    <span class="built_in">string</span> str;</span><br><span class="line">    <span class="keyword">int</span> n, u, v, ans, cnt = <span class="number">0</span>, t;</span><br><span class="line">    <span class="built_in">cin</span> &gt;&gt; t;</span><br><span class="line">    t++;</span><br><span class="line">    <span class="keyword">while</span> ( t-- )&#123;</span><br><span class="line">        GL ( str );</span><br><span class="line">        MEM ( go, <span class="number">0</span> );</span><br><span class="line">        REPP ( i, <span class="number">0</span>, <span class="number">30</span> )</span><br><span class="line">            CLR ( edge[i] );</span><br><span class="line"></span><br><span class="line">        n = str[<span class="number">0</span>] - <span class="string">'A'</span>;</span><br><span class="line">        ans = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span> ( GL ( str ) )&#123;</span><br><span class="line">            <span class="keyword">if</span> ( EMP ( str ) )</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line"></span><br><span class="line">            u = str[<span class="number">0</span>] - <span class="string">'A'</span>, v = str[<span class="number">1</span>] - <span class="string">'A'</span>;</span><br><span class="line">            edge[u].insert ( v );</span><br><span class="line">            edge[v].insert ( u );</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        n++;</span><br><span class="line">        REPP ( i, <span class="number">0</span>, n )</span><br><span class="line">            <span class="keyword">if</span> ( !go[i] )&#123;</span><br><span class="line">                ans++;</span><br><span class="line">                dfs ( i );</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> ( !cnt++ )</span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line">        <span class="keyword">if</span> ( cnt++ &gt; <span class="number">2</span> )</span><br><span class="line">            <span class="built_in">cout</span> &lt;&lt; <span class="string">'\n'</span>;</span><br><span class="line"></span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; ans &lt;&lt; <span class="string">"\n"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><!-- rebuild by neat -->]]></content>
      
      
      
        <tags>
            
            <tag> graph </tag>
            
            <tag> dfs </tag>
            
            <tag> UVa </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>[TOJ][365]G.大龍貓</title>
      <link href="/code/TOJ-365/"/>
      <url>/code/TOJ-365/</url>
      
        <content type="html"><![CDATA[<!-- build time:Mon May 04 2020 16:50:35 GMT+0800 (Taipei Standard Time) --><h2 id="題目"><a class="header-anchor" href="#題目"></a>題目</h2><p>給定一個數列，為一群龍貓的『高度』<br>定義只要 $a_i + 1 = a_{i + 1}$ 就稱為愉悅龍貓群<br>請實作出支援單點修改及區間查詢的 code<br><a href="http://toj.tfcis.org/oj/pro/365/" target="_blank" rel="noopener">題目原網址</a></p><a id="more"></a><h2 id="解法"><a class="header-anchor" href="#解法"></a>解法</h2><p>先定義一個資料型態 $piece$，裡面包含了一個愉悅龍貓群的資料：開始位置、結束位置、長度（長度可有可無，只是計算上方便）</p><p>接著定義另外一種資料型態，用在線段樹上維護的 $node$<br>$node$ 包含三個 $piece$，分別是這區間內，從區間頭開始的愉悅龍貓群、最長愉悅龍貓群、結束於區間尾的愉悅龍貓群，總共三個</p><p>在 up 兩個 $node$ 的時候（假設兩個 $node$ 分別叫 $l, r $、up 後的 $node$ 叫 $stop$ 好了，相對位置 $l$ 在 $r$ 前面），$l.fro$ 一定是 $stop.fro$ ————因為在這兩個區間裡，最前面的愉悅龍貓群一定是 $l.fro$，同理，$stop.bck$ 一定是 $r.bck$</p><p>那麼，$stop.ma$ 呢？</p><p>$stop.ma$ 有兩種可能性，第一種就是 $l.ma$ 或 $r.ma$ 的其中一個（看誰長度大就誰），另外一種就是，如果 $merge ( l.bck, r.fro )$也是一個愉悅龍貓群的時候，可能會比 $l.ma$ 或 $r.ma$ 還要大</p><h2 id="總結"><a class="header-anchor" href="#總結"></a>總結</h2><p>其實這題不難，只是 coding 有點複雜，query &amp; update 都與正常的線段樹差不多，只是 up 需要思考一下（？）</p><h2 id="code"><a class="header-anchor" href="#code"></a>code</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// by. MiohitoKiri5474</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> maxN 100005</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">piece</span>&#123;</span></span><br><span class="line">    <span class="keyword">int</span> f, s, sz;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">bool</span> <span class="title">same</span> <span class="params">( piece a, piece b )</span></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> a.f == b.f &amp;&amp; a.s == b.s;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">node</span>&#123;</span></span><br><span class="line">    piece fro, bck, ma;</span><br><span class="line">&#125; seg[maxN &lt;&lt; <span class="number">2</span>];</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> basic[maxN];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> node <span class="title">up</span> <span class="params">( node L, node R )</span></span>&#123;</span><br><span class="line">    node res;</span><br><span class="line">    res.fro = L.fro, res.bck = R.bck, res.ma = ( L.ma.sz &gt; R.ma.sz ? L.ma : R.ma );</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> ( basic[L.bck.s] + <span class="number">1</span> == basic[R.fro.f] )&#123;</span><br><span class="line">        piece stop = piece &#123; L.bck.f, R.fro.s, R.fro.s - L.bck.f + <span class="number">1</span> &#125;;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> ( same ( L.fro, L.bck ) )</span><br><span class="line">            res.fro = stop;</span><br><span class="line">        <span class="keyword">if</span> ( same ( R.fro, R.bck ) )</span><br><span class="line">            res.bck = stop;</span><br><span class="line"></span><br><span class="line">        res.ma = ( stop.sz &gt; res.ma.sz ? stop : res.ma );</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">build</span> <span class="params">( <span class="keyword">int</span> l, <span class="keyword">int</span> r, <span class="keyword">int</span> n )</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> ( l == r )</span><br><span class="line">        seg[n].fro = seg[n].bck = seg[n].ma = piece &#123; l, r, <span class="number">1</span> &#125;;</span><br><span class="line">    <span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="keyword">int</span> mid = ( l + r ) &gt;&gt; <span class="number">1</span>, leftSon = n &lt;&lt; <span class="number">1</span>, rightSon = leftSon | <span class="number">1</span>;</span><br><span class="line">        build ( l, mid, leftSon );</span><br><span class="line">        build ( mid + <span class="number">1</span>, r, rightSon );</span><br><span class="line"></span><br><span class="line">        seg[n] = up ( seg[leftSon], seg[rightSon] );</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">update</span> <span class="params">( <span class="keyword">int</span> l, <span class="keyword">int</span> r, <span class="keyword">int</span> Index, <span class="keyword">int</span> n )</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> ( l == r )</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    <span class="keyword">int</span> mid = ( l + r ) &gt;&gt; <span class="number">1</span>, leftSon = n &lt;&lt; <span class="number">1</span>, rightSon = leftSon | <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">if</span> ( Index &lt;= mid )</span><br><span class="line">        update ( l, mid, Index, leftSon );</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        update ( mid + <span class="number">1</span>, r, Index, rightSon );</span><br><span class="line"></span><br><span class="line">    seg[n] = up ( seg[leftSon], seg[rightSon] );</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">node <span class="title">query</span> <span class="params">( <span class="keyword">int</span> l, <span class="keyword">int</span> r, <span class="keyword">int</span> nowL, <span class="keyword">int</span> nowR, <span class="keyword">int</span> n )</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> ( l &lt;= nowL &amp;&amp; nowR &lt;= r )</span><br><span class="line">        <span class="keyword">return</span> seg[n];</span><br><span class="line">    <span class="keyword">int</span> mid = ( nowL + nowR ) &gt;&gt; <span class="number">1</span>, leftSon = n &lt;&lt; <span class="number">1</span>, rightSon = leftSon | <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">if</span> ( r &lt;= mid )</span><br><span class="line">        <span class="keyword">return</span> query ( l, r, nowL, mid, leftSon );</span><br><span class="line">    <span class="keyword">if</span> ( mid &lt; l )</span><br><span class="line">        <span class="keyword">return</span> query ( l, r, mid + <span class="number">1</span>, nowR, rightSon );</span><br><span class="line">    <span class="keyword">return</span> up ( query ( l, r, nowL, mid, leftSon ), query ( l, r, mid + <span class="number">1</span>, nowR, rightSon ) );</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    ios::sync_with_stdio ( <span class="literal">false</span> );</span><br><span class="line">    <span class="built_in">cin</span>.tie ( <span class="number">0</span> );</span><br><span class="line">    <span class="built_in">cout</span>.tie ( <span class="number">0</span> );</span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> n, q, l, r, type;</span><br><span class="line">    <span class="built_in">cin</span> &gt;&gt; n;</span><br><span class="line">    <span class="keyword">for</span> ( <span class="keyword">int</span> i = <span class="number">1</span> ; i &lt;= n ; i++ )</span><br><span class="line">        <span class="built_in">cin</span> &gt;&gt; basic[i];</span><br><span class="line">    build ( <span class="number">1</span>, n, <span class="number">1</span> );</span><br><span class="line"></span><br><span class="line">    <span class="built_in">cin</span> &gt;&gt; q;</span><br><span class="line">    <span class="keyword">while</span> ( q-- )&#123;</span><br><span class="line">        <span class="built_in">cin</span> &gt;&gt; type &gt;&gt; l &gt;&gt; r;</span><br><span class="line">        <span class="keyword">if</span> ( type == <span class="number">1</span> )&#123;</span><br><span class="line">            basic[l] = r;</span><br><span class="line">            update ( <span class="number">1</span>, n, l, <span class="number">1</span> );</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            <span class="built_in">cout</span> &lt;&lt; query ( l, r, <span class="number">1</span>, n, <span class="number">1</span> ).ma.sz &lt;&lt; <span class="string">'\n'</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><!-- rebuild by neat -->]]></content>
      
      
      
        <tags>
            
            <tag> segment tree </tag>
            
            <tag> TOJ </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>[TIOJ][1940]Nim</title>
      <link href="/code/TIOJ-1940/"/>
      <url>/code/TIOJ-1940/</url>
      
        <content type="html"><![CDATA[<!-- build time:Mon May 04 2020 16:50:35 GMT+0800 (Taipei Standard Time) --><h2 id="題目"><a class="header-anchor" href="#題目"></a>題目</h2><p>這題目很哏，真得很哏<br>哏到我都快不想寫了（結果還是用兩節課 AC 了）<br>題目略過，要看原題的<a href="https://tioj.ck.tp.edu.tw/problems/1940" target="_blank" rel="noopener">在這</a></p><a id="more"></a><h2 id="解法"><a class="header-anchor" href="#解法"></a>解法</h2><p>我看完題目第一個想法就是 DP</p><p>。。。然後我就 TLE 了（廢話</p><p>因為是要求前 $N$ 項的 $mex$，所以真的會想到 DP<br>但是請看範圍：$1e9$，怎麼看都會 TLE<br>所以只能想一下數學解法了</p><p>$k = 1$ 的解法不用講了，直接輸出數字就好了 = =（好哏</p><p>接著是 $k = 2$，我們觀察一下 $f ( 2, n )$ 的前 $12$ 項：<br>$$0, 1, 0, 1, 2, 0, 3, 1, 4, 2, 5, 0, 6$$<br>經過觀察，其實只要當 $n$ 為偶數時，直接輸出 $\frac{n}{2}$ 就好了</p><p>接著再分兩個case : $n$ 為奇術時</p><p>case 餘一：$\frac{n}{4}$ 的整數部分 $\to \lfloor \frac{n}{4} \rfloor$<br>case 餘三：$f ( 2, \frac{n}{2} ) \to$直接對這個函數做遞迴就好</p><p>總結一下，函數大概長這樣</p><p>$$f ( k, n ) =<br>\begin{cases}<br>n, &amp; \text{if $k$ is $1$} \<br>\begin{cases}<br>\frac{n}{2}, &amp; \text{if $n$ is even} \<br>\lfloor \frac{n}{4} \rfloor, &amp; \text{if $n = 4\times k + 1 ( k \in \mathbb{R} )$ } \<br>f ( 2, \frac{n}{2} ), &amp; \text{if $n = 4\times k + 3 ( k \in \mathbb{R} )$ }<br>\end{cases}, &amp; \text{if $k$ is $2$ }<br>\end{cases}<br>$$</p><p>因為遞迴不需要超過兩次，所以可以視為常數時間內，$O ( 1 )$ 的解法</p><h2 id="code"><a class="header-anchor" href="#code"></a>code</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// by. MiohitoKiri5474</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> LL;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> maxN 10005</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">count</span> <span class="params">( <span class="keyword">int</span> n )</span></span>&#123;</span><br><span class="line">    <span class="keyword">switch</span> ( n )&#123;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">3</span>:</span><br><span class="line">        <span class="keyword">case</span> <span class="number">1</span>: <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">5</span>:</span><br><span class="line">        <span class="keyword">case</span> <span class="number">2</span>: <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">default</span>: </span><br><span class="line">            <span class="keyword">switch</span> ( n % <span class="number">4</span> )&#123;</span><br><span class="line">                <span class="keyword">case</span> <span class="number">2</span>:</span><br><span class="line">                <span class="keyword">case</span> <span class="number">0</span>: <span class="keyword">return</span> n / <span class="number">2</span>;</span><br><span class="line">                <span class="keyword">case</span> <span class="number">1</span>: <span class="keyword">return</span> n / <span class="number">4</span>;</span><br><span class="line">                <span class="keyword">case</span> <span class="number">3</span>: <span class="keyword">return</span> count ( n / <span class="number">2</span> );</span><br><span class="line">            &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> k, m;</span><br><span class="line">    <span class="built_in">scanf</span> ( <span class="string">"%d%d"</span>, &amp;k, &amp;m );</span><br><span class="line">    <span class="built_in">printf</span> ( <span class="string">"%d\n"</span>, ( k == <span class="number">1</span> ? m : count ( m ) ) );</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="後記-2019-03-23-00-29"><a class="header-anchor" href="#後記-2019-03-23-00-29"></a>後記(2019/03/23 00:29)</h2><p>為了能讓這篇文章的函數好看一些<br>硬生生讓 hexo 支援 mathjax 了<br>然後上面那個精美的函式，我把原始碼放這邊</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">$$</span><br><span class="line">f ( k, n ) &#x3D;</span><br><span class="line">\begin&#123;cases&#125;</span><br><span class="line">n, &amp; \text&#123;if $k$ is $1$&#125; \\</span><br><span class="line">\begin&#123;cases&#125;</span><br><span class="line">\frac&#123;n&#125;&#123;2&#125;, &amp; \text&#123;if $n$ is even&#125; \\</span><br><span class="line">\lfloor \frac&#123;n&#125;&#123;4&#125; \rfloor, &amp; \text&#123;if $n &#x3D; 4\times k + 1 ( k \in \mathbb&#123;R&#125; )$ &#125; \\</span><br><span class="line">f ( 2, \frac&#123;n&#125;&#123;2&#125; ), &amp; \text&#123;if $n &#x3D; 4\times k + 3 ( k \in \mathbb&#123;R&#125; )$ &#125;</span><br><span class="line">\end&#123;cases&#125;, &amp; \text&#123;if $k$ is $2$ &#125;</span><br><span class="line">\end&#123;cases&#125;</span><br><span class="line">$$</span><br></pre></td></tr></table></figure><!-- rebuild by neat -->]]></content>
      
      
      
        <tags>
            
            <tag> TIOJ </tag>
            
            <tag> math </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
